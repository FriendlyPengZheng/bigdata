// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app_pull_msg.proto

#ifndef PROTOBUF_app_5fpull_5fmsg_2eproto__INCLUDED
#define PROTOBUF_app_5fpull_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace StatPullMsgProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_app_5fpull_5fmsg_2eproto();
void protobuf_AssignDesc_app_5fpull_5fmsg_2eproto();
void protobuf_ShutdownFile_app_5fpull_5fmsg_2eproto();

class MsgBody;
class AppPullMsgRequest;
class AppPullMsgResponse;

// ===================================================================

class MsgBody : public ::google_public::protobuf::Message {
 public:
  MsgBody();
  virtual ~MsgBody();

  MsgBody(const MsgBody& from);

  inline MsgBody& operator=(const MsgBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const MsgBody& default_instance();

  void Swap(MsgBody* other);

  // implements Message ----------------------------------------------

  MsgBody* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const MsgBody& from);
  void MergeFrom(const MsgBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg_id = 1;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline const ::std::string& msg_id() const;
  inline void set_msg_id(const ::std::string& value);
  inline void set_msg_id(const char* value);
  inline void set_msg_id(const char* value, size_t size);
  inline ::std::string* mutable_msg_id();
  inline ::std::string* release_msg_id();
  inline void set_allocated_msg_id(::std::string* msg_id);

  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:StatPullMsgProto.MsgBody)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_id_;
  ::std::string* title_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_app_5fpull_5fmsg_2eproto();
  friend void protobuf_AssignDesc_app_5fpull_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_app_5fpull_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static MsgBody* default_instance_;
};
// -------------------------------------------------------------------

class AppPullMsgRequest : public ::google_public::protobuf::Message {
 public:
  AppPullMsgRequest();
  virtual ~AppPullMsgRequest();

  AppPullMsgRequest(const AppPullMsgRequest& from);

  inline AppPullMsgRequest& operator=(const AppPullMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const AppPullMsgRequest& default_instance();

  void Swap(AppPullMsgRequest* other);

  // implements Message ----------------------------------------------

  AppPullMsgRequest* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const AppPullMsgRequest& from);
  void MergeFrom(const AppPullMsgRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // repeated string msg_id = 2;
  inline int msg_id_size() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  inline const ::std::string& msg_id(int index) const;
  inline ::std::string* mutable_msg_id(int index);
  inline void set_msg_id(int index, const ::std::string& value);
  inline void set_msg_id(int index, const char* value);
  inline void set_msg_id(int index, const char* value, size_t size);
  inline ::std::string* add_msg_id();
  inline void add_msg_id(const ::std::string& value);
  inline void add_msg_id(const char* value);
  inline void add_msg_id(const char* value, size_t size);
  inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>& msg_id() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::std::string>* mutable_msg_id();

  // optional string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:StatPullMsgProto.AppPullMsgRequest)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_token();
  inline void clear_has_token();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::google_public::protobuf::RepeatedPtrField< ::std::string> msg_id_;
  ::std::string* token_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_app_5fpull_5fmsg_2eproto();
  friend void protobuf_AssignDesc_app_5fpull_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_app_5fpull_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static AppPullMsgRequest* default_instance_;
};
// -------------------------------------------------------------------

class AppPullMsgResponse : public ::google_public::protobuf::Message {
 public:
  AppPullMsgResponse();
  virtual ~AppPullMsgResponse();

  AppPullMsgResponse(const AppPullMsgResponse& from);

  inline AppPullMsgResponse& operator=(const AppPullMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const AppPullMsgResponse& default_instance();

  void Swap(AppPullMsgResponse* other);

  // implements Message ----------------------------------------------

  AppPullMsgResponse* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const AppPullMsgResponse& from);
  void MergeFrom(const AppPullMsgResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google_public::protobuf::uint32 ret() const;
  inline void set_ret(::google_public::protobuf::uint32 value);

  // repeated .StatPullMsgProto.MsgBody msg = 2;
  inline int msg_size() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::StatPullMsgProto::MsgBody& msg(int index) const;
  inline ::StatPullMsgProto::MsgBody* mutable_msg(int index);
  inline ::StatPullMsgProto::MsgBody* add_msg();
  inline const ::google_public::protobuf::RepeatedPtrField< ::StatPullMsgProto::MsgBody >&
      msg() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::StatPullMsgProto::MsgBody >*
      mutable_msg();

  // @@protoc_insertion_point(class_scope:StatPullMsgProto.AppPullMsgResponse)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::RepeatedPtrField< ::StatPullMsgProto::MsgBody > msg_;
  ::google_public::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_app_5fpull_5fmsg_2eproto();
  friend void protobuf_AssignDesc_app_5fpull_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_app_5fpull_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static AppPullMsgResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgBody

// required string msg_id = 1;
inline bool MsgBody::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgBody::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgBody::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgBody::clear_msg_id() {
  if (msg_id_ != &::google_public::protobuf::internal::kEmptyString) {
    msg_id_->clear();
  }
  clear_has_msg_id();
}
inline const ::std::string& MsgBody::msg_id() const {
  return *msg_id_;
}
inline void MsgBody::set_msg_id(const ::std::string& value) {
  set_has_msg_id();
  if (msg_id_ == &::google_public::protobuf::internal::kEmptyString) {
    msg_id_ = new ::std::string;
  }
  msg_id_->assign(value);
}
inline void MsgBody::set_msg_id(const char* value) {
  set_has_msg_id();
  if (msg_id_ == &::google_public::protobuf::internal::kEmptyString) {
    msg_id_ = new ::std::string;
  }
  msg_id_->assign(value);
}
inline void MsgBody::set_msg_id(const char* value, size_t size) {
  set_has_msg_id();
  if (msg_id_ == &::google_public::protobuf::internal::kEmptyString) {
    msg_id_ = new ::std::string;
  }
  msg_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBody::mutable_msg_id() {
  set_has_msg_id();
  if (msg_id_ == &::google_public::protobuf::internal::kEmptyString) {
    msg_id_ = new ::std::string;
  }
  return msg_id_;
}
inline ::std::string* MsgBody::release_msg_id() {
  clear_has_msg_id();
  if (msg_id_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_id_;
    msg_id_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgBody::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id_ != &::google_public::protobuf::internal::kEmptyString) {
    delete msg_id_;
  }
  if (msg_id) {
    set_has_msg_id();
    msg_id_ = msg_id;
  } else {
    clear_has_msg_id();
    msg_id_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string title = 2;
inline bool MsgBody::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgBody::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgBody::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgBody::clear_title() {
  if (title_ != &::google_public::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& MsgBody::title() const {
  return *title_;
}
inline void MsgBody::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MsgBody::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MsgBody::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBody::mutable_title() {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* MsgBody::release_title() {
  clear_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgBody::set_allocated_title(::std::string* title) {
  if (title_ != &::google_public::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string content = 3;
inline bool MsgBody::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgBody::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgBody::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgBody::clear_content() {
  if (content_ != &::google_public::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MsgBody::content() const {
  return *content_;
}
inline void MsgBody::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MsgBody::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MsgBody::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBody::mutable_content() {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* MsgBody::release_content() {
  clear_has_content();
  if (content_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgBody::set_allocated_content(::std::string* content) {
  if (content_ != &::google_public::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AppPullMsgRequest

// required string user_name = 1;
inline bool AppPullMsgRequest::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppPullMsgRequest::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppPullMsgRequest::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppPullMsgRequest::clear_user_name() {
  if (user_name_ != &::google_public::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& AppPullMsgRequest::user_name() const {
  return *user_name_;
}
inline void AppPullMsgRequest::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void AppPullMsgRequest::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void AppPullMsgRequest::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppPullMsgRequest::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* AppPullMsgRequest::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppPullMsgRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google_public::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// repeated string msg_id = 2;
inline int AppPullMsgRequest::msg_id_size() const {
  return msg_id_.size();
}
inline void AppPullMsgRequest::clear_msg_id() {
  msg_id_.Clear();
}
inline const ::std::string& AppPullMsgRequest::msg_id(int index) const {
  return msg_id_.Get(index);
}
inline ::std::string* AppPullMsgRequest::mutable_msg_id(int index) {
  return msg_id_.Mutable(index);
}
inline void AppPullMsgRequest::set_msg_id(int index, const ::std::string& value) {
  msg_id_.Mutable(index)->assign(value);
}
inline void AppPullMsgRequest::set_msg_id(int index, const char* value) {
  msg_id_.Mutable(index)->assign(value);
}
inline void AppPullMsgRequest::set_msg_id(int index, const char* value, size_t size) {
  msg_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppPullMsgRequest::add_msg_id() {
  return msg_id_.Add();
}
inline void AppPullMsgRequest::add_msg_id(const ::std::string& value) {
  msg_id_.Add()->assign(value);
}
inline void AppPullMsgRequest::add_msg_id(const char* value) {
  msg_id_.Add()->assign(value);
}
inline void AppPullMsgRequest::add_msg_id(const char* value, size_t size) {
  msg_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>&
AppPullMsgRequest::msg_id() const {
  return msg_id_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::std::string>*
AppPullMsgRequest::mutable_msg_id() {
  return &msg_id_;
}

// optional string token = 3;
inline bool AppPullMsgRequest::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppPullMsgRequest::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppPullMsgRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppPullMsgRequest::clear_token() {
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& AppPullMsgRequest::token() const {
  return *token_;
}
inline void AppPullMsgRequest::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void AppPullMsgRequest::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void AppPullMsgRequest::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppPullMsgRequest::mutable_token() {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* AppPullMsgRequest::release_token() {
  clear_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppPullMsgRequest::set_allocated_token(::std::string* token) {
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AppPullMsgResponse

// required uint32 ret = 1;
inline bool AppPullMsgResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppPullMsgResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppPullMsgResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppPullMsgResponse::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google_public::protobuf::uint32 AppPullMsgResponse::ret() const {
  return ret_;
}
inline void AppPullMsgResponse::set_ret(::google_public::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .StatPullMsgProto.MsgBody msg = 2;
inline int AppPullMsgResponse::msg_size() const {
  return msg_.size();
}
inline void AppPullMsgResponse::clear_msg() {
  msg_.Clear();
}
inline const ::StatPullMsgProto::MsgBody& AppPullMsgResponse::msg(int index) const {
  return msg_.Get(index);
}
inline ::StatPullMsgProto::MsgBody* AppPullMsgResponse::mutable_msg(int index) {
  return msg_.Mutable(index);
}
inline ::StatPullMsgProto::MsgBody* AppPullMsgResponse::add_msg() {
  return msg_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::StatPullMsgProto::MsgBody >&
AppPullMsgResponse::msg() const {
  return msg_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::StatPullMsgProto::MsgBody >*
AppPullMsgResponse::mutable_msg() {
  return &msg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace StatPullMsgProto

#ifndef SWIG
namespace google_public {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_app_5fpull_5fmsg_2eproto__INCLUDED
