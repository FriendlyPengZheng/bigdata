// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app_login_request.proto

#ifndef PROTOBUF_app_5flogin_5frequest_2eproto__INCLUDED
#define PROTOBUF_app_5flogin_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace StatAppLoginProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_app_5flogin_5frequest_2eproto();
void protobuf_AssignDesc_app_5flogin_5frequest_2eproto();
void protobuf_ShutdownFile_app_5flogin_5frequest_2eproto();

class StatAppLoginRequest;
class StatAppLoginResponse;
class StatAppLogoutRequest;
class StatAppChangeUserRequest;

// ===================================================================

class StatAppLoginRequest : public ::google_public::protobuf::Message {
 public:
  StatAppLoginRequest();
  virtual ~StatAppLoginRequest();

  StatAppLoginRequest(const StatAppLoginRequest& from);

  inline StatAppLoginRequest& operator=(const StatAppLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const StatAppLoginRequest& default_instance();

  void Swap(StatAppLoginRequest* other);

  // implements Message ----------------------------------------------

  StatAppLoginRequest* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const StatAppLoginRequest& from);
  void MergeFrom(const StatAppLoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required string device_type = 4;
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 4;
  inline const ::std::string& device_type() const;
  inline void set_device_type(const ::std::string& value);
  inline void set_device_type(const char* value);
  inline void set_device_type(const char* value, size_t size);
  inline ::std::string* mutable_device_type();
  inline ::std::string* release_device_type();
  inline void set_allocated_device_type(::std::string* device_type);

  // required string mobile = 5;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 5;
  inline const ::std::string& mobile() const;
  inline void set_mobile(const ::std::string& value);
  inline void set_mobile(const char* value);
  inline void set_mobile(const char* value, size_t size);
  inline ::std::string* mutable_mobile();
  inline ::std::string* release_mobile();
  inline void set_allocated_mobile(::std::string* mobile);

  // @@protoc_insertion_point(class_scope:StatAppLoginProto.StatAppLoginRequest)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_device_type();
  inline void clear_has_device_type();
  inline void set_has_mobile();
  inline void clear_has_mobile();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::std::string* password_;
  ::std::string* token_;
  ::std::string* device_type_;
  ::std::string* mobile_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_app_5flogin_5frequest_2eproto();
  friend void protobuf_AssignDesc_app_5flogin_5frequest_2eproto();
  friend void protobuf_ShutdownFile_app_5flogin_5frequest_2eproto();

  void InitAsDefaultInstance();
  static StatAppLoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class StatAppLoginResponse : public ::google_public::protobuf::Message {
 public:
  StatAppLoginResponse();
  virtual ~StatAppLoginResponse();

  StatAppLoginResponse(const StatAppLoginResponse& from);

  inline StatAppLoginResponse& operator=(const StatAppLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const StatAppLoginResponse& default_instance();

  void Swap(StatAppLoginResponse* other);

  // implements Message ----------------------------------------------

  StatAppLoginResponse* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const StatAppLoginResponse& from);
  void MergeFrom(const StatAppLoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google_public::protobuf::uint32 ret() const;
  inline void set_ret(::google_public::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:StatAppLoginProto.StatAppLoginResponse)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_app_5flogin_5frequest_2eproto();
  friend void protobuf_AssignDesc_app_5flogin_5frequest_2eproto();
  friend void protobuf_ShutdownFile_app_5flogin_5frequest_2eproto();

  void InitAsDefaultInstance();
  static StatAppLoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class StatAppLogoutRequest : public ::google_public::protobuf::Message {
 public:
  StatAppLogoutRequest();
  virtual ~StatAppLogoutRequest();

  StatAppLogoutRequest(const StatAppLogoutRequest& from);

  inline StatAppLogoutRequest& operator=(const StatAppLogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const StatAppLogoutRequest& default_instance();

  void Swap(StatAppLogoutRequest* other);

  // implements Message ----------------------------------------------

  StatAppLogoutRequest* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const StatAppLogoutRequest& from);
  void MergeFrom(const StatAppLogoutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:StatAppLoginProto.StatAppLogoutRequest)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_token();
  inline void clear_has_token();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::std::string* token_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_app_5flogin_5frequest_2eproto();
  friend void protobuf_AssignDesc_app_5flogin_5frequest_2eproto();
  friend void protobuf_ShutdownFile_app_5flogin_5frequest_2eproto();

  void InitAsDefaultInstance();
  static StatAppLogoutRequest* default_instance_;
};
// -------------------------------------------------------------------

class StatAppChangeUserRequest : public ::google_public::protobuf::Message {
 public:
  StatAppChangeUserRequest();
  virtual ~StatAppChangeUserRequest();

  StatAppChangeUserRequest(const StatAppChangeUserRequest& from);

  inline StatAppChangeUserRequest& operator=(const StatAppChangeUserRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const StatAppChangeUserRequest& default_instance();

  void Swap(StatAppChangeUserRequest* other);

  // implements Message ----------------------------------------------

  StatAppChangeUserRequest* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const StatAppChangeUserRequest& from);
  void MergeFrom(const StatAppChangeUserRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string old_user = 1;
  inline bool has_old_user() const;
  inline void clear_old_user();
  static const int kOldUserFieldNumber = 1;
  inline const ::std::string& old_user() const;
  inline void set_old_user(const ::std::string& value);
  inline void set_old_user(const char* value);
  inline void set_old_user(const char* value, size_t size);
  inline ::std::string* mutable_old_user();
  inline ::std::string* release_old_user();
  inline void set_allocated_old_user(::std::string* old_user);

  // required string new_user = 2;
  inline bool has_new_user() const;
  inline void clear_new_user();
  static const int kNewUserFieldNumber = 2;
  inline const ::std::string& new_user() const;
  inline void set_new_user(const ::std::string& value);
  inline void set_new_user(const char* value);
  inline void set_new_user(const char* value, size_t size);
  inline ::std::string* mutable_new_user();
  inline ::std::string* release_new_user();
  inline void set_allocated_new_user(::std::string* new_user);

  // required string new_password = 3;
  inline bool has_new_password() const;
  inline void clear_new_password();
  static const int kNewPasswordFieldNumber = 3;
  inline const ::std::string& new_password() const;
  inline void set_new_password(const ::std::string& value);
  inline void set_new_password(const char* value);
  inline void set_new_password(const char* value, size_t size);
  inline ::std::string* mutable_new_password();
  inline ::std::string* release_new_password();
  inline void set_allocated_new_password(::std::string* new_password);

  // required string token = 4;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:StatAppLoginProto.StatAppChangeUserRequest)
 private:
  inline void set_has_old_user();
  inline void clear_has_old_user();
  inline void set_has_new_user();
  inline void clear_has_new_user();
  inline void set_has_new_password();
  inline void clear_has_new_password();
  inline void set_has_token();
  inline void clear_has_token();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* old_user_;
  ::std::string* new_user_;
  ::std::string* new_password_;
  ::std::string* token_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_app_5flogin_5frequest_2eproto();
  friend void protobuf_AssignDesc_app_5flogin_5frequest_2eproto();
  friend void protobuf_ShutdownFile_app_5flogin_5frequest_2eproto();

  void InitAsDefaultInstance();
  static StatAppChangeUserRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// StatAppLoginRequest

// required string user_name = 1;
inline bool StatAppLoginRequest::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatAppLoginRequest::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatAppLoginRequest::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatAppLoginRequest::clear_user_name() {
  if (user_name_ != &::google_public::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& StatAppLoginRequest::user_name() const {
  return *user_name_;
}
inline void StatAppLoginRequest::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void StatAppLoginRequest::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void StatAppLoginRequest::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatAppLoginRequest::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* StatAppLoginRequest::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StatAppLoginRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google_public::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool StatAppLoginRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatAppLoginRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatAppLoginRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatAppLoginRequest::clear_password() {
  if (password_ != &::google_public::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& StatAppLoginRequest::password() const {
  return *password_;
}
inline void StatAppLoginRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google_public::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void StatAppLoginRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google_public::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void StatAppLoginRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google_public::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatAppLoginRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google_public::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* StatAppLoginRequest::release_password() {
  clear_has_password();
  if (password_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StatAppLoginRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google_public::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string token = 3;
inline bool StatAppLoginRequest::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatAppLoginRequest::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatAppLoginRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatAppLoginRequest::clear_token() {
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& StatAppLoginRequest::token() const {
  return *token_;
}
inline void StatAppLoginRequest::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void StatAppLoginRequest::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void StatAppLoginRequest::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatAppLoginRequest::mutable_token() {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* StatAppLoginRequest::release_token() {
  clear_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StatAppLoginRequest::set_allocated_token(::std::string* token) {
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string device_type = 4;
inline bool StatAppLoginRequest::has_device_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatAppLoginRequest::set_has_device_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatAppLoginRequest::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatAppLoginRequest::clear_device_type() {
  if (device_type_ != &::google_public::protobuf::internal::kEmptyString) {
    device_type_->clear();
  }
  clear_has_device_type();
}
inline const ::std::string& StatAppLoginRequest::device_type() const {
  return *device_type_;
}
inline void StatAppLoginRequest::set_device_type(const ::std::string& value) {
  set_has_device_type();
  if (device_type_ == &::google_public::protobuf::internal::kEmptyString) {
    device_type_ = new ::std::string;
  }
  device_type_->assign(value);
}
inline void StatAppLoginRequest::set_device_type(const char* value) {
  set_has_device_type();
  if (device_type_ == &::google_public::protobuf::internal::kEmptyString) {
    device_type_ = new ::std::string;
  }
  device_type_->assign(value);
}
inline void StatAppLoginRequest::set_device_type(const char* value, size_t size) {
  set_has_device_type();
  if (device_type_ == &::google_public::protobuf::internal::kEmptyString) {
    device_type_ = new ::std::string;
  }
  device_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatAppLoginRequest::mutable_device_type() {
  set_has_device_type();
  if (device_type_ == &::google_public::protobuf::internal::kEmptyString) {
    device_type_ = new ::std::string;
  }
  return device_type_;
}
inline ::std::string* StatAppLoginRequest::release_device_type() {
  clear_has_device_type();
  if (device_type_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_type_;
    device_type_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StatAppLoginRequest::set_allocated_device_type(::std::string* device_type) {
  if (device_type_ != &::google_public::protobuf::internal::kEmptyString) {
    delete device_type_;
  }
  if (device_type) {
    set_has_device_type();
    device_type_ = device_type;
  } else {
    clear_has_device_type();
    device_type_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string mobile = 5;
inline bool StatAppLoginRequest::has_mobile() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatAppLoginRequest::set_has_mobile() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StatAppLoginRequest::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StatAppLoginRequest::clear_mobile() {
  if (mobile_ != &::google_public::protobuf::internal::kEmptyString) {
    mobile_->clear();
  }
  clear_has_mobile();
}
inline const ::std::string& StatAppLoginRequest::mobile() const {
  return *mobile_;
}
inline void StatAppLoginRequest::set_mobile(const ::std::string& value) {
  set_has_mobile();
  if (mobile_ == &::google_public::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
}
inline void StatAppLoginRequest::set_mobile(const char* value) {
  set_has_mobile();
  if (mobile_ == &::google_public::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
}
inline void StatAppLoginRequest::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  if (mobile_ == &::google_public::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatAppLoginRequest::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == &::google_public::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  return mobile_;
}
inline ::std::string* StatAppLoginRequest::release_mobile() {
  clear_has_mobile();
  if (mobile_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mobile_;
    mobile_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StatAppLoginRequest::set_allocated_mobile(::std::string* mobile) {
  if (mobile_ != &::google_public::protobuf::internal::kEmptyString) {
    delete mobile_;
  }
  if (mobile) {
    set_has_mobile();
    mobile_ = mobile;
  } else {
    clear_has_mobile();
    mobile_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StatAppLoginResponse

// required uint32 ret = 1;
inline bool StatAppLoginResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatAppLoginResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatAppLoginResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatAppLoginResponse::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google_public::protobuf::uint32 StatAppLoginResponse::ret() const {
  return ret_;
}
inline void StatAppLoginResponse::set_ret(::google_public::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// StatAppLogoutRequest

// required string user_name = 1;
inline bool StatAppLogoutRequest::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatAppLogoutRequest::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatAppLogoutRequest::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatAppLogoutRequest::clear_user_name() {
  if (user_name_ != &::google_public::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& StatAppLogoutRequest::user_name() const {
  return *user_name_;
}
inline void StatAppLogoutRequest::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void StatAppLogoutRequest::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void StatAppLogoutRequest::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatAppLogoutRequest::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* StatAppLogoutRequest::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StatAppLogoutRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google_public::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string token = 2;
inline bool StatAppLogoutRequest::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatAppLogoutRequest::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatAppLogoutRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatAppLogoutRequest::clear_token() {
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& StatAppLogoutRequest::token() const {
  return *token_;
}
inline void StatAppLogoutRequest::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void StatAppLogoutRequest::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void StatAppLogoutRequest::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatAppLogoutRequest::mutable_token() {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* StatAppLogoutRequest::release_token() {
  clear_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StatAppLogoutRequest::set_allocated_token(::std::string* token) {
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StatAppChangeUserRequest

// required string old_user = 1;
inline bool StatAppChangeUserRequest::has_old_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatAppChangeUserRequest::set_has_old_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatAppChangeUserRequest::clear_has_old_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatAppChangeUserRequest::clear_old_user() {
  if (old_user_ != &::google_public::protobuf::internal::kEmptyString) {
    old_user_->clear();
  }
  clear_has_old_user();
}
inline const ::std::string& StatAppChangeUserRequest::old_user() const {
  return *old_user_;
}
inline void StatAppChangeUserRequest::set_old_user(const ::std::string& value) {
  set_has_old_user();
  if (old_user_ == &::google_public::protobuf::internal::kEmptyString) {
    old_user_ = new ::std::string;
  }
  old_user_->assign(value);
}
inline void StatAppChangeUserRequest::set_old_user(const char* value) {
  set_has_old_user();
  if (old_user_ == &::google_public::protobuf::internal::kEmptyString) {
    old_user_ = new ::std::string;
  }
  old_user_->assign(value);
}
inline void StatAppChangeUserRequest::set_old_user(const char* value, size_t size) {
  set_has_old_user();
  if (old_user_ == &::google_public::protobuf::internal::kEmptyString) {
    old_user_ = new ::std::string;
  }
  old_user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatAppChangeUserRequest::mutable_old_user() {
  set_has_old_user();
  if (old_user_ == &::google_public::protobuf::internal::kEmptyString) {
    old_user_ = new ::std::string;
  }
  return old_user_;
}
inline ::std::string* StatAppChangeUserRequest::release_old_user() {
  clear_has_old_user();
  if (old_user_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = old_user_;
    old_user_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StatAppChangeUserRequest::set_allocated_old_user(::std::string* old_user) {
  if (old_user_ != &::google_public::protobuf::internal::kEmptyString) {
    delete old_user_;
  }
  if (old_user) {
    set_has_old_user();
    old_user_ = old_user;
  } else {
    clear_has_old_user();
    old_user_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string new_user = 2;
inline bool StatAppChangeUserRequest::has_new_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatAppChangeUserRequest::set_has_new_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatAppChangeUserRequest::clear_has_new_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatAppChangeUserRequest::clear_new_user() {
  if (new_user_ != &::google_public::protobuf::internal::kEmptyString) {
    new_user_->clear();
  }
  clear_has_new_user();
}
inline const ::std::string& StatAppChangeUserRequest::new_user() const {
  return *new_user_;
}
inline void StatAppChangeUserRequest::set_new_user(const ::std::string& value) {
  set_has_new_user();
  if (new_user_ == &::google_public::protobuf::internal::kEmptyString) {
    new_user_ = new ::std::string;
  }
  new_user_->assign(value);
}
inline void StatAppChangeUserRequest::set_new_user(const char* value) {
  set_has_new_user();
  if (new_user_ == &::google_public::protobuf::internal::kEmptyString) {
    new_user_ = new ::std::string;
  }
  new_user_->assign(value);
}
inline void StatAppChangeUserRequest::set_new_user(const char* value, size_t size) {
  set_has_new_user();
  if (new_user_ == &::google_public::protobuf::internal::kEmptyString) {
    new_user_ = new ::std::string;
  }
  new_user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatAppChangeUserRequest::mutable_new_user() {
  set_has_new_user();
  if (new_user_ == &::google_public::protobuf::internal::kEmptyString) {
    new_user_ = new ::std::string;
  }
  return new_user_;
}
inline ::std::string* StatAppChangeUserRequest::release_new_user() {
  clear_has_new_user();
  if (new_user_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_user_;
    new_user_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StatAppChangeUserRequest::set_allocated_new_user(::std::string* new_user) {
  if (new_user_ != &::google_public::protobuf::internal::kEmptyString) {
    delete new_user_;
  }
  if (new_user) {
    set_has_new_user();
    new_user_ = new_user;
  } else {
    clear_has_new_user();
    new_user_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string new_password = 3;
inline bool StatAppChangeUserRequest::has_new_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatAppChangeUserRequest::set_has_new_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatAppChangeUserRequest::clear_has_new_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatAppChangeUserRequest::clear_new_password() {
  if (new_password_ != &::google_public::protobuf::internal::kEmptyString) {
    new_password_->clear();
  }
  clear_has_new_password();
}
inline const ::std::string& StatAppChangeUserRequest::new_password() const {
  return *new_password_;
}
inline void StatAppChangeUserRequest::set_new_password(const ::std::string& value) {
  set_has_new_password();
  if (new_password_ == &::google_public::protobuf::internal::kEmptyString) {
    new_password_ = new ::std::string;
  }
  new_password_->assign(value);
}
inline void StatAppChangeUserRequest::set_new_password(const char* value) {
  set_has_new_password();
  if (new_password_ == &::google_public::protobuf::internal::kEmptyString) {
    new_password_ = new ::std::string;
  }
  new_password_->assign(value);
}
inline void StatAppChangeUserRequest::set_new_password(const char* value, size_t size) {
  set_has_new_password();
  if (new_password_ == &::google_public::protobuf::internal::kEmptyString) {
    new_password_ = new ::std::string;
  }
  new_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatAppChangeUserRequest::mutable_new_password() {
  set_has_new_password();
  if (new_password_ == &::google_public::protobuf::internal::kEmptyString) {
    new_password_ = new ::std::string;
  }
  return new_password_;
}
inline ::std::string* StatAppChangeUserRequest::release_new_password() {
  clear_has_new_password();
  if (new_password_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_password_;
    new_password_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StatAppChangeUserRequest::set_allocated_new_password(::std::string* new_password) {
  if (new_password_ != &::google_public::protobuf::internal::kEmptyString) {
    delete new_password_;
  }
  if (new_password) {
    set_has_new_password();
    new_password_ = new_password;
  } else {
    clear_has_new_password();
    new_password_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string token = 4;
inline bool StatAppChangeUserRequest::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatAppChangeUserRequest::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatAppChangeUserRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatAppChangeUserRequest::clear_token() {
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& StatAppChangeUserRequest::token() const {
  return *token_;
}
inline void StatAppChangeUserRequest::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void StatAppChangeUserRequest::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void StatAppChangeUserRequest::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatAppChangeUserRequest::mutable_token() {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* StatAppChangeUserRequest::release_token() {
  clear_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StatAppChangeUserRequest::set_allocated_token(::std::string* token) {
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace StatAppLoginProto

#ifndef SWIG
namespace google_public {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_app_5flogin_5frequest_2eproto__INCLUDED
