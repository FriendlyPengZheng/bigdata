// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: statlogger.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "statlogger.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace statlogger {

namespace {

const ::google::protobuf::Descriptor* cs_0xF001_veri_pass_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF001_veri_pass_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF001_veri_pass_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF001_veri_pass_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF002_reg_role_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF002_reg_role_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF002_reg_role_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF002_reg_role_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF003_login_online_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF003_login_online_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF003_login_online_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF003_login_online_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF004_logout_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF004_logout_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF004_logout_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF004_logout_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF005_online_count_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF005_online_count_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF005_online_count_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF005_online_count_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF006_level_up_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF006_level_up_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF006_level_up_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF006_level_up_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF007_pay_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF007_pay_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF007_pay_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF007_pay_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF008_free_golds_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF008_free_golds_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF008_free_golds_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF008_free_golds_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF009_buy_item_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF009_buy_item_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF009_buy_item_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF009_buy_item_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF00A_buy_other_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF00A_buy_other_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF00A_buy_other_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF00A_buy_other_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF00B_accept_task_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF00B_accept_task_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF00B_accept_task_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF00B_accept_task_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF00C_finish_task_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF00C_finish_task_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF00C_finish_task_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF00C_finish_task_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF00D_abort_task_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF00D_abort_task_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF00D_abort_task_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF00D_abort_task_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF00E_obtain_spirit_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF00E_obtain_spirit_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF00E_obtain_spirit_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF00E_obtain_spirit_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF00F_lose_spirit_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF00F_lose_spirit_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF00F_lose_spirit_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF00F_lose_spirit_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF010_new_trans_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF010_new_trans_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF010_new_trans_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF010_new_trans_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* cs_0xF100_custom_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_0xF100_custom_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_0xF100_custom_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_0xF100_custom_t_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* zone_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* unit_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* currency_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pay_reason_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* task_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* reg_trans_step_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* op_type_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_statlogger_2eproto() {
  protobuf_AddDesc_statlogger_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "statlogger.proto");
  GOOGLE_CHECK(file != NULL);
  cs_0xF001_veri_pass_t_descriptor_ = file->message_type(0);
  static const int cs_0xF001_veri_pass_t_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF001_veri_pass_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF001_veri_pass_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF001_veri_pass_t, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF001_veri_pass_t, ads_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF001_veri_pass_t, browse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF001_veri_pass_t, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF001_veri_pass_t, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF001_veri_pass_t, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF001_veri_pass_t, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF001_veri_pass_t, isp_),
  };
  cs_0xF001_veri_pass_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF001_veri_pass_t_descriptor_,
      cs_0xF001_veri_pass_t::default_instance_,
      cs_0xF001_veri_pass_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF001_veri_pass_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF001_veri_pass_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF001_veri_pass_t));
  sc_0xF001_veri_pass_t_descriptor_ = file->message_type(1);
  static const int sc_0xF001_veri_pass_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF001_veri_pass_t, ret_),
  };
  sc_0xF001_veri_pass_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF001_veri_pass_t_descriptor_,
      sc_0xF001_veri_pass_t::default_instance_,
      sc_0xF001_veri_pass_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF001_veri_pass_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF001_veri_pass_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF001_veri_pass_t));
  cs_0xF002_reg_role_t_descriptor_ = file->message_type(2);
  static const int cs_0xF002_reg_role_t_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF002_reg_role_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF002_reg_role_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF002_reg_role_t, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF002_reg_role_t, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF002_reg_role_t, ads_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF002_reg_role_t, browse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF002_reg_role_t, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF002_reg_role_t, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF002_reg_role_t, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF002_reg_role_t, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF002_reg_role_t, isp_),
  };
  cs_0xF002_reg_role_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF002_reg_role_t_descriptor_,
      cs_0xF002_reg_role_t::default_instance_,
      cs_0xF002_reg_role_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF002_reg_role_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF002_reg_role_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF002_reg_role_t));
  sc_0xF002_reg_role_t_descriptor_ = file->message_type(3);
  static const int sc_0xF002_reg_role_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF002_reg_role_t, ret_),
  };
  sc_0xF002_reg_role_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF002_reg_role_t_descriptor_,
      sc_0xF002_reg_role_t::default_instance_,
      sc_0xF002_reg_role_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF002_reg_role_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF002_reg_role_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF002_reg_role_t));
  cs_0xF003_login_online_t_descriptor_ = file->message_type(4);
  static const int cs_0xF003_login_online_t_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, isvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, ads_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, browse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, isp_),
  };
  cs_0xF003_login_online_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF003_login_online_t_descriptor_,
      cs_0xF003_login_online_t::default_instance_,
      cs_0xF003_login_online_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF003_login_online_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF003_login_online_t));
  sc_0xF003_login_online_t_descriptor_ = file->message_type(5);
  static const int sc_0xF003_login_online_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF003_login_online_t, ret_),
  };
  sc_0xF003_login_online_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF003_login_online_t_descriptor_,
      sc_0xF003_login_online_t::default_instance_,
      sc_0xF003_login_online_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF003_login_online_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF003_login_online_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF003_login_online_t));
  cs_0xF004_logout_t_descriptor_ = file->message_type(6);
  static const int cs_0xF004_logout_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF004_logout_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF004_logout_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF004_logout_t, oltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF004_logout_t, isvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF004_logout_t, level_),
  };
  cs_0xF004_logout_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF004_logout_t_descriptor_,
      cs_0xF004_logout_t::default_instance_,
      cs_0xF004_logout_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF004_logout_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF004_logout_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF004_logout_t));
  sc_0xF004_logout_t_descriptor_ = file->message_type(7);
  static const int sc_0xF004_logout_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF004_logout_t, ret_),
  };
  sc_0xF004_logout_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF004_logout_t_descriptor_,
      sc_0xF004_logout_t::default_instance_,
      sc_0xF004_logout_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF004_logout_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF004_logout_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF004_logout_t));
  cs_0xF005_online_count_t_descriptor_ = file->message_type(8);
  static const int cs_0xF005_online_count_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF005_online_count_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF005_online_count_t, olcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF005_online_count_t, zone_),
  };
  cs_0xF005_online_count_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF005_online_count_t_descriptor_,
      cs_0xF005_online_count_t::default_instance_,
      cs_0xF005_online_count_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF005_online_count_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF005_online_count_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF005_online_count_t));
  sc_0xF005_online_count_t_descriptor_ = file->message_type(9);
  static const int sc_0xF005_online_count_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF005_online_count_t, ret_),
  };
  sc_0xF005_online_count_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF005_online_count_t_descriptor_,
      sc_0xF005_online_count_t::default_instance_,
      sc_0xF005_online_count_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF005_online_count_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF005_online_count_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF005_online_count_t));
  cs_0xF006_level_up_t_descriptor_ = file->message_type(10);
  static const int cs_0xF006_level_up_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF006_level_up_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF006_level_up_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF006_level_up_t, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF006_level_up_t, race_),
  };
  cs_0xF006_level_up_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF006_level_up_t_descriptor_,
      cs_0xF006_level_up_t::default_instance_,
      cs_0xF006_level_up_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF006_level_up_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF006_level_up_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF006_level_up_t));
  sc_0xF006_level_up_t_descriptor_ = file->message_type(11);
  static const int sc_0xF006_level_up_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF006_level_up_t, ret_),
  };
  sc_0xF006_level_up_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF006_level_up_t_descriptor_,
      sc_0xF006_level_up_t::default_instance_,
      sc_0xF006_level_up_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF006_level_up_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF006_level_up_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF006_level_up_t));
  cs_0xF007_pay_t_descriptor_ = file->message_type(12);
  static const int cs_0xF007_pay_t_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF007_pay_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF007_pay_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF007_pay_t, isvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF007_pay_t, pay_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF007_pay_t, pay_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF007_pay_t, currency_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF007_pay_t, pay_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF007_pay_t, outcome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF007_pay_t, outcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF007_pay_t, pay_channel_),
  };
  cs_0xF007_pay_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF007_pay_t_descriptor_,
      cs_0xF007_pay_t::default_instance_,
      cs_0xF007_pay_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF007_pay_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF007_pay_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF007_pay_t));
  sc_0xF007_pay_t_descriptor_ = file->message_type(13);
  static const int sc_0xF007_pay_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF007_pay_t, ret_),
  };
  sc_0xF007_pay_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF007_pay_t_descriptor_,
      sc_0xF007_pay_t::default_instance_,
      sc_0xF007_pay_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF007_pay_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF007_pay_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF007_pay_t));
  cs_0xF008_free_golds_t_descriptor_ = file->message_type(14);
  static const int cs_0xF008_free_golds_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF008_free_golds_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF008_free_golds_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF008_free_golds_t, amt_),
  };
  cs_0xF008_free_golds_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF008_free_golds_t_descriptor_,
      cs_0xF008_free_golds_t::default_instance_,
      cs_0xF008_free_golds_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF008_free_golds_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF008_free_golds_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF008_free_golds_t));
  sc_0xF008_free_golds_t_descriptor_ = file->message_type(15);
  static const int sc_0xF008_free_golds_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF008_free_golds_t, ret_),
  };
  sc_0xF008_free_golds_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF008_free_golds_t_descriptor_,
      sc_0xF008_free_golds_t::default_instance_,
      sc_0xF008_free_golds_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF008_free_golds_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF008_free_golds_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF008_free_golds_t));
  cs_0xF009_buy_item_t_descriptor_ = file->message_type(16);
  static const int cs_0xF009_buy_item_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF009_buy_item_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF009_buy_item_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF009_buy_item_t, isvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF009_buy_item_t, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF009_buy_item_t, pay_amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF009_buy_item_t, outcome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF009_buy_item_t, outcnt_),
  };
  cs_0xF009_buy_item_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF009_buy_item_t_descriptor_,
      cs_0xF009_buy_item_t::default_instance_,
      cs_0xF009_buy_item_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF009_buy_item_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF009_buy_item_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF009_buy_item_t));
  sc_0xF009_buy_item_t_descriptor_ = file->message_type(17);
  static const int sc_0xF009_buy_item_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF009_buy_item_t, ret_),
  };
  sc_0xF009_buy_item_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF009_buy_item_t_descriptor_,
      sc_0xF009_buy_item_t::default_instance_,
      sc_0xF009_buy_item_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF009_buy_item_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF009_buy_item_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF009_buy_item_t));
  cs_0xF00A_buy_other_t_descriptor_ = file->message_type(18);
  static const int cs_0xF00A_buy_other_t_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00A_buy_other_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00A_buy_other_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00A_buy_other_t, isvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00A_buy_other_t, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00A_buy_other_t, pay_amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00A_buy_other_t, reason_),
  };
  cs_0xF00A_buy_other_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF00A_buy_other_t_descriptor_,
      cs_0xF00A_buy_other_t::default_instance_,
      cs_0xF00A_buy_other_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00A_buy_other_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00A_buy_other_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF00A_buy_other_t));
  sc_0xF00A_buy_other_t_descriptor_ = file->message_type(19);
  static const int sc_0xF00A_buy_other_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00A_buy_other_t, ret_),
  };
  sc_0xF00A_buy_other_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF00A_buy_other_t_descriptor_,
      sc_0xF00A_buy_other_t::default_instance_,
      sc_0xF00A_buy_other_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00A_buy_other_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00A_buy_other_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF00A_buy_other_t));
  cs_0xF00B_accept_task_t_descriptor_ = file->message_type(20);
  static const int cs_0xF00B_accept_task_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00B_accept_task_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00B_accept_task_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00B_accept_task_t, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00B_accept_task_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00B_accept_task_t, name_),
  };
  cs_0xF00B_accept_task_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF00B_accept_task_t_descriptor_,
      cs_0xF00B_accept_task_t::default_instance_,
      cs_0xF00B_accept_task_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00B_accept_task_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00B_accept_task_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF00B_accept_task_t));
  sc_0xF00B_accept_task_t_descriptor_ = file->message_type(21);
  static const int sc_0xF00B_accept_task_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00B_accept_task_t, ret_),
  };
  sc_0xF00B_accept_task_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF00B_accept_task_t_descriptor_,
      sc_0xF00B_accept_task_t::default_instance_,
      sc_0xF00B_accept_task_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00B_accept_task_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00B_accept_task_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF00B_accept_task_t));
  cs_0xF00C_finish_task_t_descriptor_ = file->message_type(22);
  static const int cs_0xF00C_finish_task_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00C_finish_task_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00C_finish_task_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00C_finish_task_t, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00C_finish_task_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00C_finish_task_t, name_),
  };
  cs_0xF00C_finish_task_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF00C_finish_task_t_descriptor_,
      cs_0xF00C_finish_task_t::default_instance_,
      cs_0xF00C_finish_task_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00C_finish_task_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00C_finish_task_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF00C_finish_task_t));
  sc_0xF00C_finish_task_t_descriptor_ = file->message_type(23);
  static const int sc_0xF00C_finish_task_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00C_finish_task_t, ret_),
  };
  sc_0xF00C_finish_task_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF00C_finish_task_t_descriptor_,
      sc_0xF00C_finish_task_t::default_instance_,
      sc_0xF00C_finish_task_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00C_finish_task_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00C_finish_task_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF00C_finish_task_t));
  cs_0xF00D_abort_task_t_descriptor_ = file->message_type(24);
  static const int cs_0xF00D_abort_task_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00D_abort_task_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00D_abort_task_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00D_abort_task_t, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00D_abort_task_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00D_abort_task_t, name_),
  };
  cs_0xF00D_abort_task_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF00D_abort_task_t_descriptor_,
      cs_0xF00D_abort_task_t::default_instance_,
      cs_0xF00D_abort_task_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00D_abort_task_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00D_abort_task_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF00D_abort_task_t));
  sc_0xF00D_abort_task_t_descriptor_ = file->message_type(25);
  static const int sc_0xF00D_abort_task_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00D_abort_task_t, ret_),
  };
  sc_0xF00D_abort_task_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF00D_abort_task_t_descriptor_,
      sc_0xF00D_abort_task_t::default_instance_,
      sc_0xF00D_abort_task_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00D_abort_task_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00D_abort_task_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF00D_abort_task_t));
  cs_0xF00E_obtain_spirit_t_descriptor_ = file->message_type(26);
  static const int cs_0xF00E_obtain_spirit_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00E_obtain_spirit_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00E_obtain_spirit_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00E_obtain_spirit_t, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00E_obtain_spirit_t, isvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00E_obtain_spirit_t, spirit_),
  };
  cs_0xF00E_obtain_spirit_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF00E_obtain_spirit_t_descriptor_,
      cs_0xF00E_obtain_spirit_t::default_instance_,
      cs_0xF00E_obtain_spirit_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00E_obtain_spirit_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00E_obtain_spirit_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF00E_obtain_spirit_t));
  sc_0xF00E_obtain_spirit_t_descriptor_ = file->message_type(27);
  static const int sc_0xF00E_obtain_spirit_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00E_obtain_spirit_t, ret_),
  };
  sc_0xF00E_obtain_spirit_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF00E_obtain_spirit_t_descriptor_,
      sc_0xF00E_obtain_spirit_t::default_instance_,
      sc_0xF00E_obtain_spirit_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00E_obtain_spirit_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00E_obtain_spirit_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF00E_obtain_spirit_t));
  cs_0xF00F_lose_spirit_t_descriptor_ = file->message_type(28);
  static const int cs_0xF00F_lose_spirit_t_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00F_lose_spirit_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00F_lose_spirit_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00F_lose_spirit_t, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00F_lose_spirit_t, isvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00F_lose_spirit_t, spirit_),
  };
  cs_0xF00F_lose_spirit_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF00F_lose_spirit_t_descriptor_,
      cs_0xF00F_lose_spirit_t::default_instance_,
      cs_0xF00F_lose_spirit_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00F_lose_spirit_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF00F_lose_spirit_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF00F_lose_spirit_t));
  sc_0xF00F_lose_spirit_t_descriptor_ = file->message_type(29);
  static const int sc_0xF00F_lose_spirit_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00F_lose_spirit_t, ret_),
  };
  sc_0xF00F_lose_spirit_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF00F_lose_spirit_t_descriptor_,
      sc_0xF00F_lose_spirit_t::default_instance_,
      sc_0xF00F_lose_spirit_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00F_lose_spirit_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF00F_lose_spirit_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF00F_lose_spirit_t));
  cs_0xF010_new_trans_t_descriptor_ = file->message_type(30);
  static const int cs_0xF010_new_trans_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF010_new_trans_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF010_new_trans_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF010_new_trans_t, step_),
  };
  cs_0xF010_new_trans_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF010_new_trans_t_descriptor_,
      cs_0xF010_new_trans_t::default_instance_,
      cs_0xF010_new_trans_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF010_new_trans_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF010_new_trans_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF010_new_trans_t));
  sc_0xF010_new_trans_t_descriptor_ = file->message_type(31);
  static const int sc_0xF010_new_trans_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF010_new_trans_t, ret_),
  };
  sc_0xF010_new_trans_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF010_new_trans_t_descriptor_,
      sc_0xF010_new_trans_t::default_instance_,
      sc_0xF010_new_trans_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF010_new_trans_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF010_new_trans_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF010_new_trans_t));
  cs_0xF100_custom_t_descriptor_ = file->message_type(32);
  static const int cs_0xF100_custom_t_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF100_custom_t, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF100_custom_t, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF100_custom_t, stid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF100_custom_t, sstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF100_custom_t, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF100_custom_t, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF100_custom_t, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF100_custom_t, value_),
  };
  cs_0xF100_custom_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_0xF100_custom_t_descriptor_,
      cs_0xF100_custom_t::default_instance_,
      cs_0xF100_custom_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF100_custom_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_0xF100_custom_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_0xF100_custom_t));
  sc_0xF100_custom_t_descriptor_ = file->message_type(33);
  static const int sc_0xF100_custom_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF100_custom_t, ret_),
  };
  sc_0xF100_custom_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_0xF100_custom_t_descriptor_,
      sc_0xF100_custom_t::default_instance_,
      sc_0xF100_custom_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF100_custom_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_0xF100_custom_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_0xF100_custom_t));
  zone_type_t_descriptor_ = file->enum_type(0);
  unit_t_descriptor_ = file->enum_type(1);
  currency_t_descriptor_ = file->enum_type(2);
  pay_reason_t_descriptor_ = file->enum_type(3);
  task_type_t_descriptor_ = file->enum_type(4);
  reg_trans_step_t_descriptor_ = file->enum_type(5);
  op_type_t_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_statlogger_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF001_veri_pass_t_descriptor_, &cs_0xF001_veri_pass_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF001_veri_pass_t_descriptor_, &sc_0xF001_veri_pass_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF002_reg_role_t_descriptor_, &cs_0xF002_reg_role_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF002_reg_role_t_descriptor_, &sc_0xF002_reg_role_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF003_login_online_t_descriptor_, &cs_0xF003_login_online_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF003_login_online_t_descriptor_, &sc_0xF003_login_online_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF004_logout_t_descriptor_, &cs_0xF004_logout_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF004_logout_t_descriptor_, &sc_0xF004_logout_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF005_online_count_t_descriptor_, &cs_0xF005_online_count_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF005_online_count_t_descriptor_, &sc_0xF005_online_count_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF006_level_up_t_descriptor_, &cs_0xF006_level_up_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF006_level_up_t_descriptor_, &sc_0xF006_level_up_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF007_pay_t_descriptor_, &cs_0xF007_pay_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF007_pay_t_descriptor_, &sc_0xF007_pay_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF008_free_golds_t_descriptor_, &cs_0xF008_free_golds_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF008_free_golds_t_descriptor_, &sc_0xF008_free_golds_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF009_buy_item_t_descriptor_, &cs_0xF009_buy_item_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF009_buy_item_t_descriptor_, &sc_0xF009_buy_item_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF00A_buy_other_t_descriptor_, &cs_0xF00A_buy_other_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF00A_buy_other_t_descriptor_, &sc_0xF00A_buy_other_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF00B_accept_task_t_descriptor_, &cs_0xF00B_accept_task_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF00B_accept_task_t_descriptor_, &sc_0xF00B_accept_task_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF00C_finish_task_t_descriptor_, &cs_0xF00C_finish_task_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF00C_finish_task_t_descriptor_, &sc_0xF00C_finish_task_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF00D_abort_task_t_descriptor_, &cs_0xF00D_abort_task_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF00D_abort_task_t_descriptor_, &sc_0xF00D_abort_task_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF00E_obtain_spirit_t_descriptor_, &cs_0xF00E_obtain_spirit_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF00E_obtain_spirit_t_descriptor_, &sc_0xF00E_obtain_spirit_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF00F_lose_spirit_t_descriptor_, &cs_0xF00F_lose_spirit_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF00F_lose_spirit_t_descriptor_, &sc_0xF00F_lose_spirit_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF010_new_trans_t_descriptor_, &cs_0xF010_new_trans_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF010_new_trans_t_descriptor_, &sc_0xF010_new_trans_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_0xF100_custom_t_descriptor_, &cs_0xF100_custom_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_0xF100_custom_t_descriptor_, &sc_0xF100_custom_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_statlogger_2eproto() {
  delete cs_0xF001_veri_pass_t::default_instance_;
  delete cs_0xF001_veri_pass_t_reflection_;
  delete sc_0xF001_veri_pass_t::default_instance_;
  delete sc_0xF001_veri_pass_t_reflection_;
  delete cs_0xF002_reg_role_t::default_instance_;
  delete cs_0xF002_reg_role_t_reflection_;
  delete sc_0xF002_reg_role_t::default_instance_;
  delete sc_0xF002_reg_role_t_reflection_;
  delete cs_0xF003_login_online_t::default_instance_;
  delete cs_0xF003_login_online_t_reflection_;
  delete sc_0xF003_login_online_t::default_instance_;
  delete sc_0xF003_login_online_t_reflection_;
  delete cs_0xF004_logout_t::default_instance_;
  delete cs_0xF004_logout_t_reflection_;
  delete sc_0xF004_logout_t::default_instance_;
  delete sc_0xF004_logout_t_reflection_;
  delete cs_0xF005_online_count_t::default_instance_;
  delete cs_0xF005_online_count_t_reflection_;
  delete sc_0xF005_online_count_t::default_instance_;
  delete sc_0xF005_online_count_t_reflection_;
  delete cs_0xF006_level_up_t::default_instance_;
  delete cs_0xF006_level_up_t_reflection_;
  delete sc_0xF006_level_up_t::default_instance_;
  delete sc_0xF006_level_up_t_reflection_;
  delete cs_0xF007_pay_t::default_instance_;
  delete cs_0xF007_pay_t_reflection_;
  delete sc_0xF007_pay_t::default_instance_;
  delete sc_0xF007_pay_t_reflection_;
  delete cs_0xF008_free_golds_t::default_instance_;
  delete cs_0xF008_free_golds_t_reflection_;
  delete sc_0xF008_free_golds_t::default_instance_;
  delete sc_0xF008_free_golds_t_reflection_;
  delete cs_0xF009_buy_item_t::default_instance_;
  delete cs_0xF009_buy_item_t_reflection_;
  delete sc_0xF009_buy_item_t::default_instance_;
  delete sc_0xF009_buy_item_t_reflection_;
  delete cs_0xF00A_buy_other_t::default_instance_;
  delete cs_0xF00A_buy_other_t_reflection_;
  delete sc_0xF00A_buy_other_t::default_instance_;
  delete sc_0xF00A_buy_other_t_reflection_;
  delete cs_0xF00B_accept_task_t::default_instance_;
  delete cs_0xF00B_accept_task_t_reflection_;
  delete sc_0xF00B_accept_task_t::default_instance_;
  delete sc_0xF00B_accept_task_t_reflection_;
  delete cs_0xF00C_finish_task_t::default_instance_;
  delete cs_0xF00C_finish_task_t_reflection_;
  delete sc_0xF00C_finish_task_t::default_instance_;
  delete sc_0xF00C_finish_task_t_reflection_;
  delete cs_0xF00D_abort_task_t::default_instance_;
  delete cs_0xF00D_abort_task_t_reflection_;
  delete sc_0xF00D_abort_task_t::default_instance_;
  delete sc_0xF00D_abort_task_t_reflection_;
  delete cs_0xF00E_obtain_spirit_t::default_instance_;
  delete cs_0xF00E_obtain_spirit_t_reflection_;
  delete sc_0xF00E_obtain_spirit_t::default_instance_;
  delete sc_0xF00E_obtain_spirit_t_reflection_;
  delete cs_0xF00F_lose_spirit_t::default_instance_;
  delete cs_0xF00F_lose_spirit_t_reflection_;
  delete sc_0xF00F_lose_spirit_t::default_instance_;
  delete sc_0xF00F_lose_spirit_t_reflection_;
  delete cs_0xF010_new_trans_t::default_instance_;
  delete cs_0xF010_new_trans_t_reflection_;
  delete sc_0xF010_new_trans_t::default_instance_;
  delete sc_0xF010_new_trans_t_reflection_;
  delete cs_0xF100_custom_t::default_instance_;
  delete cs_0xF100_custom_t_reflection_;
  delete cs_0xF100_custom_t::_default_key_;
  delete sc_0xF100_custom_t::default_instance_;
  delete sc_0xF100_custom_t_reflection_;
}

void protobuf_AddDesc_statlogger_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::statloggercommon::protobuf_AddDesc_statlogger_2ecommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020statlogger.proto\022\nstatlogger\032\027statlogg"
    "er.common.proto\"\357\001\n\025cs_0xF001_veri_pass_"
    "t\022+\n\004game\030\001 \002(\0132\035.statloggercommon.game_"
    "info_t\022(\n\003uid\030\002 \002(\0132\033.statloggercommon.u"
    "ser_id_t\022\021\n\tclient_ip\030\003 \001(\t\022\016\n\006ads_id\030\004 "
    "\001(\t\022\016\n\006browse\030\005 \001(\t\022\016\n\006device\030\006 \001(\t\022\n\n\002o"
    "s\030\007 \001(\t\022\022\n\nresolution\030\010 \001(\t\022\017\n\007network\030\t"
    " \001(\t\022\013\n\003isp\030\n \001(\t\"@\n\025sc_0xF001_veri_pass"
    "_t\022\'\n\003ret\030\001 \002(\0132\032.statloggercommon.retur"
    "n_t\"\374\001\n\024cs_0xF002_reg_role_t\022+\n\004game\030\001 \002"
    "(\0132\035.statloggercommon.game_info_t\022(\n\003uid"
    "\030\002 \002(\0132\033.statloggercommon.user_id_t\022\014\n\004r"
    "ace\030\003 \001(\t\022\021\n\tclient_ip\030\004 \001(\t\022\016\n\006ads_id\030\005"
    " \001(\t\022\016\n\006browse\030\006 \001(\t\022\016\n\006device\030\007 \001(\t\022\n\n\002"
    "os\030\010 \001(\t\022\022\n\nresolution\030\t \001(\t\022\017\n\007network\030"
    "\n \001(\t\022\013\n\003isp\030\013 \001(\t\"\?\n\024sc_0xF002_reg_role"
    "_t\022\'\n\003ret\030\001 \002(\0132\032.statloggercommon.retur"
    "n_t\"\305\002\n\030cs_0xF003_login_online_t\022+\n\004game"
    "\030\001 \002(\0132\035.statloggercommon.game_info_t\022(\n"
    "\003uid\030\002 \002(\0132\033.statloggercommon.user_id_t\022"
    "\014\n\004race\030\003 \001(\t\022\r\n\005isvip\030\004 \001(\010\022\r\n\005level\030\005 "
    "\001(\r\022\021\n\tclient_ip\030\006 \001(\t\022\016\n\006ads_id\030\007 \001(\t\022%"
    "\n\004zone\030\010 \001(\0162\027.statlogger.zone_type_t\022\016\n"
    "\006browse\030\t \001(\t\022\016\n\006device\030\n \001(\t\022\n\n\002os\030\013 \001("
    "\t\022\022\n\nresolution\030\014 \001(\t\022\017\n\007network\030\r \001(\t\022\013"
    "\n\003isp\030\016 \001(\t\"C\n\030sc_0xF003_login_online_t\022"
    "\'\n\003ret\030\001 \002(\0132\032.statloggercommon.return_t"
    "\"\231\001\n\022cs_0xF004_logout_t\022+\n\004game\030\001 \002(\0132\035."
    "statloggercommon.game_info_t\022(\n\003uid\030\002 \002("
    "\0132\033.statloggercommon.user_id_t\022\016\n\006oltime"
    "\030\003 \002(\r\022\r\n\005isvip\030\004 \001(\010\022\r\n\005level\030\005 \001(\r\"=\n\022"
    "sc_0xF004_logout_t\022\'\n\003ret\030\001 \002(\0132\032.statlo"
    "ggercommon.return_t\"\202\001\n\030cs_0xF005_online"
    "_count_t\022+\n\004game\030\001 \002(\0132\035.statloggercommo"
    "n.game_info_t\022\r\n\005olcnt\030\002 \002(\r\022*\n\004zone\030\003 \001"
    "(\0162\027.statlogger.zone_type_t:\003ALL\"C\n\030sc_0"
    "xF005_online_count_t\022\'\n\003ret\030\001 \002(\0132\032.stat"
    "loggercommon.return_t\"\212\001\n\024cs_0xF006_leve"
    "l_up_t\022+\n\004game\030\001 \002(\0132\035.statloggercommon."
    "game_info_t\022(\n\003uid\030\002 \002(\0132\033.statloggercom"
    "mon.user_id_t\022\r\n\005level\030\003 \002(\r\022\014\n\004race\030\004 \001"
    "(\t\"\?\n\024sc_0xF006_level_up_t\022\'\n\003ret\030\001 \002(\0132"
    "\032.statloggercommon.return_t\"\322\002\n\017cs_0xF00"
    "7_pay_t\022+\n\004game\030\001 \002(\0132\035.statloggercommon"
    ".game_info_t\022(\n\003uid\030\002 \002(\0132\033.statloggerco"
    "mmon.user_id_t\022\r\n\005isvip\030\003 \001(\010\022\022\n\npay_amo"
    "unt\030\004 \002(\r\022)\n\010pay_unit\030\005 \002(\0162\022.statlogger"
    ".unit_t:\003FEN\0223\n\rcurrency_type\030\006 \002(\0162\026.st"
    "atlogger.currency_t:\004MIBI\022,\n\npay_reason\030"
    "\007 \002(\0162\030.statlogger.pay_reason_t\022\017\n\007outco"
    "me\030\010 \002(\r\022\021\n\006outcnt\030\t \001(\r:\0011\022\023\n\013pay_chann"
    "el\030\n \002(\r\":\n\017sc_0xF007_pay_t\022\'\n\003ret\030\001 \002(\013"
    "2\032.statloggercommon.return_t\"|\n\026cs_0xF00"
    "8_free_golds_t\022+\n\004game\030\001 \002(\0132\035.statlogge"
    "rcommon.game_info_t\022(\n\003uid\030\002 \002(\0132\033.statl"
    "oggercommon.user_id_t\022\013\n\003amt\030\003 \002(\r\"A\n\026sc"
    "_0xF008_free_golds_t\022\'\n\003ret\030\001 \002(\0132\032.stat"
    "loggercommon.return_t\"\275\001\n\024cs_0xF009_buy_"
    "item_t\022+\n\004game\030\001 \002(\0132\035.statloggercommon."
    "game_info_t\022(\n\003uid\030\002 \002(\0132\033.statloggercom"
    "mon.user_id_t\022\r\n\005isvip\030\003 \001(\010\022\n\n\002lv\030\004 \001(\r"
    "\022\017\n\007pay_amt\030\005 \002(\r\022\017\n\007outcome\030\006 \002(\t\022\021\n\006ou"
    "tcnt\030\007 \001(\r:\0011\"\?\n\024sc_0xF009_buy_item_t\022\'\n"
    "\003ret\030\001 \002(\0132\032.statloggercommon.return_t\"\252"
    "\001\n\025cs_0xF00A_buy_other_t\022+\n\004game\030\001 \002(\0132\035"
    ".statloggercommon.game_info_t\022(\n\003uid\030\002 \002"
    "(\0132\033.statloggercommon.user_id_t\022\r\n\005isvip"
    "\030\003 \001(\010\022\n\n\002lv\030\004 \001(\r\022\017\n\007pay_amt\030\005 \002(\r\022\016\n\006r"
    "eason\030\006 \002(\t\"@\n\025sc_0xF00A_buy_other_t\022\'\n\003"
    "ret\030\001 \002(\0132\032.statloggercommon.return_t\"\261\001"
    "\n\027cs_0xF00B_accept_task_t\022+\n\004game\030\001 \002(\0132"
    "\035.statloggercommon.game_info_t\022(\n\003uid\030\002 "
    "\002(\0132\033.statloggercommon.user_id_t\022\n\n\002lv\030\003"
    " \001(\r\022%\n\004type\030\004 \002(\0162\027.statlogger.task_typ"
    "e_t\022\014\n\004name\030\005 \002(\t\"B\n\027sc_0xF00B_accept_ta"
    "sk_t\022\'\n\003ret\030\001 \002(\0132\032.statloggercommon.ret"
    "urn_t\"\261\001\n\027cs_0xF00C_finish_task_t\022+\n\004gam"
    "e\030\001 \002(\0132\035.statloggercommon.game_info_t\022("
    "\n\003uid\030\002 \002(\0132\033.statloggercommon.user_id_t"
    "\022\n\n\002lv\030\003 \001(\r\022%\n\004type\030\004 \002(\0162\027.statlogger."
    "task_type_t\022\014\n\004name\030\005 \002(\t\"B\n\027sc_0xF00C_f"
    "inish_task_t\022\'\n\003ret\030\001 \002(\0132\032.statloggerco"
    "mmon.return_t\"\260\001\n\026cs_0xF00D_abort_task_t"
    "\022+\n\004game\030\001 \002(\0132\035.statloggercommon.game_i"
    "nfo_t\022(\n\003uid\030\002 \002(\0132\033.statloggercommon.us"
    "er_id_t\022\n\n\002lv\030\003 \001(\r\022%\n\004type\030\004 \002(\0162\027.stat"
    "logger.task_type_t\022\014\n\004name\030\005 \002(\t\"A\n\026sc_0"
    "xF00D_abort_task_t\022\'\n\003ret\030\001 \002(\0132\032.statlo"
    "ggercommon.return_t\"\235\001\n\031cs_0xF00E_obtain"
    "_spirit_t\022+\n\004game\030\001 \002(\0132\035.statloggercomm"
    "on.game_info_t\022(\n\003uid\030\002 \002(\0132\033.statlogger"
    "common.user_id_t\022\n\n\002lv\030\003 \001(\r\022\r\n\005isvip\030\004 "
    "\001(\010\022\016\n\006spirit\030\005 \002(\t\"D\n\031sc_0xF00E_obtain_"
    "spirit_t\022\'\n\003ret\030\001 \002(\0132\032.statloggercommon"
    ".return_t\"\233\001\n\027cs_0xF00F_lose_spirit_t\022+\n"
    "\004game\030\001 \002(\0132\035.statloggercommon.game_info"
    "_t\022(\n\003uid\030\002 \002(\0132\033.statloggercommon.user_"
    "id_t\022\n\n\002lv\030\003 \001(\r\022\r\n\005isvip\030\004 \001(\010\022\016\n\006spiri"
    "t\030\005 \002(\t\"B\n\027sc_0xF00F_lose_spirit_t\022\'\n\003re"
    "t\030\001 \002(\0132\032.statloggercommon.return_t\"\232\001\n\025"
    "cs_0xF010_new_trans_t\022+\n\004game\030\001 \002(\0132\035.st"
    "atloggercommon.game_info_t\022(\n\003uid\030\002 \002(\0132"
    "\033.statloggercommon.user_id_t\022*\n\004step\030\003 \002"
    "(\0162\034.statlogger.reg_trans_step_t\"@\n\025sc_0"
    "xF010_new_trans_t\022\'\n\003ret\030\001 \002(\0132\032.statlog"
    "gercommon.return_t\"\332\001\n\022cs_0xF100_custom_"
    "t\022+\n\004game\030\001 \002(\0132\035.statloggercommon.game_"
    "info_t\022(\n\003uid\030\002 \002(\0132\033.statloggercommon.u"
    "ser_id_t\022\014\n\004stid\030\003 \002(\t\022\r\n\005sstid\030\004 \002(\t\022\014\n"
    "\004item\030\005 \001(\t\022!\n\002op\030\006 \001(\0162\025.statlogger.op_"
    "type_t\022\020\n\003key\030\007 \001(\t:\003key\022\r\n\005value\030\010 \001(\001\""
    "=\n\022sc_0xF100_custom_t\022\'\n\003ret\030\001 \002(\0132\032.sta"
    "tloggercommon.return_t*(\n\013zone_type_t\022\007\n"
    "\003TEL\020\001\022\007\n\003NET\020\002\022\007\n\003ALL\020\003*%\n\006unit_t\022\010\n\004YU"
    "AN\020\001\022\010\n\004JIAO\020\002\022\007\n\003FEN\020\003*\037\n\ncurrency_t\022\010\n"
    "\004MIBI\020\001\022\007\n\003RMB\020\002*(\n\014pay_reason_t\022\013\n\007PAY_"
    "BUY\020\001\022\013\n\007PAY_VIP\020\002*4\n\013task_type_t\022\t\n\005BEG"
    "IN\020\001\022\010\n\004MAIN\020\002\022\007\n\003AUX\020\003\022\007\n\003ETC\020\004*\256\003\n\020reg"
    "_trans_step_t\022\017\n\013fGetRegSucc\020\001\022\020\n\014fLoadR"
    "egSucc\020\002\022\021\n\rfSendLoginReq\020\003\022\020\n\014bGetLogin"
    "Req\020\004\022\021\n\rbSendLoginReq\020\005\022\021\n\rbGetLoginSuc"
    "c\020\006\022\021\n\rfGetLoginSucc\020\007\022\022\n\016fLoadLoginSucc"
    "\020\010\022\022\n\016fClickStartBtn\020\t\022\022\n\016bGetNewroleReq"
    "\020\n\022\024\n\020bSendNewroleSucc\020\013\022\024\n\020fStartSrvlis"
    "tReq\020\014\022\024\n\020bStartGetSrvlist\020\r\022\023\n\017bGetSrvl"
    "istSucc\020\016\022\023\n\017fGetSrvlistSucc\020\017\022\022\n\016fSendO"
    "nlineReq\020\020\022\020\n\014fSend1001Req\020\021\022\023\n\017bSendOnl"
    "ineSucc\020\022\022\017\n\013fOnlineSucc\020\023\022\021\n\rfLoadInfoS"
    "ucc\020\024\022\022\n\016fInterGameSucc\020\025*&\n\top_type_t\022\007"
    "\n\003SUM\020\001\022\007\n\003MAX\020\002\022\007\n\003SET\020\003", 5185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "statlogger.proto", &protobuf_RegisterTypes);
  cs_0xF001_veri_pass_t::default_instance_ = new cs_0xF001_veri_pass_t();
  sc_0xF001_veri_pass_t::default_instance_ = new sc_0xF001_veri_pass_t();
  cs_0xF002_reg_role_t::default_instance_ = new cs_0xF002_reg_role_t();
  sc_0xF002_reg_role_t::default_instance_ = new sc_0xF002_reg_role_t();
  cs_0xF003_login_online_t::default_instance_ = new cs_0xF003_login_online_t();
  sc_0xF003_login_online_t::default_instance_ = new sc_0xF003_login_online_t();
  cs_0xF004_logout_t::default_instance_ = new cs_0xF004_logout_t();
  sc_0xF004_logout_t::default_instance_ = new sc_0xF004_logout_t();
  cs_0xF005_online_count_t::default_instance_ = new cs_0xF005_online_count_t();
  sc_0xF005_online_count_t::default_instance_ = new sc_0xF005_online_count_t();
  cs_0xF006_level_up_t::default_instance_ = new cs_0xF006_level_up_t();
  sc_0xF006_level_up_t::default_instance_ = new sc_0xF006_level_up_t();
  cs_0xF007_pay_t::default_instance_ = new cs_0xF007_pay_t();
  sc_0xF007_pay_t::default_instance_ = new sc_0xF007_pay_t();
  cs_0xF008_free_golds_t::default_instance_ = new cs_0xF008_free_golds_t();
  sc_0xF008_free_golds_t::default_instance_ = new sc_0xF008_free_golds_t();
  cs_0xF009_buy_item_t::default_instance_ = new cs_0xF009_buy_item_t();
  sc_0xF009_buy_item_t::default_instance_ = new sc_0xF009_buy_item_t();
  cs_0xF00A_buy_other_t::default_instance_ = new cs_0xF00A_buy_other_t();
  sc_0xF00A_buy_other_t::default_instance_ = new sc_0xF00A_buy_other_t();
  cs_0xF00B_accept_task_t::default_instance_ = new cs_0xF00B_accept_task_t();
  sc_0xF00B_accept_task_t::default_instance_ = new sc_0xF00B_accept_task_t();
  cs_0xF00C_finish_task_t::default_instance_ = new cs_0xF00C_finish_task_t();
  sc_0xF00C_finish_task_t::default_instance_ = new sc_0xF00C_finish_task_t();
  cs_0xF00D_abort_task_t::default_instance_ = new cs_0xF00D_abort_task_t();
  sc_0xF00D_abort_task_t::default_instance_ = new sc_0xF00D_abort_task_t();
  cs_0xF00E_obtain_spirit_t::default_instance_ = new cs_0xF00E_obtain_spirit_t();
  sc_0xF00E_obtain_spirit_t::default_instance_ = new sc_0xF00E_obtain_spirit_t();
  cs_0xF00F_lose_spirit_t::default_instance_ = new cs_0xF00F_lose_spirit_t();
  sc_0xF00F_lose_spirit_t::default_instance_ = new sc_0xF00F_lose_spirit_t();
  cs_0xF010_new_trans_t::default_instance_ = new cs_0xF010_new_trans_t();
  sc_0xF010_new_trans_t::default_instance_ = new sc_0xF010_new_trans_t();
  cs_0xF100_custom_t::_default_key_ =
      new ::std::string("key", 3);
  cs_0xF100_custom_t::default_instance_ = new cs_0xF100_custom_t();
  sc_0xF100_custom_t::default_instance_ = new sc_0xF100_custom_t();
  cs_0xF001_veri_pass_t::default_instance_->InitAsDefaultInstance();
  sc_0xF001_veri_pass_t::default_instance_->InitAsDefaultInstance();
  cs_0xF002_reg_role_t::default_instance_->InitAsDefaultInstance();
  sc_0xF002_reg_role_t::default_instance_->InitAsDefaultInstance();
  cs_0xF003_login_online_t::default_instance_->InitAsDefaultInstance();
  sc_0xF003_login_online_t::default_instance_->InitAsDefaultInstance();
  cs_0xF004_logout_t::default_instance_->InitAsDefaultInstance();
  sc_0xF004_logout_t::default_instance_->InitAsDefaultInstance();
  cs_0xF005_online_count_t::default_instance_->InitAsDefaultInstance();
  sc_0xF005_online_count_t::default_instance_->InitAsDefaultInstance();
  cs_0xF006_level_up_t::default_instance_->InitAsDefaultInstance();
  sc_0xF006_level_up_t::default_instance_->InitAsDefaultInstance();
  cs_0xF007_pay_t::default_instance_->InitAsDefaultInstance();
  sc_0xF007_pay_t::default_instance_->InitAsDefaultInstance();
  cs_0xF008_free_golds_t::default_instance_->InitAsDefaultInstance();
  sc_0xF008_free_golds_t::default_instance_->InitAsDefaultInstance();
  cs_0xF009_buy_item_t::default_instance_->InitAsDefaultInstance();
  sc_0xF009_buy_item_t::default_instance_->InitAsDefaultInstance();
  cs_0xF00A_buy_other_t::default_instance_->InitAsDefaultInstance();
  sc_0xF00A_buy_other_t::default_instance_->InitAsDefaultInstance();
  cs_0xF00B_accept_task_t::default_instance_->InitAsDefaultInstance();
  sc_0xF00B_accept_task_t::default_instance_->InitAsDefaultInstance();
  cs_0xF00C_finish_task_t::default_instance_->InitAsDefaultInstance();
  sc_0xF00C_finish_task_t::default_instance_->InitAsDefaultInstance();
  cs_0xF00D_abort_task_t::default_instance_->InitAsDefaultInstance();
  sc_0xF00D_abort_task_t::default_instance_->InitAsDefaultInstance();
  cs_0xF00E_obtain_spirit_t::default_instance_->InitAsDefaultInstance();
  sc_0xF00E_obtain_spirit_t::default_instance_->InitAsDefaultInstance();
  cs_0xF00F_lose_spirit_t::default_instance_->InitAsDefaultInstance();
  sc_0xF00F_lose_spirit_t::default_instance_->InitAsDefaultInstance();
  cs_0xF010_new_trans_t::default_instance_->InitAsDefaultInstance();
  sc_0xF010_new_trans_t::default_instance_->InitAsDefaultInstance();
  cs_0xF100_custom_t::default_instance_->InitAsDefaultInstance();
  sc_0xF100_custom_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_statlogger_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_statlogger_2eproto {
  StaticDescriptorInitializer_statlogger_2eproto() {
    protobuf_AddDesc_statlogger_2eproto();
  }
} static_descriptor_initializer_statlogger_2eproto_;
const ::google::protobuf::EnumDescriptor* zone_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zone_type_t_descriptor_;
}
bool zone_type_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* unit_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_t_descriptor_;
}
bool unit_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* currency_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return currency_t_descriptor_;
}
bool currency_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* pay_reason_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pay_reason_t_descriptor_;
}
bool pay_reason_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* task_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_type_t_descriptor_;
}
bool task_type_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* reg_trans_step_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reg_trans_step_t_descriptor_;
}
bool reg_trans_step_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* op_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return op_type_t_descriptor_;
}
bool op_type_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF001_veri_pass_t::kGameFieldNumber;
const int cs_0xF001_veri_pass_t::kUidFieldNumber;
const int cs_0xF001_veri_pass_t::kClientIpFieldNumber;
const int cs_0xF001_veri_pass_t::kAdsIdFieldNumber;
const int cs_0xF001_veri_pass_t::kBrowseFieldNumber;
const int cs_0xF001_veri_pass_t::kDeviceFieldNumber;
const int cs_0xF001_veri_pass_t::kOsFieldNumber;
const int cs_0xF001_veri_pass_t::kResolutionFieldNumber;
const int cs_0xF001_veri_pass_t::kNetworkFieldNumber;
const int cs_0xF001_veri_pass_t::kIspFieldNumber;
#endif  // !_MSC_VER

cs_0xF001_veri_pass_t::cs_0xF001_veri_pass_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF001_veri_pass_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF001_veri_pass_t::cs_0xF001_veri_pass_t(const cs_0xF001_veri_pass_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF001_veri_pass_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ads_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  browse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resolution_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF001_veri_pass_t::~cs_0xF001_veri_pass_t() {
  SharedDtor();
}

void cs_0xF001_veri_pass_t::SharedDtor() {
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (ads_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ads_id_;
  }
  if (browse_ != &::google::protobuf::internal::kEmptyString) {
    delete browse_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (resolution_ != &::google::protobuf::internal::kEmptyString) {
    delete resolution_;
  }
  if (network_ != &::google::protobuf::internal::kEmptyString) {
    delete network_;
  }
  if (isp_ != &::google::protobuf::internal::kEmptyString) {
    delete isp_;
  }
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF001_veri_pass_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF001_veri_pass_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF001_veri_pass_t_descriptor_;
}

const cs_0xF001_veri_pass_t& cs_0xF001_veri_pass_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF001_veri_pass_t* cs_0xF001_veri_pass_t::default_instance_ = NULL;

cs_0xF001_veri_pass_t* cs_0xF001_veri_pass_t::New() const {
  return new cs_0xF001_veri_pass_t;
}

void cs_0xF001_veri_pass_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
        client_ip_->clear();
      }
    }
    if (has_ads_id()) {
      if (ads_id_ != &::google::protobuf::internal::kEmptyString) {
        ads_id_->clear();
      }
    }
    if (has_browse()) {
      if (browse_ != &::google::protobuf::internal::kEmptyString) {
        browse_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    if (has_resolution()) {
      if (resolution_ != &::google::protobuf::internal::kEmptyString) {
        resolution_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_network()) {
      if (network_ != &::google::protobuf::internal::kEmptyString) {
        network_->clear();
      }
    }
    if (has_isp()) {
      if (isp_ != &::google::protobuf::internal::kEmptyString) {
        isp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF001_veri_pass_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_client_ip;
        break;
      }

      // optional string client_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ads_id;
        break;
      }

      // optional string ads_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ads_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ads_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ads_id().data(), this->ads_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_browse;
        break;
      }

      // optional string browse = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_browse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_browse()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->browse().data(), this->browse().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_device;
        break;
      }

      // optional string device = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_os;
        break;
      }

      // optional string os = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_resolution;
        break;
      }

      // optional string resolution = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resolution()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resolution().data(), this->resolution().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_network;
        break;
      }

      // optional string network = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_isp;
        break;
      }

      // optional string isp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isp().data(), this->isp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF001_veri_pass_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // optional string client_ip = 3;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->client_ip(), output);
  }

  // optional string ads_id = 4;
  if (has_ads_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ads_id().data(), this->ads_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ads_id(), output);
  }

  // optional string browse = 5;
  if (has_browse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->browse().data(), this->browse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->browse(), output);
  }

  // optional string device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->device(), output);
  }

  // optional string os = 7;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->os(), output);
  }

  // optional string resolution = 8;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resolution().data(), this->resolution().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->resolution(), output);
  }

  // optional string network = 9;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->network(), output);
  }

  // optional string isp = 10;
  if (has_isp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isp().data(), this->isp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->isp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF001_veri_pass_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // optional string client_ip = 3;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_ip(), target);
  }

  // optional string ads_id = 4;
  if (has_ads_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ads_id().data(), this->ads_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ads_id(), target);
  }

  // optional string browse = 5;
  if (has_browse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->browse().data(), this->browse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->browse(), target);
  }

  // optional string device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device(), target);
  }

  // optional string os = 7;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->os(), target);
  }

  // optional string resolution = 8;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resolution().data(), this->resolution().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->resolution(), target);
  }

  // optional string network = 9;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->network(), target);
  }

  // optional string isp = 10;
  if (has_isp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isp().data(), this->isp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->isp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF001_veri_pass_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // optional string client_ip = 3;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }

    // optional string ads_id = 4;
    if (has_ads_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ads_id());
    }

    // optional string browse = 5;
    if (has_browse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->browse());
    }

    // optional string device = 6;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional string os = 7;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string resolution = 8;
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resolution());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string network = 9;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
    }

    // optional string isp = 10;
    if (has_isp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF001_veri_pass_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF001_veri_pass_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF001_veri_pass_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF001_veri_pass_t::MergeFrom(const cs_0xF001_veri_pass_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
    if (from.has_ads_id()) {
      set_ads_id(from.ads_id());
    }
    if (from.has_browse()) {
      set_browse(from.browse());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_isp()) {
      set_isp(from.isp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF001_veri_pass_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF001_veri_pass_t::CopyFrom(const cs_0xF001_veri_pass_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF001_veri_pass_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF001_veri_pass_t::Swap(cs_0xF001_veri_pass_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(ads_id_, other->ads_id_);
    std::swap(browse_, other->browse_);
    std::swap(device_, other->device_);
    std::swap(os_, other->os_);
    std::swap(resolution_, other->resolution_);
    std::swap(network_, other->network_);
    std::swap(isp_, other->isp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF001_veri_pass_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF001_veri_pass_t_descriptor_;
  metadata.reflection = cs_0xF001_veri_pass_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF001_veri_pass_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF001_veri_pass_t::sc_0xF001_veri_pass_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF001_veri_pass_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF001_veri_pass_t::sc_0xF001_veri_pass_t(const sc_0xF001_veri_pass_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF001_veri_pass_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF001_veri_pass_t::~sc_0xF001_veri_pass_t() {
  SharedDtor();
}

void sc_0xF001_veri_pass_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF001_veri_pass_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF001_veri_pass_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF001_veri_pass_t_descriptor_;
}

const sc_0xF001_veri_pass_t& sc_0xF001_veri_pass_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF001_veri_pass_t* sc_0xF001_veri_pass_t::default_instance_ = NULL;

sc_0xF001_veri_pass_t* sc_0xF001_veri_pass_t::New() const {
  return new sc_0xF001_veri_pass_t;
}

void sc_0xF001_veri_pass_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF001_veri_pass_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF001_veri_pass_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF001_veri_pass_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF001_veri_pass_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF001_veri_pass_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF001_veri_pass_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF001_veri_pass_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF001_veri_pass_t::MergeFrom(const sc_0xF001_veri_pass_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF001_veri_pass_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF001_veri_pass_t::CopyFrom(const sc_0xF001_veri_pass_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF001_veri_pass_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF001_veri_pass_t::Swap(sc_0xF001_veri_pass_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF001_veri_pass_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF001_veri_pass_t_descriptor_;
  metadata.reflection = sc_0xF001_veri_pass_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF002_reg_role_t::kGameFieldNumber;
const int cs_0xF002_reg_role_t::kUidFieldNumber;
const int cs_0xF002_reg_role_t::kRaceFieldNumber;
const int cs_0xF002_reg_role_t::kClientIpFieldNumber;
const int cs_0xF002_reg_role_t::kAdsIdFieldNumber;
const int cs_0xF002_reg_role_t::kBrowseFieldNumber;
const int cs_0xF002_reg_role_t::kDeviceFieldNumber;
const int cs_0xF002_reg_role_t::kOsFieldNumber;
const int cs_0xF002_reg_role_t::kResolutionFieldNumber;
const int cs_0xF002_reg_role_t::kNetworkFieldNumber;
const int cs_0xF002_reg_role_t::kIspFieldNumber;
#endif  // !_MSC_VER

cs_0xF002_reg_role_t::cs_0xF002_reg_role_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF002_reg_role_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF002_reg_role_t::cs_0xF002_reg_role_t(const cs_0xF002_reg_role_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF002_reg_role_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ads_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  browse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resolution_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF002_reg_role_t::~cs_0xF002_reg_role_t() {
  SharedDtor();
}

void cs_0xF002_reg_role_t::SharedDtor() {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    delete race_;
  }
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (ads_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ads_id_;
  }
  if (browse_ != &::google::protobuf::internal::kEmptyString) {
    delete browse_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (resolution_ != &::google::protobuf::internal::kEmptyString) {
    delete resolution_;
  }
  if (network_ != &::google::protobuf::internal::kEmptyString) {
    delete network_;
  }
  if (isp_ != &::google::protobuf::internal::kEmptyString) {
    delete isp_;
  }
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF002_reg_role_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF002_reg_role_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF002_reg_role_t_descriptor_;
}

const cs_0xF002_reg_role_t& cs_0xF002_reg_role_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF002_reg_role_t* cs_0xF002_reg_role_t::default_instance_ = NULL;

cs_0xF002_reg_role_t* cs_0xF002_reg_role_t::New() const {
  return new cs_0xF002_reg_role_t;
}

void cs_0xF002_reg_role_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    if (has_race()) {
      if (race_ != &::google::protobuf::internal::kEmptyString) {
        race_->clear();
      }
    }
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
        client_ip_->clear();
      }
    }
    if (has_ads_id()) {
      if (ads_id_ != &::google::protobuf::internal::kEmptyString) {
        ads_id_->clear();
      }
    }
    if (has_browse()) {
      if (browse_ != &::google::protobuf::internal::kEmptyString) {
        browse_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_resolution()) {
      if (resolution_ != &::google::protobuf::internal::kEmptyString) {
        resolution_->clear();
      }
    }
    if (has_network()) {
      if (network_ != &::google::protobuf::internal::kEmptyString) {
        network_->clear();
      }
    }
    if (has_isp()) {
      if (isp_ != &::google::protobuf::internal::kEmptyString) {
        isp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF002_reg_role_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_race;
        break;
      }

      // optional string race = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_race:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_race()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->race().data(), this->race().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_client_ip;
        break;
      }

      // optional string client_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ads_id;
        break;
      }

      // optional string ads_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ads_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ads_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ads_id().data(), this->ads_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_browse;
        break;
      }

      // optional string browse = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_browse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_browse()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->browse().data(), this->browse().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_device;
        break;
      }

      // optional string device = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_os;
        break;
      }

      // optional string os = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_resolution;
        break;
      }

      // optional string resolution = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resolution()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resolution().data(), this->resolution().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_network;
        break;
      }

      // optional string network = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_isp;
        break;
      }

      // optional string isp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isp().data(), this->isp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF002_reg_role_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // optional string race = 3;
  if (has_race()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->race().data(), this->race().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->race(), output);
  }

  // optional string client_ip = 4;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->client_ip(), output);
  }

  // optional string ads_id = 5;
  if (has_ads_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ads_id().data(), this->ads_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ads_id(), output);
  }

  // optional string browse = 6;
  if (has_browse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->browse().data(), this->browse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->browse(), output);
  }

  // optional string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->device(), output);
  }

  // optional string os = 8;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->os(), output);
  }

  // optional string resolution = 9;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resolution().data(), this->resolution().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->resolution(), output);
  }

  // optional string network = 10;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->network(), output);
  }

  // optional string isp = 11;
  if (has_isp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isp().data(), this->isp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->isp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF002_reg_role_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // optional string race = 3;
  if (has_race()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->race().data(), this->race().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->race(), target);
  }

  // optional string client_ip = 4;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_ip(), target);
  }

  // optional string ads_id = 5;
  if (has_ads_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ads_id().data(), this->ads_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ads_id(), target);
  }

  // optional string browse = 6;
  if (has_browse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->browse().data(), this->browse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->browse(), target);
  }

  // optional string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->device(), target);
  }

  // optional string os = 8;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->os(), target);
  }

  // optional string resolution = 9;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resolution().data(), this->resolution().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->resolution(), target);
  }

  // optional string network = 10;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->network(), target);
  }

  // optional string isp = 11;
  if (has_isp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isp().data(), this->isp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->isp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF002_reg_role_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // optional string race = 3;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->race());
    }

    // optional string client_ip = 4;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }

    // optional string ads_id = 5;
    if (has_ads_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ads_id());
    }

    // optional string browse = 6;
    if (has_browse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->browse());
    }

    // optional string device = 7;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional string os = 8;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string resolution = 9;
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resolution());
    }

    // optional string network = 10;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
    }

    // optional string isp = 11;
    if (has_isp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF002_reg_role_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF002_reg_role_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF002_reg_role_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF002_reg_role_t::MergeFrom(const cs_0xF002_reg_role_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
    if (from.has_ads_id()) {
      set_ads_id(from.ads_id());
    }
    if (from.has_browse()) {
      set_browse(from.browse());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_isp()) {
      set_isp(from.isp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF002_reg_role_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF002_reg_role_t::CopyFrom(const cs_0xF002_reg_role_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF002_reg_role_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF002_reg_role_t::Swap(cs_0xF002_reg_role_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(race_, other->race_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(ads_id_, other->ads_id_);
    std::swap(browse_, other->browse_);
    std::swap(device_, other->device_);
    std::swap(os_, other->os_);
    std::swap(resolution_, other->resolution_);
    std::swap(network_, other->network_);
    std::swap(isp_, other->isp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF002_reg_role_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF002_reg_role_t_descriptor_;
  metadata.reflection = cs_0xF002_reg_role_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF002_reg_role_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF002_reg_role_t::sc_0xF002_reg_role_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF002_reg_role_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF002_reg_role_t::sc_0xF002_reg_role_t(const sc_0xF002_reg_role_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF002_reg_role_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF002_reg_role_t::~sc_0xF002_reg_role_t() {
  SharedDtor();
}

void sc_0xF002_reg_role_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF002_reg_role_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF002_reg_role_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF002_reg_role_t_descriptor_;
}

const sc_0xF002_reg_role_t& sc_0xF002_reg_role_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF002_reg_role_t* sc_0xF002_reg_role_t::default_instance_ = NULL;

sc_0xF002_reg_role_t* sc_0xF002_reg_role_t::New() const {
  return new sc_0xF002_reg_role_t;
}

void sc_0xF002_reg_role_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF002_reg_role_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF002_reg_role_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF002_reg_role_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF002_reg_role_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF002_reg_role_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF002_reg_role_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF002_reg_role_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF002_reg_role_t::MergeFrom(const sc_0xF002_reg_role_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF002_reg_role_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF002_reg_role_t::CopyFrom(const sc_0xF002_reg_role_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF002_reg_role_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF002_reg_role_t::Swap(sc_0xF002_reg_role_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF002_reg_role_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF002_reg_role_t_descriptor_;
  metadata.reflection = sc_0xF002_reg_role_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF003_login_online_t::kGameFieldNumber;
const int cs_0xF003_login_online_t::kUidFieldNumber;
const int cs_0xF003_login_online_t::kRaceFieldNumber;
const int cs_0xF003_login_online_t::kIsvipFieldNumber;
const int cs_0xF003_login_online_t::kLevelFieldNumber;
const int cs_0xF003_login_online_t::kClientIpFieldNumber;
const int cs_0xF003_login_online_t::kAdsIdFieldNumber;
const int cs_0xF003_login_online_t::kZoneFieldNumber;
const int cs_0xF003_login_online_t::kBrowseFieldNumber;
const int cs_0xF003_login_online_t::kDeviceFieldNumber;
const int cs_0xF003_login_online_t::kOsFieldNumber;
const int cs_0xF003_login_online_t::kResolutionFieldNumber;
const int cs_0xF003_login_online_t::kNetworkFieldNumber;
const int cs_0xF003_login_online_t::kIspFieldNumber;
#endif  // !_MSC_VER

cs_0xF003_login_online_t::cs_0xF003_login_online_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF003_login_online_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF003_login_online_t::cs_0xF003_login_online_t(const cs_0xF003_login_online_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF003_login_online_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isvip_ = false;
  level_ = 0u;
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ads_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zone_ = 1;
  browse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resolution_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF003_login_online_t::~cs_0xF003_login_online_t() {
  SharedDtor();
}

void cs_0xF003_login_online_t::SharedDtor() {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    delete race_;
  }
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (ads_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ads_id_;
  }
  if (browse_ != &::google::protobuf::internal::kEmptyString) {
    delete browse_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (resolution_ != &::google::protobuf::internal::kEmptyString) {
    delete resolution_;
  }
  if (network_ != &::google::protobuf::internal::kEmptyString) {
    delete network_;
  }
  if (isp_ != &::google::protobuf::internal::kEmptyString) {
    delete isp_;
  }
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF003_login_online_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF003_login_online_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF003_login_online_t_descriptor_;
}

const cs_0xF003_login_online_t& cs_0xF003_login_online_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF003_login_online_t* cs_0xF003_login_online_t::default_instance_ = NULL;

cs_0xF003_login_online_t* cs_0xF003_login_online_t::New() const {
  return new cs_0xF003_login_online_t;
}

void cs_0xF003_login_online_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    if (has_race()) {
      if (race_ != &::google::protobuf::internal::kEmptyString) {
        race_->clear();
      }
    }
    isvip_ = false;
    level_ = 0u;
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
        client_ip_->clear();
      }
    }
    if (has_ads_id()) {
      if (ads_id_ != &::google::protobuf::internal::kEmptyString) {
        ads_id_->clear();
      }
    }
    zone_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_browse()) {
      if (browse_ != &::google::protobuf::internal::kEmptyString) {
        browse_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    if (has_resolution()) {
      if (resolution_ != &::google::protobuf::internal::kEmptyString) {
        resolution_->clear();
      }
    }
    if (has_network()) {
      if (network_ != &::google::protobuf::internal::kEmptyString) {
        network_->clear();
      }
    }
    if (has_isp()) {
      if (isp_ != &::google::protobuf::internal::kEmptyString) {
        isp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF003_login_online_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_race;
        break;
      }

      // optional string race = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_race:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_race()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->race().data(), this->race().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isvip;
        break;
      }

      // optional bool isvip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvip_)));
          set_has_isvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_client_ip;
        break;
      }

      // optional string client_ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ads_id;
        break;
      }

      // optional string ads_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ads_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ads_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ads_id().data(), this->ads_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_zone;
        break;
      }

      // optional .statlogger.zone_type_t zone = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::statlogger::zone_type_t_IsValid(value)) {
            set_zone(static_cast< ::statlogger::zone_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_browse;
        break;
      }

      // optional string browse = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_browse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_browse()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->browse().data(), this->browse().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_device;
        break;
      }

      // optional string device = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_os;
        break;
      }

      // optional string os = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_resolution;
        break;
      }

      // optional string resolution = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resolution()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resolution().data(), this->resolution().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_network;
        break;
      }

      // optional string network = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_isp;
        break;
      }

      // optional string isp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isp().data(), this->isp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF003_login_online_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // optional string race = 3;
  if (has_race()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->race().data(), this->race().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->race(), output);
  }

  // optional bool isvip = 4;
  if (has_isvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isvip(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional string client_ip = 6;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->client_ip(), output);
  }

  // optional string ads_id = 7;
  if (has_ads_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ads_id().data(), this->ads_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ads_id(), output);
  }

  // optional .statlogger.zone_type_t zone = 8;
  if (has_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->zone(), output);
  }

  // optional string browse = 9;
  if (has_browse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->browse().data(), this->browse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->browse(), output);
  }

  // optional string device = 10;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->device(), output);
  }

  // optional string os = 11;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->os(), output);
  }

  // optional string resolution = 12;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resolution().data(), this->resolution().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->resolution(), output);
  }

  // optional string network = 13;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->network(), output);
  }

  // optional string isp = 14;
  if (has_isp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isp().data(), this->isp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->isp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF003_login_online_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // optional string race = 3;
  if (has_race()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->race().data(), this->race().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->race(), target);
  }

  // optional bool isvip = 4;
  if (has_isvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isvip(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional string client_ip = 6;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->client_ip(), target);
  }

  // optional string ads_id = 7;
  if (has_ads_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ads_id().data(), this->ads_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ads_id(), target);
  }

  // optional .statlogger.zone_type_t zone = 8;
  if (has_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->zone(), target);
  }

  // optional string browse = 9;
  if (has_browse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->browse().data(), this->browse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->browse(), target);
  }

  // optional string device = 10;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->device(), target);
  }

  // optional string os = 11;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->os(), target);
  }

  // optional string resolution = 12;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resolution().data(), this->resolution().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->resolution(), target);
  }

  // optional string network = 13;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->network(), target);
  }

  // optional string isp = 14;
  if (has_isp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isp().data(), this->isp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->isp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF003_login_online_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // optional string race = 3;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->race());
    }

    // optional bool isvip = 4;
    if (has_isvip()) {
      total_size += 1 + 1;
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional string client_ip = 6;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }

    // optional string ads_id = 7;
    if (has_ads_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ads_id());
    }

    // optional .statlogger.zone_type_t zone = 8;
    if (has_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->zone());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string browse = 9;
    if (has_browse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->browse());
    }

    // optional string device = 10;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional string os = 11;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string resolution = 12;
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resolution());
    }

    // optional string network = 13;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
    }

    // optional string isp = 14;
    if (has_isp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF003_login_online_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF003_login_online_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF003_login_online_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF003_login_online_t::MergeFrom(const cs_0xF003_login_online_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_isvip()) {
      set_isvip(from.isvip());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
    if (from.has_ads_id()) {
      set_ads_id(from.ads_id());
    }
    if (from.has_zone()) {
      set_zone(from.zone());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_browse()) {
      set_browse(from.browse());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_isp()) {
      set_isp(from.isp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF003_login_online_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF003_login_online_t::CopyFrom(const cs_0xF003_login_online_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF003_login_online_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF003_login_online_t::Swap(cs_0xF003_login_online_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(race_, other->race_);
    std::swap(isvip_, other->isvip_);
    std::swap(level_, other->level_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(ads_id_, other->ads_id_);
    std::swap(zone_, other->zone_);
    std::swap(browse_, other->browse_);
    std::swap(device_, other->device_);
    std::swap(os_, other->os_);
    std::swap(resolution_, other->resolution_);
    std::swap(network_, other->network_);
    std::swap(isp_, other->isp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF003_login_online_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF003_login_online_t_descriptor_;
  metadata.reflection = cs_0xF003_login_online_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF003_login_online_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF003_login_online_t::sc_0xF003_login_online_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF003_login_online_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF003_login_online_t::sc_0xF003_login_online_t(const sc_0xF003_login_online_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF003_login_online_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF003_login_online_t::~sc_0xF003_login_online_t() {
  SharedDtor();
}

void sc_0xF003_login_online_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF003_login_online_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF003_login_online_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF003_login_online_t_descriptor_;
}

const sc_0xF003_login_online_t& sc_0xF003_login_online_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF003_login_online_t* sc_0xF003_login_online_t::default_instance_ = NULL;

sc_0xF003_login_online_t* sc_0xF003_login_online_t::New() const {
  return new sc_0xF003_login_online_t;
}

void sc_0xF003_login_online_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF003_login_online_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF003_login_online_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF003_login_online_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF003_login_online_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF003_login_online_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF003_login_online_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF003_login_online_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF003_login_online_t::MergeFrom(const sc_0xF003_login_online_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF003_login_online_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF003_login_online_t::CopyFrom(const sc_0xF003_login_online_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF003_login_online_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF003_login_online_t::Swap(sc_0xF003_login_online_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF003_login_online_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF003_login_online_t_descriptor_;
  metadata.reflection = sc_0xF003_login_online_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF004_logout_t::kGameFieldNumber;
const int cs_0xF004_logout_t::kUidFieldNumber;
const int cs_0xF004_logout_t::kOltimeFieldNumber;
const int cs_0xF004_logout_t::kIsvipFieldNumber;
const int cs_0xF004_logout_t::kLevelFieldNumber;
#endif  // !_MSC_VER

cs_0xF004_logout_t::cs_0xF004_logout_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF004_logout_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF004_logout_t::cs_0xF004_logout_t(const cs_0xF004_logout_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF004_logout_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  oltime_ = 0u;
  isvip_ = false;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF004_logout_t::~cs_0xF004_logout_t() {
  SharedDtor();
}

void cs_0xF004_logout_t::SharedDtor() {
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF004_logout_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF004_logout_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF004_logout_t_descriptor_;
}

const cs_0xF004_logout_t& cs_0xF004_logout_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF004_logout_t* cs_0xF004_logout_t::default_instance_ = NULL;

cs_0xF004_logout_t* cs_0xF004_logout_t::New() const {
  return new cs_0xF004_logout_t;
}

void cs_0xF004_logout_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    oltime_ = 0u;
    isvip_ = false;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF004_logout_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oltime;
        break;
      }

      // required uint32 oltime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oltime_)));
          set_has_oltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isvip;
        break;
      }

      // optional bool isvip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvip_)));
          set_has_isvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF004_logout_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // required uint32 oltime = 3;
  if (has_oltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oltime(), output);
  }

  // optional bool isvip = 4;
  if (has_isvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isvip(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF004_logout_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // required uint32 oltime = 3;
  if (has_oltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oltime(), target);
  }

  // optional bool isvip = 4;
  if (has_isvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isvip(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF004_logout_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // required uint32 oltime = 3;
    if (has_oltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oltime());
    }

    // optional bool isvip = 4;
    if (has_isvip()) {
      total_size += 1 + 1;
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF004_logout_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF004_logout_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF004_logout_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF004_logout_t::MergeFrom(const cs_0xF004_logout_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_oltime()) {
      set_oltime(from.oltime());
    }
    if (from.has_isvip()) {
      set_isvip(from.isvip());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF004_logout_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF004_logout_t::CopyFrom(const cs_0xF004_logout_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF004_logout_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF004_logout_t::Swap(cs_0xF004_logout_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(oltime_, other->oltime_);
    std::swap(isvip_, other->isvip_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF004_logout_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF004_logout_t_descriptor_;
  metadata.reflection = cs_0xF004_logout_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF004_logout_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF004_logout_t::sc_0xF004_logout_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF004_logout_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF004_logout_t::sc_0xF004_logout_t(const sc_0xF004_logout_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF004_logout_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF004_logout_t::~sc_0xF004_logout_t() {
  SharedDtor();
}

void sc_0xF004_logout_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF004_logout_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF004_logout_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF004_logout_t_descriptor_;
}

const sc_0xF004_logout_t& sc_0xF004_logout_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF004_logout_t* sc_0xF004_logout_t::default_instance_ = NULL;

sc_0xF004_logout_t* sc_0xF004_logout_t::New() const {
  return new sc_0xF004_logout_t;
}

void sc_0xF004_logout_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF004_logout_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF004_logout_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF004_logout_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF004_logout_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF004_logout_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF004_logout_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF004_logout_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF004_logout_t::MergeFrom(const sc_0xF004_logout_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF004_logout_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF004_logout_t::CopyFrom(const sc_0xF004_logout_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF004_logout_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF004_logout_t::Swap(sc_0xF004_logout_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF004_logout_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF004_logout_t_descriptor_;
  metadata.reflection = sc_0xF004_logout_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF005_online_count_t::kGameFieldNumber;
const int cs_0xF005_online_count_t::kOlcntFieldNumber;
const int cs_0xF005_online_count_t::kZoneFieldNumber;
#endif  // !_MSC_VER

cs_0xF005_online_count_t::cs_0xF005_online_count_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF005_online_count_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
}

cs_0xF005_online_count_t::cs_0xF005_online_count_t(const cs_0xF005_online_count_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF005_online_count_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  olcnt_ = 0u;
  zone_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF005_online_count_t::~cs_0xF005_online_count_t() {
  SharedDtor();
}

void cs_0xF005_online_count_t::SharedDtor() {
  if (this != default_instance_) {
    delete game_;
  }
}

void cs_0xF005_online_count_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF005_online_count_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF005_online_count_t_descriptor_;
}

const cs_0xF005_online_count_t& cs_0xF005_online_count_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF005_online_count_t* cs_0xF005_online_count_t::default_instance_ = NULL;

cs_0xF005_online_count_t* cs_0xF005_online_count_t::New() const {
  return new cs_0xF005_online_count_t;
}

void cs_0xF005_online_count_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    olcnt_ = 0u;
    zone_ = 3;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF005_online_count_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_olcnt;
        break;
      }

      // required uint32 olcnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_olcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &olcnt_)));
          set_has_olcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone;
        break;
      }

      // optional .statlogger.zone_type_t zone = 3 [default = ALL];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::statlogger::zone_type_t_IsValid(value)) {
            set_zone(static_cast< ::statlogger::zone_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF005_online_count_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required uint32 olcnt = 2;
  if (has_olcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->olcnt(), output);
  }

  // optional .statlogger.zone_type_t zone = 3 [default = ALL];
  if (has_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->zone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF005_online_count_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required uint32 olcnt = 2;
  if (has_olcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->olcnt(), target);
  }

  // optional .statlogger.zone_type_t zone = 3 [default = ALL];
  if (has_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->zone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF005_online_count_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required uint32 olcnt = 2;
    if (has_olcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->olcnt());
    }

    // optional .statlogger.zone_type_t zone = 3 [default = ALL];
    if (has_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->zone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF005_online_count_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF005_online_count_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF005_online_count_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF005_online_count_t::MergeFrom(const cs_0xF005_online_count_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_olcnt()) {
      set_olcnt(from.olcnt());
    }
    if (from.has_zone()) {
      set_zone(from.zone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF005_online_count_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF005_online_count_t::CopyFrom(const cs_0xF005_online_count_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF005_online_count_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF005_online_count_t::Swap(cs_0xF005_online_count_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(olcnt_, other->olcnt_);
    std::swap(zone_, other->zone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF005_online_count_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF005_online_count_t_descriptor_;
  metadata.reflection = cs_0xF005_online_count_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF005_online_count_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF005_online_count_t::sc_0xF005_online_count_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF005_online_count_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF005_online_count_t::sc_0xF005_online_count_t(const sc_0xF005_online_count_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF005_online_count_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF005_online_count_t::~sc_0xF005_online_count_t() {
  SharedDtor();
}

void sc_0xF005_online_count_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF005_online_count_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF005_online_count_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF005_online_count_t_descriptor_;
}

const sc_0xF005_online_count_t& sc_0xF005_online_count_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF005_online_count_t* sc_0xF005_online_count_t::default_instance_ = NULL;

sc_0xF005_online_count_t* sc_0xF005_online_count_t::New() const {
  return new sc_0xF005_online_count_t;
}

void sc_0xF005_online_count_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF005_online_count_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF005_online_count_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF005_online_count_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF005_online_count_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF005_online_count_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF005_online_count_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF005_online_count_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF005_online_count_t::MergeFrom(const sc_0xF005_online_count_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF005_online_count_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF005_online_count_t::CopyFrom(const sc_0xF005_online_count_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF005_online_count_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF005_online_count_t::Swap(sc_0xF005_online_count_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF005_online_count_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF005_online_count_t_descriptor_;
  metadata.reflection = sc_0xF005_online_count_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF006_level_up_t::kGameFieldNumber;
const int cs_0xF006_level_up_t::kUidFieldNumber;
const int cs_0xF006_level_up_t::kLevelFieldNumber;
const int cs_0xF006_level_up_t::kRaceFieldNumber;
#endif  // !_MSC_VER

cs_0xF006_level_up_t::cs_0xF006_level_up_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF006_level_up_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF006_level_up_t::cs_0xF006_level_up_t(const cs_0xF006_level_up_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF006_level_up_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  level_ = 0u;
  race_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF006_level_up_t::~cs_0xF006_level_up_t() {
  SharedDtor();
}

void cs_0xF006_level_up_t::SharedDtor() {
  if (race_ != &::google::protobuf::internal::kEmptyString) {
    delete race_;
  }
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF006_level_up_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF006_level_up_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF006_level_up_t_descriptor_;
}

const cs_0xF006_level_up_t& cs_0xF006_level_up_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF006_level_up_t* cs_0xF006_level_up_t::default_instance_ = NULL;

cs_0xF006_level_up_t* cs_0xF006_level_up_t::New() const {
  return new cs_0xF006_level_up_t;
}

void cs_0xF006_level_up_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    level_ = 0u;
    if (has_race()) {
      if (race_ != &::google::protobuf::internal::kEmptyString) {
        race_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF006_level_up_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_race;
        break;
      }

      // optional string race = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_race:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_race()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->race().data(), this->race().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF006_level_up_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional string race = 4;
  if (has_race()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->race().data(), this->race().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->race(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF006_level_up_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional string race = 4;
  if (has_race()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->race().data(), this->race().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->race(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF006_level_up_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional string race = 4;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->race());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF006_level_up_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF006_level_up_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF006_level_up_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF006_level_up_t::MergeFrom(const cs_0xF006_level_up_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF006_level_up_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF006_level_up_t::CopyFrom(const cs_0xF006_level_up_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF006_level_up_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF006_level_up_t::Swap(cs_0xF006_level_up_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(level_, other->level_);
    std::swap(race_, other->race_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF006_level_up_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF006_level_up_t_descriptor_;
  metadata.reflection = cs_0xF006_level_up_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF006_level_up_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF006_level_up_t::sc_0xF006_level_up_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF006_level_up_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF006_level_up_t::sc_0xF006_level_up_t(const sc_0xF006_level_up_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF006_level_up_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF006_level_up_t::~sc_0xF006_level_up_t() {
  SharedDtor();
}

void sc_0xF006_level_up_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF006_level_up_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF006_level_up_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF006_level_up_t_descriptor_;
}

const sc_0xF006_level_up_t& sc_0xF006_level_up_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF006_level_up_t* sc_0xF006_level_up_t::default_instance_ = NULL;

sc_0xF006_level_up_t* sc_0xF006_level_up_t::New() const {
  return new sc_0xF006_level_up_t;
}

void sc_0xF006_level_up_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF006_level_up_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF006_level_up_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF006_level_up_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF006_level_up_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF006_level_up_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF006_level_up_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF006_level_up_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF006_level_up_t::MergeFrom(const sc_0xF006_level_up_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF006_level_up_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF006_level_up_t::CopyFrom(const sc_0xF006_level_up_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF006_level_up_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF006_level_up_t::Swap(sc_0xF006_level_up_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF006_level_up_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF006_level_up_t_descriptor_;
  metadata.reflection = sc_0xF006_level_up_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF007_pay_t::kGameFieldNumber;
const int cs_0xF007_pay_t::kUidFieldNumber;
const int cs_0xF007_pay_t::kIsvipFieldNumber;
const int cs_0xF007_pay_t::kPayAmountFieldNumber;
const int cs_0xF007_pay_t::kPayUnitFieldNumber;
const int cs_0xF007_pay_t::kCurrencyTypeFieldNumber;
const int cs_0xF007_pay_t::kPayReasonFieldNumber;
const int cs_0xF007_pay_t::kOutcomeFieldNumber;
const int cs_0xF007_pay_t::kOutcntFieldNumber;
const int cs_0xF007_pay_t::kPayChannelFieldNumber;
#endif  // !_MSC_VER

cs_0xF007_pay_t::cs_0xF007_pay_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF007_pay_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF007_pay_t::cs_0xF007_pay_t(const cs_0xF007_pay_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF007_pay_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  isvip_ = false;
  pay_amount_ = 0u;
  pay_unit_ = 3;
  currency_type_ = 1;
  pay_reason_ = 1;
  outcome_ = 0u;
  outcnt_ = 1u;
  pay_channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF007_pay_t::~cs_0xF007_pay_t() {
  SharedDtor();
}

void cs_0xF007_pay_t::SharedDtor() {
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF007_pay_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF007_pay_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF007_pay_t_descriptor_;
}

const cs_0xF007_pay_t& cs_0xF007_pay_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF007_pay_t* cs_0xF007_pay_t::default_instance_ = NULL;

cs_0xF007_pay_t* cs_0xF007_pay_t::New() const {
  return new cs_0xF007_pay_t;
}

void cs_0xF007_pay_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    isvip_ = false;
    pay_amount_ = 0u;
    pay_unit_ = 3;
    currency_type_ = 1;
    pay_reason_ = 1;
    outcome_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    outcnt_ = 1u;
    pay_channel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF007_pay_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isvip;
        break;
      }

      // optional bool isvip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvip_)));
          set_has_isvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pay_amount;
        break;
      }

      // required uint32 pay_amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pay_amount_)));
          set_has_pay_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pay_unit;
        break;
      }

      // required .statlogger.unit_t pay_unit = 5 [default = FEN];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_unit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::statlogger::unit_t_IsValid(value)) {
            set_pay_unit(static_cast< ::statlogger::unit_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_currency_type;
        break;
      }

      // required .statlogger.currency_t currency_type = 6 [default = MIBI];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::statlogger::currency_t_IsValid(value)) {
            set_currency_type(static_cast< ::statlogger::currency_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pay_reason;
        break;
      }

      // required .statlogger.pay_reason_t pay_reason = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::statlogger::pay_reason_t_IsValid(value)) {
            set_pay_reason(static_cast< ::statlogger::pay_reason_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_outcome;
        break;
      }

      // required uint32 outcome = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outcome_)));
          set_has_outcome();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_outcnt;
        break;
      }

      // optional uint32 outcnt = 9 [default = 1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outcnt_)));
          set_has_outcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pay_channel;
        break;
      }

      // required uint32 pay_channel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pay_channel_)));
          set_has_pay_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF007_pay_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // optional bool isvip = 3;
  if (has_isvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isvip(), output);
  }

  // required uint32 pay_amount = 4;
  if (has_pay_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pay_amount(), output);
  }

  // required .statlogger.unit_t pay_unit = 5 [default = FEN];
  if (has_pay_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->pay_unit(), output);
  }

  // required .statlogger.currency_t currency_type = 6 [default = MIBI];
  if (has_currency_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->currency_type(), output);
  }

  // required .statlogger.pay_reason_t pay_reason = 7;
  if (has_pay_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->pay_reason(), output);
  }

  // required uint32 outcome = 8;
  if (has_outcome()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->outcome(), output);
  }

  // optional uint32 outcnt = 9 [default = 1];
  if (has_outcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->outcnt(), output);
  }

  // required uint32 pay_channel = 10;
  if (has_pay_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pay_channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF007_pay_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // optional bool isvip = 3;
  if (has_isvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isvip(), target);
  }

  // required uint32 pay_amount = 4;
  if (has_pay_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pay_amount(), target);
  }

  // required .statlogger.unit_t pay_unit = 5 [default = FEN];
  if (has_pay_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->pay_unit(), target);
  }

  // required .statlogger.currency_t currency_type = 6 [default = MIBI];
  if (has_currency_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->currency_type(), target);
  }

  // required .statlogger.pay_reason_t pay_reason = 7;
  if (has_pay_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->pay_reason(), target);
  }

  // required uint32 outcome = 8;
  if (has_outcome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->outcome(), target);
  }

  // optional uint32 outcnt = 9 [default = 1];
  if (has_outcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->outcnt(), target);
  }

  // required uint32 pay_channel = 10;
  if (has_pay_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pay_channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF007_pay_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // optional bool isvip = 3;
    if (has_isvip()) {
      total_size += 1 + 1;
    }

    // required uint32 pay_amount = 4;
    if (has_pay_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pay_amount());
    }

    // required .statlogger.unit_t pay_unit = 5 [default = FEN];
    if (has_pay_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pay_unit());
    }

    // required .statlogger.currency_t currency_type = 6 [default = MIBI];
    if (has_currency_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->currency_type());
    }

    // required .statlogger.pay_reason_t pay_reason = 7;
    if (has_pay_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pay_reason());
    }

    // required uint32 outcome = 8;
    if (has_outcome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outcome());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 outcnt = 9 [default = 1];
    if (has_outcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outcnt());
    }

    // required uint32 pay_channel = 10;
    if (has_pay_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pay_channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF007_pay_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF007_pay_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF007_pay_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF007_pay_t::MergeFrom(const cs_0xF007_pay_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_isvip()) {
      set_isvip(from.isvip());
    }
    if (from.has_pay_amount()) {
      set_pay_amount(from.pay_amount());
    }
    if (from.has_pay_unit()) {
      set_pay_unit(from.pay_unit());
    }
    if (from.has_currency_type()) {
      set_currency_type(from.currency_type());
    }
    if (from.has_pay_reason()) {
      set_pay_reason(from.pay_reason());
    }
    if (from.has_outcome()) {
      set_outcome(from.outcome());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_outcnt()) {
      set_outcnt(from.outcnt());
    }
    if (from.has_pay_channel()) {
      set_pay_channel(from.pay_channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF007_pay_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF007_pay_t::CopyFrom(const cs_0xF007_pay_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF007_pay_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x000002fb) != 0x000002fb) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF007_pay_t::Swap(cs_0xF007_pay_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(isvip_, other->isvip_);
    std::swap(pay_amount_, other->pay_amount_);
    std::swap(pay_unit_, other->pay_unit_);
    std::swap(currency_type_, other->currency_type_);
    std::swap(pay_reason_, other->pay_reason_);
    std::swap(outcome_, other->outcome_);
    std::swap(outcnt_, other->outcnt_);
    std::swap(pay_channel_, other->pay_channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF007_pay_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF007_pay_t_descriptor_;
  metadata.reflection = cs_0xF007_pay_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF007_pay_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF007_pay_t::sc_0xF007_pay_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF007_pay_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF007_pay_t::sc_0xF007_pay_t(const sc_0xF007_pay_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF007_pay_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF007_pay_t::~sc_0xF007_pay_t() {
  SharedDtor();
}

void sc_0xF007_pay_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF007_pay_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF007_pay_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF007_pay_t_descriptor_;
}

const sc_0xF007_pay_t& sc_0xF007_pay_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF007_pay_t* sc_0xF007_pay_t::default_instance_ = NULL;

sc_0xF007_pay_t* sc_0xF007_pay_t::New() const {
  return new sc_0xF007_pay_t;
}

void sc_0xF007_pay_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF007_pay_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF007_pay_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF007_pay_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF007_pay_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF007_pay_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF007_pay_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF007_pay_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF007_pay_t::MergeFrom(const sc_0xF007_pay_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF007_pay_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF007_pay_t::CopyFrom(const sc_0xF007_pay_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF007_pay_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF007_pay_t::Swap(sc_0xF007_pay_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF007_pay_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF007_pay_t_descriptor_;
  metadata.reflection = sc_0xF007_pay_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF008_free_golds_t::kGameFieldNumber;
const int cs_0xF008_free_golds_t::kUidFieldNumber;
const int cs_0xF008_free_golds_t::kAmtFieldNumber;
#endif  // !_MSC_VER

cs_0xF008_free_golds_t::cs_0xF008_free_golds_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF008_free_golds_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF008_free_golds_t::cs_0xF008_free_golds_t(const cs_0xF008_free_golds_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF008_free_golds_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  amt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF008_free_golds_t::~cs_0xF008_free_golds_t() {
  SharedDtor();
}

void cs_0xF008_free_golds_t::SharedDtor() {
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF008_free_golds_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF008_free_golds_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF008_free_golds_t_descriptor_;
}

const cs_0xF008_free_golds_t& cs_0xF008_free_golds_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF008_free_golds_t* cs_0xF008_free_golds_t::default_instance_ = NULL;

cs_0xF008_free_golds_t* cs_0xF008_free_golds_t::New() const {
  return new cs_0xF008_free_golds_t;
}

void cs_0xF008_free_golds_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    amt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF008_free_golds_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amt;
        break;
      }

      // required uint32 amt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amt_)));
          set_has_amt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF008_free_golds_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // required uint32 amt = 3;
  if (has_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->amt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF008_free_golds_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // required uint32 amt = 3;
  if (has_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->amt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF008_free_golds_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // required uint32 amt = 3;
    if (has_amt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF008_free_golds_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF008_free_golds_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF008_free_golds_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF008_free_golds_t::MergeFrom(const cs_0xF008_free_golds_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_amt()) {
      set_amt(from.amt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF008_free_golds_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF008_free_golds_t::CopyFrom(const cs_0xF008_free_golds_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF008_free_golds_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF008_free_golds_t::Swap(cs_0xF008_free_golds_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(amt_, other->amt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF008_free_golds_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF008_free_golds_t_descriptor_;
  metadata.reflection = cs_0xF008_free_golds_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF008_free_golds_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF008_free_golds_t::sc_0xF008_free_golds_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF008_free_golds_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF008_free_golds_t::sc_0xF008_free_golds_t(const sc_0xF008_free_golds_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF008_free_golds_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF008_free_golds_t::~sc_0xF008_free_golds_t() {
  SharedDtor();
}

void sc_0xF008_free_golds_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF008_free_golds_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF008_free_golds_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF008_free_golds_t_descriptor_;
}

const sc_0xF008_free_golds_t& sc_0xF008_free_golds_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF008_free_golds_t* sc_0xF008_free_golds_t::default_instance_ = NULL;

sc_0xF008_free_golds_t* sc_0xF008_free_golds_t::New() const {
  return new sc_0xF008_free_golds_t;
}

void sc_0xF008_free_golds_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF008_free_golds_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF008_free_golds_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF008_free_golds_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF008_free_golds_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF008_free_golds_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF008_free_golds_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF008_free_golds_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF008_free_golds_t::MergeFrom(const sc_0xF008_free_golds_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF008_free_golds_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF008_free_golds_t::CopyFrom(const sc_0xF008_free_golds_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF008_free_golds_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF008_free_golds_t::Swap(sc_0xF008_free_golds_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF008_free_golds_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF008_free_golds_t_descriptor_;
  metadata.reflection = sc_0xF008_free_golds_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF009_buy_item_t::kGameFieldNumber;
const int cs_0xF009_buy_item_t::kUidFieldNumber;
const int cs_0xF009_buy_item_t::kIsvipFieldNumber;
const int cs_0xF009_buy_item_t::kLvFieldNumber;
const int cs_0xF009_buy_item_t::kPayAmtFieldNumber;
const int cs_0xF009_buy_item_t::kOutcomeFieldNumber;
const int cs_0xF009_buy_item_t::kOutcntFieldNumber;
#endif  // !_MSC_VER

cs_0xF009_buy_item_t::cs_0xF009_buy_item_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF009_buy_item_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF009_buy_item_t::cs_0xF009_buy_item_t(const cs_0xF009_buy_item_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF009_buy_item_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  isvip_ = false;
  lv_ = 0u;
  pay_amt_ = 0u;
  outcome_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outcnt_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF009_buy_item_t::~cs_0xF009_buy_item_t() {
  SharedDtor();
}

void cs_0xF009_buy_item_t::SharedDtor() {
  if (outcome_ != &::google::protobuf::internal::kEmptyString) {
    delete outcome_;
  }
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF009_buy_item_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF009_buy_item_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF009_buy_item_t_descriptor_;
}

const cs_0xF009_buy_item_t& cs_0xF009_buy_item_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF009_buy_item_t* cs_0xF009_buy_item_t::default_instance_ = NULL;

cs_0xF009_buy_item_t* cs_0xF009_buy_item_t::New() const {
  return new cs_0xF009_buy_item_t;
}

void cs_0xF009_buy_item_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    isvip_ = false;
    lv_ = 0u;
    pay_amt_ = 0u;
    if (has_outcome()) {
      if (outcome_ != &::google::protobuf::internal::kEmptyString) {
        outcome_->clear();
      }
    }
    outcnt_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF009_buy_item_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isvip;
        break;
      }

      // optional bool isvip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvip_)));
          set_has_isvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pay_amt;
        break;
      }

      // required uint32 pay_amt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pay_amt_)));
          set_has_pay_amt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_outcome;
        break;
      }

      // required string outcome = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outcome:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outcome()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outcome().data(), this->outcome().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_outcnt;
        break;
      }

      // optional uint32 outcnt = 7 [default = 1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outcnt_)));
          set_has_outcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF009_buy_item_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // optional bool isvip = 3;
  if (has_isvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isvip(), output);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }

  // required uint32 pay_amt = 5;
  if (has_pay_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pay_amt(), output);
  }

  // required string outcome = 6;
  if (has_outcome()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outcome().data(), this->outcome().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->outcome(), output);
  }

  // optional uint32 outcnt = 7 [default = 1];
  if (has_outcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->outcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF009_buy_item_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // optional bool isvip = 3;
  if (has_isvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isvip(), target);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }

  // required uint32 pay_amt = 5;
  if (has_pay_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pay_amt(), target);
  }

  // required string outcome = 6;
  if (has_outcome()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outcome().data(), this->outcome().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->outcome(), target);
  }

  // optional uint32 outcnt = 7 [default = 1];
  if (has_outcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->outcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF009_buy_item_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // optional bool isvip = 3;
    if (has_isvip()) {
      total_size += 1 + 1;
    }

    // optional uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required uint32 pay_amt = 5;
    if (has_pay_amt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pay_amt());
    }

    // required string outcome = 6;
    if (has_outcome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outcome());
    }

    // optional uint32 outcnt = 7 [default = 1];
    if (has_outcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outcnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF009_buy_item_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF009_buy_item_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF009_buy_item_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF009_buy_item_t::MergeFrom(const cs_0xF009_buy_item_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_isvip()) {
      set_isvip(from.isvip());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_pay_amt()) {
      set_pay_amt(from.pay_amt());
    }
    if (from.has_outcome()) {
      set_outcome(from.outcome());
    }
    if (from.has_outcnt()) {
      set_outcnt(from.outcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF009_buy_item_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF009_buy_item_t::CopyFrom(const cs_0xF009_buy_item_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF009_buy_item_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF009_buy_item_t::Swap(cs_0xF009_buy_item_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(isvip_, other->isvip_);
    std::swap(lv_, other->lv_);
    std::swap(pay_amt_, other->pay_amt_);
    std::swap(outcome_, other->outcome_);
    std::swap(outcnt_, other->outcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF009_buy_item_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF009_buy_item_t_descriptor_;
  metadata.reflection = cs_0xF009_buy_item_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF009_buy_item_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF009_buy_item_t::sc_0xF009_buy_item_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF009_buy_item_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF009_buy_item_t::sc_0xF009_buy_item_t(const sc_0xF009_buy_item_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF009_buy_item_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF009_buy_item_t::~sc_0xF009_buy_item_t() {
  SharedDtor();
}

void sc_0xF009_buy_item_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF009_buy_item_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF009_buy_item_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF009_buy_item_t_descriptor_;
}

const sc_0xF009_buy_item_t& sc_0xF009_buy_item_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF009_buy_item_t* sc_0xF009_buy_item_t::default_instance_ = NULL;

sc_0xF009_buy_item_t* sc_0xF009_buy_item_t::New() const {
  return new sc_0xF009_buy_item_t;
}

void sc_0xF009_buy_item_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF009_buy_item_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF009_buy_item_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF009_buy_item_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF009_buy_item_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF009_buy_item_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF009_buy_item_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF009_buy_item_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF009_buy_item_t::MergeFrom(const sc_0xF009_buy_item_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF009_buy_item_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF009_buy_item_t::CopyFrom(const sc_0xF009_buy_item_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF009_buy_item_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF009_buy_item_t::Swap(sc_0xF009_buy_item_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF009_buy_item_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF009_buy_item_t_descriptor_;
  metadata.reflection = sc_0xF009_buy_item_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF00A_buy_other_t::kGameFieldNumber;
const int cs_0xF00A_buy_other_t::kUidFieldNumber;
const int cs_0xF00A_buy_other_t::kIsvipFieldNumber;
const int cs_0xF00A_buy_other_t::kLvFieldNumber;
const int cs_0xF00A_buy_other_t::kPayAmtFieldNumber;
const int cs_0xF00A_buy_other_t::kReasonFieldNumber;
#endif  // !_MSC_VER

cs_0xF00A_buy_other_t::cs_0xF00A_buy_other_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF00A_buy_other_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF00A_buy_other_t::cs_0xF00A_buy_other_t(const cs_0xF00A_buy_other_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF00A_buy_other_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  isvip_ = false;
  lv_ = 0u;
  pay_amt_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF00A_buy_other_t::~cs_0xF00A_buy_other_t() {
  SharedDtor();
}

void cs_0xF00A_buy_other_t::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF00A_buy_other_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF00A_buy_other_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF00A_buy_other_t_descriptor_;
}

const cs_0xF00A_buy_other_t& cs_0xF00A_buy_other_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF00A_buy_other_t* cs_0xF00A_buy_other_t::default_instance_ = NULL;

cs_0xF00A_buy_other_t* cs_0xF00A_buy_other_t::New() const {
  return new cs_0xF00A_buy_other_t;
}

void cs_0xF00A_buy_other_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    isvip_ = false;
    lv_ = 0u;
    pay_amt_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF00A_buy_other_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isvip;
        break;
      }

      // optional bool isvip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvip_)));
          set_has_isvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pay_amt;
        break;
      }

      // required uint32 pay_amt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pay_amt_)));
          set_has_pay_amt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reason;
        break;
      }

      // required string reason = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF00A_buy_other_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // optional bool isvip = 3;
  if (has_isvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isvip(), output);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }

  // required uint32 pay_amt = 5;
  if (has_pay_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pay_amt(), output);
  }

  // required string reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF00A_buy_other_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // optional bool isvip = 3;
  if (has_isvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isvip(), target);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }

  // required uint32 pay_amt = 5;
  if (has_pay_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pay_amt(), target);
  }

  // required string reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF00A_buy_other_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // optional bool isvip = 3;
    if (has_isvip()) {
      total_size += 1 + 1;
    }

    // optional uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required uint32 pay_amt = 5;
    if (has_pay_amt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pay_amt());
    }

    // required string reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF00A_buy_other_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF00A_buy_other_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF00A_buy_other_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF00A_buy_other_t::MergeFrom(const cs_0xF00A_buy_other_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_isvip()) {
      set_isvip(from.isvip());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_pay_amt()) {
      set_pay_amt(from.pay_amt());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF00A_buy_other_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF00A_buy_other_t::CopyFrom(const cs_0xF00A_buy_other_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF00A_buy_other_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF00A_buy_other_t::Swap(cs_0xF00A_buy_other_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(isvip_, other->isvip_);
    std::swap(lv_, other->lv_);
    std::swap(pay_amt_, other->pay_amt_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF00A_buy_other_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF00A_buy_other_t_descriptor_;
  metadata.reflection = cs_0xF00A_buy_other_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF00A_buy_other_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF00A_buy_other_t::sc_0xF00A_buy_other_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF00A_buy_other_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF00A_buy_other_t::sc_0xF00A_buy_other_t(const sc_0xF00A_buy_other_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF00A_buy_other_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF00A_buy_other_t::~sc_0xF00A_buy_other_t() {
  SharedDtor();
}

void sc_0xF00A_buy_other_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF00A_buy_other_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF00A_buy_other_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF00A_buy_other_t_descriptor_;
}

const sc_0xF00A_buy_other_t& sc_0xF00A_buy_other_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF00A_buy_other_t* sc_0xF00A_buy_other_t::default_instance_ = NULL;

sc_0xF00A_buy_other_t* sc_0xF00A_buy_other_t::New() const {
  return new sc_0xF00A_buy_other_t;
}

void sc_0xF00A_buy_other_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF00A_buy_other_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF00A_buy_other_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF00A_buy_other_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF00A_buy_other_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF00A_buy_other_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF00A_buy_other_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF00A_buy_other_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF00A_buy_other_t::MergeFrom(const sc_0xF00A_buy_other_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF00A_buy_other_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF00A_buy_other_t::CopyFrom(const sc_0xF00A_buy_other_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF00A_buy_other_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF00A_buy_other_t::Swap(sc_0xF00A_buy_other_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF00A_buy_other_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF00A_buy_other_t_descriptor_;
  metadata.reflection = sc_0xF00A_buy_other_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF00B_accept_task_t::kGameFieldNumber;
const int cs_0xF00B_accept_task_t::kUidFieldNumber;
const int cs_0xF00B_accept_task_t::kLvFieldNumber;
const int cs_0xF00B_accept_task_t::kTypeFieldNumber;
const int cs_0xF00B_accept_task_t::kNameFieldNumber;
#endif  // !_MSC_VER

cs_0xF00B_accept_task_t::cs_0xF00B_accept_task_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF00B_accept_task_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF00B_accept_task_t::cs_0xF00B_accept_task_t(const cs_0xF00B_accept_task_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF00B_accept_task_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  lv_ = 0u;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF00B_accept_task_t::~cs_0xF00B_accept_task_t() {
  SharedDtor();
}

void cs_0xF00B_accept_task_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF00B_accept_task_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF00B_accept_task_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF00B_accept_task_t_descriptor_;
}

const cs_0xF00B_accept_task_t& cs_0xF00B_accept_task_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF00B_accept_task_t* cs_0xF00B_accept_task_t::default_instance_ = NULL;

cs_0xF00B_accept_task_t* cs_0xF00B_accept_task_t::New() const {
  return new cs_0xF00B_accept_task_t;
}

void cs_0xF00B_accept_task_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    lv_ = 0u;
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF00B_accept_task_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .statlogger.task_type_t type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::statlogger::task_type_t_IsValid(value)) {
            set_type(static_cast< ::statlogger::task_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF00B_accept_task_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // required .statlogger.task_type_t type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF00B_accept_task_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lv(), target);
  }

  // required .statlogger.task_type_t type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF00B_accept_task_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // optional uint32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required .statlogger.task_type_t type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF00B_accept_task_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF00B_accept_task_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF00B_accept_task_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF00B_accept_task_t::MergeFrom(const cs_0xF00B_accept_task_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF00B_accept_task_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF00B_accept_task_t::CopyFrom(const cs_0xF00B_accept_task_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF00B_accept_task_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF00B_accept_task_t::Swap(cs_0xF00B_accept_task_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(lv_, other->lv_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF00B_accept_task_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF00B_accept_task_t_descriptor_;
  metadata.reflection = cs_0xF00B_accept_task_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF00B_accept_task_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF00B_accept_task_t::sc_0xF00B_accept_task_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF00B_accept_task_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF00B_accept_task_t::sc_0xF00B_accept_task_t(const sc_0xF00B_accept_task_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF00B_accept_task_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF00B_accept_task_t::~sc_0xF00B_accept_task_t() {
  SharedDtor();
}

void sc_0xF00B_accept_task_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF00B_accept_task_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF00B_accept_task_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF00B_accept_task_t_descriptor_;
}

const sc_0xF00B_accept_task_t& sc_0xF00B_accept_task_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF00B_accept_task_t* sc_0xF00B_accept_task_t::default_instance_ = NULL;

sc_0xF00B_accept_task_t* sc_0xF00B_accept_task_t::New() const {
  return new sc_0xF00B_accept_task_t;
}

void sc_0xF00B_accept_task_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF00B_accept_task_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF00B_accept_task_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF00B_accept_task_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF00B_accept_task_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF00B_accept_task_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF00B_accept_task_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF00B_accept_task_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF00B_accept_task_t::MergeFrom(const sc_0xF00B_accept_task_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF00B_accept_task_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF00B_accept_task_t::CopyFrom(const sc_0xF00B_accept_task_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF00B_accept_task_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF00B_accept_task_t::Swap(sc_0xF00B_accept_task_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF00B_accept_task_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF00B_accept_task_t_descriptor_;
  metadata.reflection = sc_0xF00B_accept_task_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF00C_finish_task_t::kGameFieldNumber;
const int cs_0xF00C_finish_task_t::kUidFieldNumber;
const int cs_0xF00C_finish_task_t::kLvFieldNumber;
const int cs_0xF00C_finish_task_t::kTypeFieldNumber;
const int cs_0xF00C_finish_task_t::kNameFieldNumber;
#endif  // !_MSC_VER

cs_0xF00C_finish_task_t::cs_0xF00C_finish_task_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF00C_finish_task_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF00C_finish_task_t::cs_0xF00C_finish_task_t(const cs_0xF00C_finish_task_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF00C_finish_task_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  lv_ = 0u;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF00C_finish_task_t::~cs_0xF00C_finish_task_t() {
  SharedDtor();
}

void cs_0xF00C_finish_task_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF00C_finish_task_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF00C_finish_task_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF00C_finish_task_t_descriptor_;
}

const cs_0xF00C_finish_task_t& cs_0xF00C_finish_task_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF00C_finish_task_t* cs_0xF00C_finish_task_t::default_instance_ = NULL;

cs_0xF00C_finish_task_t* cs_0xF00C_finish_task_t::New() const {
  return new cs_0xF00C_finish_task_t;
}

void cs_0xF00C_finish_task_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    lv_ = 0u;
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF00C_finish_task_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .statlogger.task_type_t type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::statlogger::task_type_t_IsValid(value)) {
            set_type(static_cast< ::statlogger::task_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF00C_finish_task_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // required .statlogger.task_type_t type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF00C_finish_task_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lv(), target);
  }

  // required .statlogger.task_type_t type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF00C_finish_task_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // optional uint32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required .statlogger.task_type_t type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF00C_finish_task_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF00C_finish_task_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF00C_finish_task_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF00C_finish_task_t::MergeFrom(const cs_0xF00C_finish_task_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF00C_finish_task_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF00C_finish_task_t::CopyFrom(const cs_0xF00C_finish_task_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF00C_finish_task_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF00C_finish_task_t::Swap(cs_0xF00C_finish_task_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(lv_, other->lv_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF00C_finish_task_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF00C_finish_task_t_descriptor_;
  metadata.reflection = cs_0xF00C_finish_task_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF00C_finish_task_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF00C_finish_task_t::sc_0xF00C_finish_task_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF00C_finish_task_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF00C_finish_task_t::sc_0xF00C_finish_task_t(const sc_0xF00C_finish_task_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF00C_finish_task_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF00C_finish_task_t::~sc_0xF00C_finish_task_t() {
  SharedDtor();
}

void sc_0xF00C_finish_task_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF00C_finish_task_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF00C_finish_task_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF00C_finish_task_t_descriptor_;
}

const sc_0xF00C_finish_task_t& sc_0xF00C_finish_task_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF00C_finish_task_t* sc_0xF00C_finish_task_t::default_instance_ = NULL;

sc_0xF00C_finish_task_t* sc_0xF00C_finish_task_t::New() const {
  return new sc_0xF00C_finish_task_t;
}

void sc_0xF00C_finish_task_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF00C_finish_task_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF00C_finish_task_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF00C_finish_task_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF00C_finish_task_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF00C_finish_task_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF00C_finish_task_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF00C_finish_task_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF00C_finish_task_t::MergeFrom(const sc_0xF00C_finish_task_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF00C_finish_task_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF00C_finish_task_t::CopyFrom(const sc_0xF00C_finish_task_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF00C_finish_task_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF00C_finish_task_t::Swap(sc_0xF00C_finish_task_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF00C_finish_task_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF00C_finish_task_t_descriptor_;
  metadata.reflection = sc_0xF00C_finish_task_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF00D_abort_task_t::kGameFieldNumber;
const int cs_0xF00D_abort_task_t::kUidFieldNumber;
const int cs_0xF00D_abort_task_t::kLvFieldNumber;
const int cs_0xF00D_abort_task_t::kTypeFieldNumber;
const int cs_0xF00D_abort_task_t::kNameFieldNumber;
#endif  // !_MSC_VER

cs_0xF00D_abort_task_t::cs_0xF00D_abort_task_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF00D_abort_task_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF00D_abort_task_t::cs_0xF00D_abort_task_t(const cs_0xF00D_abort_task_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF00D_abort_task_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  lv_ = 0u;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF00D_abort_task_t::~cs_0xF00D_abort_task_t() {
  SharedDtor();
}

void cs_0xF00D_abort_task_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF00D_abort_task_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF00D_abort_task_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF00D_abort_task_t_descriptor_;
}

const cs_0xF00D_abort_task_t& cs_0xF00D_abort_task_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF00D_abort_task_t* cs_0xF00D_abort_task_t::default_instance_ = NULL;

cs_0xF00D_abort_task_t* cs_0xF00D_abort_task_t::New() const {
  return new cs_0xF00D_abort_task_t;
}

void cs_0xF00D_abort_task_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    lv_ = 0u;
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF00D_abort_task_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .statlogger.task_type_t type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::statlogger::task_type_t_IsValid(value)) {
            set_type(static_cast< ::statlogger::task_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF00D_abort_task_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // required .statlogger.task_type_t type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF00D_abort_task_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lv(), target);
  }

  // required .statlogger.task_type_t type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF00D_abort_task_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // optional uint32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required .statlogger.task_type_t type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF00D_abort_task_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF00D_abort_task_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF00D_abort_task_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF00D_abort_task_t::MergeFrom(const cs_0xF00D_abort_task_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF00D_abort_task_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF00D_abort_task_t::CopyFrom(const cs_0xF00D_abort_task_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF00D_abort_task_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF00D_abort_task_t::Swap(cs_0xF00D_abort_task_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(lv_, other->lv_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF00D_abort_task_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF00D_abort_task_t_descriptor_;
  metadata.reflection = cs_0xF00D_abort_task_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF00D_abort_task_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF00D_abort_task_t::sc_0xF00D_abort_task_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF00D_abort_task_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF00D_abort_task_t::sc_0xF00D_abort_task_t(const sc_0xF00D_abort_task_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF00D_abort_task_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF00D_abort_task_t::~sc_0xF00D_abort_task_t() {
  SharedDtor();
}

void sc_0xF00D_abort_task_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF00D_abort_task_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF00D_abort_task_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF00D_abort_task_t_descriptor_;
}

const sc_0xF00D_abort_task_t& sc_0xF00D_abort_task_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF00D_abort_task_t* sc_0xF00D_abort_task_t::default_instance_ = NULL;

sc_0xF00D_abort_task_t* sc_0xF00D_abort_task_t::New() const {
  return new sc_0xF00D_abort_task_t;
}

void sc_0xF00D_abort_task_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF00D_abort_task_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF00D_abort_task_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF00D_abort_task_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF00D_abort_task_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF00D_abort_task_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF00D_abort_task_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF00D_abort_task_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF00D_abort_task_t::MergeFrom(const sc_0xF00D_abort_task_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF00D_abort_task_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF00D_abort_task_t::CopyFrom(const sc_0xF00D_abort_task_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF00D_abort_task_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF00D_abort_task_t::Swap(sc_0xF00D_abort_task_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF00D_abort_task_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF00D_abort_task_t_descriptor_;
  metadata.reflection = sc_0xF00D_abort_task_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF00E_obtain_spirit_t::kGameFieldNumber;
const int cs_0xF00E_obtain_spirit_t::kUidFieldNumber;
const int cs_0xF00E_obtain_spirit_t::kLvFieldNumber;
const int cs_0xF00E_obtain_spirit_t::kIsvipFieldNumber;
const int cs_0xF00E_obtain_spirit_t::kSpiritFieldNumber;
#endif  // !_MSC_VER

cs_0xF00E_obtain_spirit_t::cs_0xF00E_obtain_spirit_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF00E_obtain_spirit_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF00E_obtain_spirit_t::cs_0xF00E_obtain_spirit_t(const cs_0xF00E_obtain_spirit_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF00E_obtain_spirit_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  lv_ = 0u;
  isvip_ = false;
  spirit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF00E_obtain_spirit_t::~cs_0xF00E_obtain_spirit_t() {
  SharedDtor();
}

void cs_0xF00E_obtain_spirit_t::SharedDtor() {
  if (spirit_ != &::google::protobuf::internal::kEmptyString) {
    delete spirit_;
  }
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF00E_obtain_spirit_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF00E_obtain_spirit_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF00E_obtain_spirit_t_descriptor_;
}

const cs_0xF00E_obtain_spirit_t& cs_0xF00E_obtain_spirit_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF00E_obtain_spirit_t* cs_0xF00E_obtain_spirit_t::default_instance_ = NULL;

cs_0xF00E_obtain_spirit_t* cs_0xF00E_obtain_spirit_t::New() const {
  return new cs_0xF00E_obtain_spirit_t;
}

void cs_0xF00E_obtain_spirit_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    lv_ = 0u;
    isvip_ = false;
    if (has_spirit()) {
      if (spirit_ != &::google::protobuf::internal::kEmptyString) {
        spirit_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF00E_obtain_spirit_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isvip;
        break;
      }

      // optional bool isvip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvip_)));
          set_has_isvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_spirit;
        break;
      }

      // required string spirit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spirit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spirit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spirit().data(), this->spirit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF00E_obtain_spirit_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // optional bool isvip = 4;
  if (has_isvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isvip(), output);
  }

  // required string spirit = 5;
  if (has_spirit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spirit().data(), this->spirit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->spirit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF00E_obtain_spirit_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lv(), target);
  }

  // optional bool isvip = 4;
  if (has_isvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isvip(), target);
  }

  // required string spirit = 5;
  if (has_spirit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spirit().data(), this->spirit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->spirit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF00E_obtain_spirit_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // optional uint32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional bool isvip = 4;
    if (has_isvip()) {
      total_size += 1 + 1;
    }

    // required string spirit = 5;
    if (has_spirit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spirit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF00E_obtain_spirit_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF00E_obtain_spirit_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF00E_obtain_spirit_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF00E_obtain_spirit_t::MergeFrom(const cs_0xF00E_obtain_spirit_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_isvip()) {
      set_isvip(from.isvip());
    }
    if (from.has_spirit()) {
      set_spirit(from.spirit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF00E_obtain_spirit_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF00E_obtain_spirit_t::CopyFrom(const cs_0xF00E_obtain_spirit_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF00E_obtain_spirit_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF00E_obtain_spirit_t::Swap(cs_0xF00E_obtain_spirit_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(lv_, other->lv_);
    std::swap(isvip_, other->isvip_);
    std::swap(spirit_, other->spirit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF00E_obtain_spirit_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF00E_obtain_spirit_t_descriptor_;
  metadata.reflection = cs_0xF00E_obtain_spirit_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF00E_obtain_spirit_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF00E_obtain_spirit_t::sc_0xF00E_obtain_spirit_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF00E_obtain_spirit_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF00E_obtain_spirit_t::sc_0xF00E_obtain_spirit_t(const sc_0xF00E_obtain_spirit_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF00E_obtain_spirit_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF00E_obtain_spirit_t::~sc_0xF00E_obtain_spirit_t() {
  SharedDtor();
}

void sc_0xF00E_obtain_spirit_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF00E_obtain_spirit_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF00E_obtain_spirit_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF00E_obtain_spirit_t_descriptor_;
}

const sc_0xF00E_obtain_spirit_t& sc_0xF00E_obtain_spirit_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF00E_obtain_spirit_t* sc_0xF00E_obtain_spirit_t::default_instance_ = NULL;

sc_0xF00E_obtain_spirit_t* sc_0xF00E_obtain_spirit_t::New() const {
  return new sc_0xF00E_obtain_spirit_t;
}

void sc_0xF00E_obtain_spirit_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF00E_obtain_spirit_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF00E_obtain_spirit_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF00E_obtain_spirit_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF00E_obtain_spirit_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF00E_obtain_spirit_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF00E_obtain_spirit_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF00E_obtain_spirit_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF00E_obtain_spirit_t::MergeFrom(const sc_0xF00E_obtain_spirit_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF00E_obtain_spirit_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF00E_obtain_spirit_t::CopyFrom(const sc_0xF00E_obtain_spirit_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF00E_obtain_spirit_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF00E_obtain_spirit_t::Swap(sc_0xF00E_obtain_spirit_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF00E_obtain_spirit_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF00E_obtain_spirit_t_descriptor_;
  metadata.reflection = sc_0xF00E_obtain_spirit_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF00F_lose_spirit_t::kGameFieldNumber;
const int cs_0xF00F_lose_spirit_t::kUidFieldNumber;
const int cs_0xF00F_lose_spirit_t::kLvFieldNumber;
const int cs_0xF00F_lose_spirit_t::kIsvipFieldNumber;
const int cs_0xF00F_lose_spirit_t::kSpiritFieldNumber;
#endif  // !_MSC_VER

cs_0xF00F_lose_spirit_t::cs_0xF00F_lose_spirit_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF00F_lose_spirit_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF00F_lose_spirit_t::cs_0xF00F_lose_spirit_t(const cs_0xF00F_lose_spirit_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF00F_lose_spirit_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  lv_ = 0u;
  isvip_ = false;
  spirit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF00F_lose_spirit_t::~cs_0xF00F_lose_spirit_t() {
  SharedDtor();
}

void cs_0xF00F_lose_spirit_t::SharedDtor() {
  if (spirit_ != &::google::protobuf::internal::kEmptyString) {
    delete spirit_;
  }
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF00F_lose_spirit_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF00F_lose_spirit_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF00F_lose_spirit_t_descriptor_;
}

const cs_0xF00F_lose_spirit_t& cs_0xF00F_lose_spirit_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF00F_lose_spirit_t* cs_0xF00F_lose_spirit_t::default_instance_ = NULL;

cs_0xF00F_lose_spirit_t* cs_0xF00F_lose_spirit_t::New() const {
  return new cs_0xF00F_lose_spirit_t;
}

void cs_0xF00F_lose_spirit_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    lv_ = 0u;
    isvip_ = false;
    if (has_spirit()) {
      if (spirit_ != &::google::protobuf::internal::kEmptyString) {
        spirit_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF00F_lose_spirit_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isvip;
        break;
      }

      // optional bool isvip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvip_)));
          set_has_isvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_spirit;
        break;
      }

      // required string spirit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spirit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spirit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spirit().data(), this->spirit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF00F_lose_spirit_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // optional bool isvip = 4;
  if (has_isvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isvip(), output);
  }

  // required string spirit = 5;
  if (has_spirit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spirit().data(), this->spirit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->spirit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF00F_lose_spirit_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lv(), target);
  }

  // optional bool isvip = 4;
  if (has_isvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isvip(), target);
  }

  // required string spirit = 5;
  if (has_spirit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spirit().data(), this->spirit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->spirit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF00F_lose_spirit_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // optional uint32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional bool isvip = 4;
    if (has_isvip()) {
      total_size += 1 + 1;
    }

    // required string spirit = 5;
    if (has_spirit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spirit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF00F_lose_spirit_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF00F_lose_spirit_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF00F_lose_spirit_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF00F_lose_spirit_t::MergeFrom(const cs_0xF00F_lose_spirit_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_isvip()) {
      set_isvip(from.isvip());
    }
    if (from.has_spirit()) {
      set_spirit(from.spirit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF00F_lose_spirit_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF00F_lose_spirit_t::CopyFrom(const cs_0xF00F_lose_spirit_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF00F_lose_spirit_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF00F_lose_spirit_t::Swap(cs_0xF00F_lose_spirit_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(lv_, other->lv_);
    std::swap(isvip_, other->isvip_);
    std::swap(spirit_, other->spirit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF00F_lose_spirit_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF00F_lose_spirit_t_descriptor_;
  metadata.reflection = cs_0xF00F_lose_spirit_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF00F_lose_spirit_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF00F_lose_spirit_t::sc_0xF00F_lose_spirit_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF00F_lose_spirit_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF00F_lose_spirit_t::sc_0xF00F_lose_spirit_t(const sc_0xF00F_lose_spirit_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF00F_lose_spirit_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF00F_lose_spirit_t::~sc_0xF00F_lose_spirit_t() {
  SharedDtor();
}

void sc_0xF00F_lose_spirit_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF00F_lose_spirit_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF00F_lose_spirit_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF00F_lose_spirit_t_descriptor_;
}

const sc_0xF00F_lose_spirit_t& sc_0xF00F_lose_spirit_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF00F_lose_spirit_t* sc_0xF00F_lose_spirit_t::default_instance_ = NULL;

sc_0xF00F_lose_spirit_t* sc_0xF00F_lose_spirit_t::New() const {
  return new sc_0xF00F_lose_spirit_t;
}

void sc_0xF00F_lose_spirit_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF00F_lose_spirit_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF00F_lose_spirit_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF00F_lose_spirit_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF00F_lose_spirit_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF00F_lose_spirit_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF00F_lose_spirit_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF00F_lose_spirit_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF00F_lose_spirit_t::MergeFrom(const sc_0xF00F_lose_spirit_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF00F_lose_spirit_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF00F_lose_spirit_t::CopyFrom(const sc_0xF00F_lose_spirit_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF00F_lose_spirit_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF00F_lose_spirit_t::Swap(sc_0xF00F_lose_spirit_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF00F_lose_spirit_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF00F_lose_spirit_t_descriptor_;
  metadata.reflection = sc_0xF00F_lose_spirit_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cs_0xF010_new_trans_t::kGameFieldNumber;
const int cs_0xF010_new_trans_t::kUidFieldNumber;
const int cs_0xF010_new_trans_t::kStepFieldNumber;
#endif  // !_MSC_VER

cs_0xF010_new_trans_t::cs_0xF010_new_trans_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF010_new_trans_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF010_new_trans_t::cs_0xF010_new_trans_t(const cs_0xF010_new_trans_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF010_new_trans_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  step_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF010_new_trans_t::~cs_0xF010_new_trans_t() {
  SharedDtor();
}

void cs_0xF010_new_trans_t::SharedDtor() {
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF010_new_trans_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF010_new_trans_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF010_new_trans_t_descriptor_;
}

const cs_0xF010_new_trans_t& cs_0xF010_new_trans_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF010_new_trans_t* cs_0xF010_new_trans_t::default_instance_ = NULL;

cs_0xF010_new_trans_t* cs_0xF010_new_trans_t::New() const {
  return new cs_0xF010_new_trans_t;
}

void cs_0xF010_new_trans_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    step_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF010_new_trans_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step;
        break;
      }

      // required .statlogger.reg_trans_step_t step = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::statlogger::reg_trans_step_t_IsValid(value)) {
            set_step(static_cast< ::statlogger::reg_trans_step_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF010_new_trans_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // required .statlogger.reg_trans_step_t step = 3;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF010_new_trans_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // required .statlogger.reg_trans_step_t step = 3;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF010_new_trans_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // required .statlogger.reg_trans_step_t step = 3;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF010_new_trans_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF010_new_trans_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF010_new_trans_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF010_new_trans_t::MergeFrom(const cs_0xF010_new_trans_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF010_new_trans_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF010_new_trans_t::CopyFrom(const cs_0xF010_new_trans_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF010_new_trans_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF010_new_trans_t::Swap(cs_0xF010_new_trans_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF010_new_trans_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF010_new_trans_t_descriptor_;
  metadata.reflection = cs_0xF010_new_trans_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF010_new_trans_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF010_new_trans_t::sc_0xF010_new_trans_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF010_new_trans_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF010_new_trans_t::sc_0xF010_new_trans_t(const sc_0xF010_new_trans_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF010_new_trans_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF010_new_trans_t::~sc_0xF010_new_trans_t() {
  SharedDtor();
}

void sc_0xF010_new_trans_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF010_new_trans_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF010_new_trans_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF010_new_trans_t_descriptor_;
}

const sc_0xF010_new_trans_t& sc_0xF010_new_trans_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF010_new_trans_t* sc_0xF010_new_trans_t::default_instance_ = NULL;

sc_0xF010_new_trans_t* sc_0xF010_new_trans_t::New() const {
  return new sc_0xF010_new_trans_t;
}

void sc_0xF010_new_trans_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF010_new_trans_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF010_new_trans_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF010_new_trans_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF010_new_trans_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF010_new_trans_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF010_new_trans_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF010_new_trans_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF010_new_trans_t::MergeFrom(const sc_0xF010_new_trans_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF010_new_trans_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF010_new_trans_t::CopyFrom(const sc_0xF010_new_trans_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF010_new_trans_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF010_new_trans_t::Swap(sc_0xF010_new_trans_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF010_new_trans_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF010_new_trans_t_descriptor_;
  metadata.reflection = sc_0xF010_new_trans_t_reflection_;
  return metadata;
}


// ===================================================================

::std::string* cs_0xF100_custom_t::_default_key_ = NULL;
#ifndef _MSC_VER
const int cs_0xF100_custom_t::kGameFieldNumber;
const int cs_0xF100_custom_t::kUidFieldNumber;
const int cs_0xF100_custom_t::kStidFieldNumber;
const int cs_0xF100_custom_t::kSstidFieldNumber;
const int cs_0xF100_custom_t::kItemFieldNumber;
const int cs_0xF100_custom_t::kOpFieldNumber;
const int cs_0xF100_custom_t::kKeyFieldNumber;
const int cs_0xF100_custom_t::kValueFieldNumber;
#endif  // !_MSC_VER

cs_0xF100_custom_t::cs_0xF100_custom_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_0xF100_custom_t::InitAsDefaultInstance() {
  game_ = const_cast< ::statloggercommon::game_info_t*>(&::statloggercommon::game_info_t::default_instance());
  uid_ = const_cast< ::statloggercommon::user_id_t*>(&::statloggercommon::user_id_t::default_instance());
}

cs_0xF100_custom_t::cs_0xF100_custom_t(const cs_0xF100_custom_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_0xF100_custom_t::SharedCtor() {
  _cached_size_ = 0;
  game_ = NULL;
  uid_ = NULL;
  stid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  op_ = 1;
  key_ = const_cast< ::std::string*>(_default_key_);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_0xF100_custom_t::~cs_0xF100_custom_t() {
  SharedDtor();
}

void cs_0xF100_custom_t::SharedDtor() {
  if (stid_ != &::google::protobuf::internal::kEmptyString) {
    delete stid_;
  }
  if (sstid_ != &::google::protobuf::internal::kEmptyString) {
    delete sstid_;
  }
  if (item_ != &::google::protobuf::internal::kEmptyString) {
    delete item_;
  }
  if (key_ != _default_key_) {
    delete key_;
  }
  if (this != default_instance_) {
    delete game_;
    delete uid_;
  }
}

void cs_0xF100_custom_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_0xF100_custom_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_0xF100_custom_t_descriptor_;
}

const cs_0xF100_custom_t& cs_0xF100_custom_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

cs_0xF100_custom_t* cs_0xF100_custom_t::default_instance_ = NULL;

cs_0xF100_custom_t* cs_0xF100_custom_t::New() const {
  return new cs_0xF100_custom_t;
}

void cs_0xF100_custom_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game()) {
      if (game_ != NULL) game_->::statloggercommon::game_info_t::Clear();
    }
    if (has_uid()) {
      if (uid_ != NULL) uid_->::statloggercommon::user_id_t::Clear();
    }
    if (has_stid()) {
      if (stid_ != &::google::protobuf::internal::kEmptyString) {
        stid_->clear();
      }
    }
    if (has_sstid()) {
      if (sstid_ != &::google::protobuf::internal::kEmptyString) {
        sstid_->clear();
      }
    }
    if (has_item()) {
      if (item_ != &::google::protobuf::internal::kEmptyString) {
        item_->clear();
      }
    }
    op_ = 1;
    if (has_key()) {
      if (key_ != _default_key_) {
        key_->assign(*_default_key_);
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_0xF100_custom_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.game_info_t game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required .statloggercommon.user_id_t uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stid;
        break;
      }

      // required string stid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stid().data(), this->stid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sstid;
        break;
      }

      // required string sstid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sstid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sstid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sstid().data(), this->sstid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item;
        break;
      }

      // optional string item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item().data(), this->item().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_op;
        break;
      }

      // optional .statlogger.op_type_t op = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::statlogger::op_type_t_IsValid(value)) {
            set_op(static_cast< ::statlogger::op_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_key;
        break;
      }

      // optional string key = 7 [default = "key"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_value;
        break;
      }

      // optional double value = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_0xF100_custom_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game(), output);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uid(), output);
  }

  // required string stid = 3;
  if (has_stid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stid().data(), this->stid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stid(), output);
  }

  // required string sstid = 4;
  if (has_sstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sstid().data(), this->sstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sstid(), output);
  }

  // optional string item = 5;
  if (has_item()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->item(), output);
  }

  // optional .statlogger.op_type_t op = 6;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->op(), output);
  }

  // optional string key = 7 [default = "key"];
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->key(), output);
  }

  // optional double value = 8;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_0xF100_custom_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.game_info_t game = 1;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game(), target);
  }

  // required .statloggercommon.user_id_t uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uid(), target);
  }

  // required string stid = 3;
  if (has_stid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stid().data(), this->stid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stid(), target);
  }

  // required string sstid = 4;
  if (has_sstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sstid().data(), this->sstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sstid(), target);
  }

  // optional string item = 5;
  if (has_item()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->item(), target);
  }

  // optional .statlogger.op_type_t op = 6;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->op(), target);
  }

  // optional string key = 7 [default = "key"];
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->key(), target);
  }

  // optional double value = 8;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_0xF100_custom_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.game_info_t game = 1;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }

    // required .statloggercommon.user_id_t uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uid());
    }

    // required string stid = 3;
    if (has_stid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stid());
    }

    // required string sstid = 4;
    if (has_sstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sstid());
    }

    // optional string item = 5;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item());
    }

    // optional .statlogger.op_type_t op = 6;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // optional string key = 7 [default = "key"];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional double value = 8;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_0xF100_custom_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_0xF100_custom_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_0xF100_custom_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_0xF100_custom_t::MergeFrom(const cs_0xF100_custom_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game()) {
      mutable_game()->::statloggercommon::game_info_t::MergeFrom(from.game());
    }
    if (from.has_uid()) {
      mutable_uid()->::statloggercommon::user_id_t::MergeFrom(from.uid());
    }
    if (from.has_stid()) {
      set_stid(from.stid());
    }
    if (from.has_sstid()) {
      set_sstid(from.sstid());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_0xF100_custom_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_0xF100_custom_t::CopyFrom(const cs_0xF100_custom_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_0xF100_custom_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_uid()) {
    if (!this->uid().IsInitialized()) return false;
  }
  return true;
}

void cs_0xF100_custom_t::Swap(cs_0xF100_custom_t* other) {
  if (other != this) {
    std::swap(game_, other->game_);
    std::swap(uid_, other->uid_);
    std::swap(stid_, other->stid_);
    std::swap(sstid_, other->sstid_);
    std::swap(item_, other->item_);
    std::swap(op_, other->op_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_0xF100_custom_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_0xF100_custom_t_descriptor_;
  metadata.reflection = cs_0xF100_custom_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_0xF100_custom_t::kRetFieldNumber;
#endif  // !_MSC_VER

sc_0xF100_custom_t::sc_0xF100_custom_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_0xF100_custom_t::InitAsDefaultInstance() {
  ret_ = const_cast< ::statloggercommon::return_t*>(&::statloggercommon::return_t::default_instance());
}

sc_0xF100_custom_t::sc_0xF100_custom_t(const sc_0xF100_custom_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_0xF100_custom_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_0xF100_custom_t::~sc_0xF100_custom_t() {
  SharedDtor();
}

void sc_0xF100_custom_t::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void sc_0xF100_custom_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_0xF100_custom_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_0xF100_custom_t_descriptor_;
}

const sc_0xF100_custom_t& sc_0xF100_custom_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_statlogger_2eproto();
  return *default_instance_;
}

sc_0xF100_custom_t* sc_0xF100_custom_t::default_instance_ = NULL;

sc_0xF100_custom_t* sc_0xF100_custom_t::New() const {
  return new sc_0xF100_custom_t;
}

void sc_0xF100_custom_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::statloggercommon::return_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_0xF100_custom_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .statloggercommon.return_t ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_0xF100_custom_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_0xF100_custom_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .statloggercommon.return_t ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_0xF100_custom_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .statloggercommon.return_t ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_0xF100_custom_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_0xF100_custom_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_0xF100_custom_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_0xF100_custom_t::MergeFrom(const sc_0xF100_custom_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::statloggercommon::return_t::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_0xF100_custom_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_0xF100_custom_t::CopyFrom(const sc_0xF100_custom_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_0xF100_custom_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sc_0xF100_custom_t::Swap(sc_0xF100_custom_t* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_0xF100_custom_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_0xF100_custom_t_descriptor_;
  metadata.reflection = sc_0xF100_custom_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace statlogger

// @@protoc_insertion_point(global_scope)
