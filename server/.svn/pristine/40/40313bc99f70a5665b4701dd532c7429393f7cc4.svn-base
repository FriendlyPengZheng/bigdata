// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app_login_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "app_login_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace StatAppLoginProto {

namespace {

const ::google_public::protobuf::Descriptor* StatAppLoginRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  StatAppLoginRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* StatAppLoginResponse_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  StatAppLoginResponse_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* StatAppLogoutRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  StatAppLogoutRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* StatAppChangeUserRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  StatAppChangeUserRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_app_5flogin_5frequest_2eproto() {
  protobuf_AddDesc_app_5flogin_5frequest_2eproto();
  const ::google_public::protobuf::FileDescriptor* file =
    ::google_public::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "app_login_request.proto");
  GOOGLE_CHECK(file != NULL);
  StatAppLoginRequest_descriptor_ = file->message_type(0);
  static const int StatAppLoginRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppLoginRequest, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppLoginRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppLoginRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppLoginRequest, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppLoginRequest, mobile_),
  };
  StatAppLoginRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      StatAppLoginRequest_descriptor_,
      StatAppLoginRequest::default_instance_,
      StatAppLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppLoginRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(StatAppLoginRequest));
  StatAppLoginResponse_descriptor_ = file->message_type(1);
  static const int StatAppLoginResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppLoginResponse, ret_),
  };
  StatAppLoginResponse_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      StatAppLoginResponse_descriptor_,
      StatAppLoginResponse::default_instance_,
      StatAppLoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppLoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppLoginResponse, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(StatAppLoginResponse));
  StatAppLogoutRequest_descriptor_ = file->message_type(2);
  static const int StatAppLogoutRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppLogoutRequest, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppLogoutRequest, token_),
  };
  StatAppLogoutRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      StatAppLogoutRequest_descriptor_,
      StatAppLogoutRequest::default_instance_,
      StatAppLogoutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppLogoutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppLogoutRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(StatAppLogoutRequest));
  StatAppChangeUserRequest_descriptor_ = file->message_type(3);
  static const int StatAppChangeUserRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppChangeUserRequest, old_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppChangeUserRequest, new_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppChangeUserRequest, new_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppChangeUserRequest, token_),
  };
  StatAppChangeUserRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      StatAppChangeUserRequest_descriptor_,
      StatAppChangeUserRequest::default_instance_,
      StatAppChangeUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppChangeUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatAppChangeUserRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(StatAppChangeUserRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_public::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_app_5flogin_5frequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatAppLoginRequest_descriptor_, &StatAppLoginRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatAppLoginResponse_descriptor_, &StatAppLoginResponse::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatAppLogoutRequest_descriptor_, &StatAppLogoutRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatAppChangeUserRequest_descriptor_, &StatAppChangeUserRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_app_5flogin_5frequest_2eproto() {
  delete StatAppLoginRequest::default_instance_;
  delete StatAppLoginRequest_reflection_;
  delete StatAppLoginResponse::default_instance_;
  delete StatAppLoginResponse_reflection_;
  delete StatAppLogoutRequest::default_instance_;
  delete StatAppLogoutRequest_reflection_;
  delete StatAppChangeUserRequest::default_instance_;
  delete StatAppChangeUserRequest_reflection_;
}

void protobuf_AddDesc_app_5flogin_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_public::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027app_login_request.proto\022\021StatAppLoginP"
    "roto\"n\n\023StatAppLoginRequest\022\021\n\tuser_name"
    "\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\022\r\n\005token\030\003 \002(\t\022"
    "\023\n\013device_type\030\004 \002(\t\022\016\n\006mobile\030\005 \002(\t\"#\n\024"
    "StatAppLoginResponse\022\013\n\003ret\030\001 \002(\r\"8\n\024Sta"
    "tAppLogoutRequest\022\021\n\tuser_name\030\001 \002(\t\022\r\n\005"
    "token\030\002 \002(\t\"c\n\030StatAppChangeUserRequest\022"
    "\020\n\010old_user\030\001 \002(\t\022\020\n\010new_user\030\002 \002(\t\022\024\n\014n"
    "ew_password\030\003 \002(\t\022\r\n\005token\030\004 \002(\tB\020\n\016stat"
    "_app_proto", 370);
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "app_login_request.proto", &protobuf_RegisterTypes);
  StatAppLoginRequest::default_instance_ = new StatAppLoginRequest();
  StatAppLoginResponse::default_instance_ = new StatAppLoginResponse();
  StatAppLogoutRequest::default_instance_ = new StatAppLogoutRequest();
  StatAppChangeUserRequest::default_instance_ = new StatAppChangeUserRequest();
  StatAppLoginRequest::default_instance_->InitAsDefaultInstance();
  StatAppLoginResponse::default_instance_->InitAsDefaultInstance();
  StatAppLogoutRequest::default_instance_->InitAsDefaultInstance();
  StatAppChangeUserRequest::default_instance_->InitAsDefaultInstance();
  ::google_public::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_app_5flogin_5frequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_app_5flogin_5frequest_2eproto {
  StaticDescriptorInitializer_app_5flogin_5frequest_2eproto() {
    protobuf_AddDesc_app_5flogin_5frequest_2eproto();
  }
} static_descriptor_initializer_app_5flogin_5frequest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StatAppLoginRequest::kUserNameFieldNumber;
const int StatAppLoginRequest::kPasswordFieldNumber;
const int StatAppLoginRequest::kTokenFieldNumber;
const int StatAppLoginRequest::kDeviceTypeFieldNumber;
const int StatAppLoginRequest::kMobileFieldNumber;
#endif  // !_MSC_VER

StatAppLoginRequest::StatAppLoginRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void StatAppLoginRequest::InitAsDefaultInstance() {
}

StatAppLoginRequest::StatAppLoginRequest(const StatAppLoginRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatAppLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  device_type_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  mobile_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatAppLoginRequest::~StatAppLoginRequest() {
  SharedDtor();
}

void StatAppLoginRequest::SharedDtor() {
  if (user_name_ != &::google_public::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (password_ != &::google_public::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (device_type_ != &::google_public::protobuf::internal::kEmptyString) {
    delete device_type_;
  }
  if (mobile_ != &::google_public::protobuf::internal::kEmptyString) {
    delete mobile_;
  }
  if (this != default_instance_) {
  }
}

void StatAppLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* StatAppLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatAppLoginRequest_descriptor_;
}

const StatAppLoginRequest& StatAppLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_5flogin_5frequest_2eproto();
  return *default_instance_;
}

StatAppLoginRequest* StatAppLoginRequest::default_instance_ = NULL;

StatAppLoginRequest* StatAppLoginRequest::New() const {
  return new StatAppLoginRequest;
}

void StatAppLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google_public::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google_public::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google_public::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_device_type()) {
      if (device_type_ != &::google_public::protobuf::internal::kEmptyString) {
        device_type_->clear();
      }
    }
    if (has_mobile()) {
      if (mobile_ != &::google_public::protobuf::internal::kEmptyString) {
        mobile_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatAppLoginRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // required string token = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device_type;
        break;
      }

      // required string device_type = 4;
      case 4: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_type:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_type().data(), this->device_type().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mobile;
        break;
      }

      // required string mobile = 5;
      case 5: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile().data(), this->mobile().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatAppLoginRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // required string token = 3;
  if (has_token()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  // required string device_type = 4;
  if (has_device_type()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_type().data(), this->device_type().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      4, this->device_type(), output);
  }

  // required string mobile = 5;
  if (has_mobile()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      5, this->mobile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* StatAppLoginRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required string token = 3;
  if (has_token()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // required string device_type = 4;
  if (has_device_type()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_type().data(), this->device_type().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device_type(), target);
  }

  // required string mobile = 5;
  if (has_mobile()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mobile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatAppLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required string device_type = 4;
    if (has_device_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->device_type());
    }

    // required string mobile = 5;
    if (has_mobile()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatAppLoginRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatAppLoginRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const StatAppLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatAppLoginRequest::MergeFrom(const StatAppLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatAppLoginRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatAppLoginRequest::CopyFrom(const StatAppLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatAppLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void StatAppLoginRequest::Swap(StatAppLoginRequest* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(password_, other->password_);
    std::swap(token_, other->token_);
    std::swap(device_type_, other->device_type_);
    std::swap(mobile_, other->mobile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata StatAppLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = StatAppLoginRequest_descriptor_;
  metadata.reflection = StatAppLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatAppLoginResponse::kRetFieldNumber;
#endif  // !_MSC_VER

StatAppLoginResponse::StatAppLoginResponse()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void StatAppLoginResponse::InitAsDefaultInstance() {
}

StatAppLoginResponse::StatAppLoginResponse(const StatAppLoginResponse& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatAppLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatAppLoginResponse::~StatAppLoginResponse() {
  SharedDtor();
}

void StatAppLoginResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatAppLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* StatAppLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatAppLoginResponse_descriptor_;
}

const StatAppLoginResponse& StatAppLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_5flogin_5frequest_2eproto();
  return *default_instance_;
}

StatAppLoginResponse* StatAppLoginResponse::default_instance_ = NULL;

StatAppLoginResponse* StatAppLoginResponse::New() const {
  return new StatAppLoginResponse;
}

void StatAppLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatAppLoginResponse::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::uint32, ::google_public::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatAppLoginResponse::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* StatAppLoginResponse::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatAppLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatAppLoginResponse::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatAppLoginResponse* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const StatAppLoginResponse*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatAppLoginResponse::MergeFrom(const StatAppLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatAppLoginResponse::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatAppLoginResponse::CopyFrom(const StatAppLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatAppLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StatAppLoginResponse::Swap(StatAppLoginResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata StatAppLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = StatAppLoginResponse_descriptor_;
  metadata.reflection = StatAppLoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatAppLogoutRequest::kUserNameFieldNumber;
const int StatAppLogoutRequest::kTokenFieldNumber;
#endif  // !_MSC_VER

StatAppLogoutRequest::StatAppLogoutRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void StatAppLogoutRequest::InitAsDefaultInstance() {
}

StatAppLogoutRequest::StatAppLogoutRequest(const StatAppLogoutRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatAppLogoutRequest::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatAppLogoutRequest::~StatAppLogoutRequest() {
  SharedDtor();
}

void StatAppLogoutRequest::SharedDtor() {
  if (user_name_ != &::google_public::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void StatAppLogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* StatAppLogoutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatAppLogoutRequest_descriptor_;
}

const StatAppLogoutRequest& StatAppLogoutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_5flogin_5frequest_2eproto();
  return *default_instance_;
}

StatAppLogoutRequest* StatAppLogoutRequest::default_instance_ = NULL;

StatAppLogoutRequest* StatAppLogoutRequest::New() const {
  return new StatAppLogoutRequest;
}

void StatAppLogoutRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google_public::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google_public::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatAppLogoutRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatAppLogoutRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* StatAppLogoutRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatAppLogoutRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatAppLogoutRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatAppLogoutRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const StatAppLogoutRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatAppLogoutRequest::MergeFrom(const StatAppLogoutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatAppLogoutRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatAppLogoutRequest::CopyFrom(const StatAppLogoutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatAppLogoutRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StatAppLogoutRequest::Swap(StatAppLogoutRequest* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata StatAppLogoutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = StatAppLogoutRequest_descriptor_;
  metadata.reflection = StatAppLogoutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatAppChangeUserRequest::kOldUserFieldNumber;
const int StatAppChangeUserRequest::kNewUserFieldNumber;
const int StatAppChangeUserRequest::kNewPasswordFieldNumber;
const int StatAppChangeUserRequest::kTokenFieldNumber;
#endif  // !_MSC_VER

StatAppChangeUserRequest::StatAppChangeUserRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void StatAppChangeUserRequest::InitAsDefaultInstance() {
}

StatAppChangeUserRequest::StatAppChangeUserRequest(const StatAppChangeUserRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatAppChangeUserRequest::SharedCtor() {
  _cached_size_ = 0;
  old_user_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  new_user_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  new_password_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatAppChangeUserRequest::~StatAppChangeUserRequest() {
  SharedDtor();
}

void StatAppChangeUserRequest::SharedDtor() {
  if (old_user_ != &::google_public::protobuf::internal::kEmptyString) {
    delete old_user_;
  }
  if (new_user_ != &::google_public::protobuf::internal::kEmptyString) {
    delete new_user_;
  }
  if (new_password_ != &::google_public::protobuf::internal::kEmptyString) {
    delete new_password_;
  }
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void StatAppChangeUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* StatAppChangeUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatAppChangeUserRequest_descriptor_;
}

const StatAppChangeUserRequest& StatAppChangeUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_5flogin_5frequest_2eproto();
  return *default_instance_;
}

StatAppChangeUserRequest* StatAppChangeUserRequest::default_instance_ = NULL;

StatAppChangeUserRequest* StatAppChangeUserRequest::New() const {
  return new StatAppChangeUserRequest;
}

void StatAppChangeUserRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_old_user()) {
      if (old_user_ != &::google_public::protobuf::internal::kEmptyString) {
        old_user_->clear();
      }
    }
    if (has_new_user()) {
      if (new_user_ != &::google_public::protobuf::internal::kEmptyString) {
        new_user_->clear();
      }
    }
    if (has_new_password()) {
      if (new_password_ != &::google_public::protobuf::internal::kEmptyString) {
        new_password_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google_public::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatAppChangeUserRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string old_user = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_user()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_user().data(), this->old_user().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_user;
        break;
      }

      // required string new_user = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_user:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_user()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_user().data(), this->new_user().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_password;
        break;
      }

      // required string new_password = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_password:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_password()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_password().data(), this->new_password().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // required string token = 4;
      case 4: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatAppChangeUserRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string old_user = 1;
  if (has_old_user()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_user().data(), this->old_user().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->old_user(), output);
  }

  // required string new_user = 2;
  if (has_new_user()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_user().data(), this->new_user().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_user(), output);
  }

  // required string new_password = 3;
  if (has_new_password()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_password().data(), this->new_password().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      3, this->new_password(), output);
  }

  // required string token = 4;
  if (has_token()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* StatAppChangeUserRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string old_user = 1;
  if (has_old_user()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_user().data(), this->old_user().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->old_user(), target);
  }

  // required string new_user = 2;
  if (has_new_user()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_user().data(), this->new_user().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_user(), target);
  }

  // required string new_password = 3;
  if (has_new_password()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_password().data(), this->new_password().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->new_password(), target);
  }

  // required string token = 4;
  if (has_token()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatAppChangeUserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string old_user = 1;
    if (has_old_user()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->old_user());
    }

    // required string new_user = 2;
    if (has_new_user()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->new_user());
    }

    // required string new_password = 3;
    if (has_new_password()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->new_password());
    }

    // required string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatAppChangeUserRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatAppChangeUserRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const StatAppChangeUserRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatAppChangeUserRequest::MergeFrom(const StatAppChangeUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_user()) {
      set_old_user(from.old_user());
    }
    if (from.has_new_user()) {
      set_new_user(from.new_user());
    }
    if (from.has_new_password()) {
      set_new_password(from.new_password());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatAppChangeUserRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatAppChangeUserRequest::CopyFrom(const StatAppChangeUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatAppChangeUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void StatAppChangeUserRequest::Swap(StatAppChangeUserRequest* other) {
  if (other != this) {
    std::swap(old_user_, other->old_user_);
    std::swap(new_user_, other->new_user_);
    std::swap(new_password_, other->new_password_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata StatAppChangeUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = StatAppChangeUserRequest_descriptor_;
  metadata.reflection = StatAppChangeUserRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace StatAppLoginProto

// @@protoc_insertion_point(global_scope)
