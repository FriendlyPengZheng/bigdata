// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: statlogger.common.proto

#ifndef PROTOBUF_statlogger_2ecommon_2eproto__INCLUDED
#define PROTOBUF_statlogger_2ecommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace statloggercommon {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_statlogger_2ecommon_2eproto();
void protobuf_AssignDesc_statlogger_2ecommon_2eproto();
void protobuf_ShutdownFile_statlogger_2ecommon_2eproto();

class game_info_t;
class user_id_t;
class return_t;

// ===================================================================

class game_info_t : public ::google::protobuf::Message {
 public:
  game_info_t();
  virtual ~game_info_t();

  game_info_t(const game_info_t& from);

  inline game_info_t& operator=(const game_info_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_info_t& default_instance();

  void Swap(game_info_t* other);

  // implements Message ----------------------------------------------

  game_info_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_info_t& from);
  void MergeFrom(const game_info_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // optional int32 zoneid = 2 [default = -1];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::int32 zoneid() const;
  inline void set_zoneid(::google::protobuf::int32 value);

  // optional int32 serverid = 3 [default = -1];
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:statloggercommon.game_info_t)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gameid_;
  ::google::protobuf::int32 zoneid_;
  ::google::protobuf::int32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_statlogger_2ecommon_2eproto();
  friend void protobuf_AssignDesc_statlogger_2ecommon_2eproto();
  friend void protobuf_ShutdownFile_statlogger_2ecommon_2eproto();

  void InitAsDefaultInstance();
  static game_info_t* default_instance_;
};
// -------------------------------------------------------------------

class user_id_t : public ::google::protobuf::Message {
 public:
  user_id_t();
  virtual ~user_id_t();

  user_id_t(const user_id_t& from);

  inline user_id_t& operator=(const user_id_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_id_t& default_instance();

  void Swap(user_id_t* other);

  // implements Message ----------------------------------------------

  user_id_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_id_t& from);
  void MergeFrom(const user_id_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional int32 pid = 2 [default = -1];
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 2;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:statloggercommon.user_id_t)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_pid();
  inline void clear_has_pid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 pid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_statlogger_2ecommon_2eproto();
  friend void protobuf_AssignDesc_statlogger_2ecommon_2eproto();
  friend void protobuf_ShutdownFile_statlogger_2ecommon_2eproto();

  void InitAsDefaultInstance();
  static user_id_t* default_instance_;
};
// -------------------------------------------------------------------

class return_t : public ::google::protobuf::Message {
 public:
  return_t();
  virtual ~return_t();

  return_t(const return_t& from);

  inline return_t& operator=(const return_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const return_t& default_instance();

  void Swap(return_t* other);

  // implements Message ----------------------------------------------

  return_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const return_t& from);
  void MergeFrom(const return_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ret = 1 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:statloggercommon.return_t)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_statlogger_2ecommon_2eproto();
  friend void protobuf_AssignDesc_statlogger_2ecommon_2eproto();
  friend void protobuf_ShutdownFile_statlogger_2ecommon_2eproto();

  void InitAsDefaultInstance();
  static return_t* default_instance_;
};
// ===================================================================


// ===================================================================

// game_info_t

// required uint32 gameid = 1;
inline bool game_info_t::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_info_t::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_info_t::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_info_t::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 game_info_t::gameid() const {
  return gameid_;
}
inline void game_info_t::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional int32 zoneid = 2 [default = -1];
inline bool game_info_t::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_info_t::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_info_t::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_info_t::clear_zoneid() {
  zoneid_ = -1;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 game_info_t::zoneid() const {
  return zoneid_;
}
inline void game_info_t::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// optional int32 serverid = 3 [default = -1];
inline bool game_info_t::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_info_t::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_info_t::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_info_t::clear_serverid() {
  serverid_ = -1;
  clear_has_serverid();
}
inline ::google::protobuf::int32 game_info_t::serverid() const {
  return serverid_;
}
inline void game_info_t::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// user_id_t

// required uint32 uid = 1;
inline bool user_id_t::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_id_t::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_id_t::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_id_t::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 user_id_t::uid() const {
  return uid_;
}
inline void user_id_t::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 pid = 2 [default = -1];
inline bool user_id_t::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_id_t::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_id_t::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_id_t::clear_pid() {
  pid_ = -1;
  clear_has_pid();
}
inline ::google::protobuf::int32 user_id_t::pid() const {
  return pid_;
}
inline void user_id_t::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
}

// -------------------------------------------------------------------

// return_t

// optional uint32 ret = 1 [default = 0];
inline bool return_t::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void return_t::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void return_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void return_t::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 return_t::ret() const {
  return ret_;
}
inline void return_t::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace statloggercommon

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_statlogger_2ecommon_2eproto__INCLUDED
