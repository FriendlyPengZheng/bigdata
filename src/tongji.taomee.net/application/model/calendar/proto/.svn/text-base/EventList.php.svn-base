<?php
/**
 * DO NOT EDIT! Generated by TMProtoCompiler!
 * Date: 2014-09-02 16:05:56
 */

class calendar_proto_EventList extends TMProtoMessage
{
    public $event = array();

    public static function descriptor()
    {
        $descriptor = new TMProtoDescriptor(__CLASS__);

        $f = new TMProtoField();
        $f->number     = 1;
        $f->name       = 'event';
        $f->type       = TMProto::TYPE_MESSAGE;
        $f->reference  = 'calendar_proto_Event';
        $f->rule       = TMProto::RULE_REPEATED;
        $f->repeatType = TMProto::TYPE_UINT32;
        $descriptor->addField($f);

        return $descriptor;
    }

    public function hasEvent()
    {
        return $this->has(1);
    }
    
    public function clearEvent()
    {
        return $this->clear(1);
    }
    
    public function getEvent($idx = null)
    {
        return $this->get(1, $idx);
    }
    
    public function setEvent($value, $idx = null)
    {
        return $this->set(1, $value, $idx);
    }
    
    public function getEventList()
    {
        return $this->get(1);
    }
    
    public function addEvent($value)
    {
        return $this->add(1, $value);
    }
    
}


class calendar_proto_Event extends TMProtoMessage
{
    public $type = 1;

    public $time = null;

    public static function descriptor()
    {
        $descriptor = new TMProtoDescriptor(__CLASS__);

        $f = new TMProtoField();
        $f->number     = 1;
        $f->name       = 'type';
        $f->type       = TMProto::TYPE_UINT8;
        $f->rule       = TMProto::RULE_REQUIRED;
        $f->default    = 1;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 2;
        $f->name       = 'time';
        $f->type       = TMProto::TYPE_UINT64;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        return $descriptor;
    }

    public function hasType()
    {
        return $this->has(1);
    }
    
    public function clearType()
    {
        return $this->clear(1);
    }
    
    public function getType()
    {
        return $this->get(1);
    }
    
    public function setType($value)
    {
        return $this->set(1, $value);
    }
    
    public function hasTime()
    {
        return $this->has(2);
    }
    
    public function clearTime()
    {
        return $this->clear(2);
    }
    
    public function getTime()
    {
        return $this->get(2);
    }
    
    public function setTime($value)
    {
        return $this->set(2, $value);
    }
    
}
