<?php
/**
 * DO NOT EDIT! Generated by TMProtoCompiler!
 * Date: 2014-09-03 11:36:34
 */

class backend_proto_DbConfigServer extends TMProtoMessage
{
    public $registerTotal = null;

    public $alarmTotal = null;

    public $info = array();

    public static function descriptor()
    {
        $descriptor = new TMProtoDescriptor(__CLASS__);

        $f = new TMProtoField();
        $f->number     = 1;
        $f->name       = 'registerTotal';
        $f->type       = TMProto::TYPE_UINT16;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 2;
        $f->name       = 'alarmTotal';
        $f->type       = TMProto::TYPE_UINT16;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 3;
        $f->name       = 'info';
        $f->type       = TMProto::TYPE_MESSAGE;
        $f->reference  = 'backend_proto_DbConfigServerInfo';
        $f->rule       = TMProto::RULE_REPEATED;
        $f->repeatType = TMProto::TYPE_UINT16;
        $descriptor->addField($f);

        return $descriptor;
    }

    public function hasRegisterTotal()
    {
        return $this->has(1);
    }
    
    public function clearRegisterTotal()
    {
        return $this->clear(1);
    }
    
    public function getRegisterTotal()
    {
        return $this->get(1);
    }
    
    public function setRegisterTotal($value)
    {
        return $this->set(1, $value);
    }
    
    public function hasAlarmTotal()
    {
        return $this->has(2);
    }
    
    public function clearAlarmTotal()
    {
        return $this->clear(2);
    }
    
    public function getAlarmTotal()
    {
        return $this->get(2);
    }
    
    public function setAlarmTotal($value)
    {
        return $this->set(2, $value);
    }
    
    public function hasInfo()
    {
        return $this->has(3);
    }
    
    public function clearInfo()
    {
        return $this->clear(3);
    }
    
    public function getInfo($idx = null)
    {
        return $this->get(3, $idx);
    }
    
    public function setInfo($value, $idx = null)
    {
        return $this->set(3, $value, $idx);
    }
    
    public function getInfoList()
    {
        return $this->get(3);
    }
    
    public function addInfo($value)
    {
        return $this->add(3, $value);
    }
    
}


class backend_proto_DbConfigServerInfo extends TMProtoMessage
{
    public $ip = null;

    public $port = null;

    public $redFlag = null;

    public $forbiddenFlag = null;

    public $lastHeartBeatTime = null;

    public static function descriptor()
    {
        $descriptor = new TMProtoDescriptor(__CLASS__);

        $f = new TMProtoField();
        $f->number     = 1;
        $f->name       = 'ip';
        $f->type       = TMProto::TYPE_UINT32;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 2;
        $f->name       = 'port';
        $f->type       = TMProto::TYPE_UINT16;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 3;
        $f->name       = 'redFlag';
        $f->type       = TMProto::TYPE_UINT8;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 4;
        $f->name       = 'forbiddenFlag';
        $f->type       = TMProto::TYPE_UINT8;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 5;
        $f->name       = 'lastHeartBeatTime';
        $f->type       = TMProto::TYPE_UINT64;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        return $descriptor;
    }

    public function hasIp()
    {
        return $this->has(1);
    }
    
    public function clearIp()
    {
        return $this->clear(1);
    }
    
    public function getIp()
    {
        return $this->get(1);
    }
    
    public function setIp($value)
    {
        return $this->set(1, $value);
    }
    
    public function hasPort()
    {
        return $this->has(2);
    }
    
    public function clearPort()
    {
        return $this->clear(2);
    }
    
    public function getPort()
    {
        return $this->get(2);
    }
    
    public function setPort($value)
    {
        return $this->set(2, $value);
    }
    
    public function hasRedFlag()
    {
        return $this->has(3);
    }
    
    public function clearRedFlag()
    {
        return $this->clear(3);
    }
    
    public function getRedFlag()
    {
        return $this->get(3);
    }
    
    public function setRedFlag($value)
    {
        return $this->set(3, $value);
    }
    
    public function hasForbiddenFlag()
    {
        return $this->has(4);
    }
    
    public function clearForbiddenFlag()
    {
        return $this->clear(4);
    }
    
    public function getForbiddenFlag()
    {
        return $this->get(4);
    }
    
    public function setForbiddenFlag($value)
    {
        return $this->set(4, $value);
    }
    
    public function hasLastHeartBeatTime()
    {
        return $this->has(5);
    }
    
    public function clearLastHeartBeatTime()
    {
        return $this->clear(5);
    }
    
    public function getLastHeartBeatTime()
    {
        return $this->get(5);
    }
    
    public function setLastHeartBeatTime($value)
    {
        return $this->set(5, $value);
    }
    
}
