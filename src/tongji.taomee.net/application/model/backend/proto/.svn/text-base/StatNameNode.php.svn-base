<?php
/**
 * DO NOT EDIT! Generated by TMProtoCompiler!
 * Date: 2014-09-03 11:36:35
 */

class backend_proto_StatNameNode extends TMProtoMessage
{
    public $registerTotal = null;

    public $alarmTotal = null;

    public $info = array();

    public static function descriptor()
    {
        $descriptor = new TMProtoDescriptor(__CLASS__);

        $f = new TMProtoField();
        $f->number     = 1;
        $f->name       = 'registerTotal';
        $f->type       = TMProto::TYPE_UINT16;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 2;
        $f->name       = 'alarmTotal';
        $f->type       = TMProto::TYPE_UINT16;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 3;
        $f->name       = 'info';
        $f->type       = TMProto::TYPE_MESSAGE;
        $f->reference  = 'backend_proto_StatNamenodeInfo';
        $f->rule       = TMProto::RULE_REPEATED;
        $f->repeatType = TMProto::TYPE_UINT16;
        $descriptor->addField($f);

        return $descriptor;
    }

    public function hasRegisterTotal()
    {
        return $this->has(1);
    }
    
    public function clearRegisterTotal()
    {
        return $this->clear(1);
    }
    
    public function getRegisterTotal()
    {
        return $this->get(1);
    }
    
    public function setRegisterTotal($value)
    {
        return $this->set(1, $value);
    }
    
    public function hasAlarmTotal()
    {
        return $this->has(2);
    }
    
    public function clearAlarmTotal()
    {
        return $this->clear(2);
    }
    
    public function getAlarmTotal()
    {
        return $this->get(2);
    }
    
    public function setAlarmTotal($value)
    {
        return $this->set(2, $value);
    }
    
    public function hasInfo()
    {
        return $this->has(3);
    }
    
    public function clearInfo()
    {
        return $this->clear(3);
    }
    
    public function getInfo($idx = null)
    {
        return $this->get(3, $idx);
    }
    
    public function setInfo($value, $idx = null)
    {
        return $this->set(3, $value, $idx);
    }
    
    public function getInfoList()
    {
        return $this->get(3);
    }
    
    public function addInfo($value)
    {
        return $this->add(3, $value);
    }
    
}


class backend_proto_StatNamenodeInfo extends TMProtoMessage
{
    public $ip = null;

    public $port = null;

    public $redFlag = null;

    public $forbiddenFlag = null;

    public $lastHeartBeatTime = null;

    public $safeMode = null;

    public $configuredSize = null;

    public $presentSize = null;

    public $dfsRemainingSize = null;

    public $dfsUsedSize = null;

    public $dfsUsedPercent = null;

    public $maxDfsUsedPercent = null;

    public $underReplicatedBlocks = null;

    public $missingBlocks = null;

    public $totalDatanodes = null;

    public $liveNodes = null;

    public $deadNodes = null;

    public static function descriptor()
    {
        $descriptor = new TMProtoDescriptor(__CLASS__);

        $f = new TMProtoField();
        $f->number     = 1;
        $f->name       = 'ip';
        $f->type       = TMProto::TYPE_UINT32;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 2;
        $f->name       = 'port';
        $f->type       = TMProto::TYPE_UINT16;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 3;
        $f->name       = 'redFlag';
        $f->type       = TMProto::TYPE_UINT8;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 4;
        $f->name       = 'forbiddenFlag';
        $f->type       = TMProto::TYPE_UINT8;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 5;
        $f->name       = 'lastHeartBeatTime';
        $f->type       = TMProto::TYPE_UINT64;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 6;
        $f->name       = 'safeMode';
        $f->type       = TMProto::TYPE_INT32;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 7;
        $f->name       = 'configuredSize';
        $f->type       = TMProto::TYPE_INT64;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 8;
        $f->name       = 'presentSize';
        $f->type       = TMProto::TYPE_INT64;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 9;
        $f->name       = 'dfsRemainingSize';
        $f->type       = TMProto::TYPE_INT64;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 10;
        $f->name       = 'dfsUsedSize';
        $f->type       = TMProto::TYPE_INT64;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 11;
        $f->name       = 'dfsUsedPercent';
        $f->type       = TMProto::TYPE_FLOAT;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 12;
        $f->name       = 'maxDfsUsedPercent';
        $f->type       = TMProto::TYPE_FLOAT;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 13;
        $f->name       = 'underReplicatedBlocks';
        $f->type       = TMProto::TYPE_INT64;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 14;
        $f->name       = 'missingBlocks';
        $f->type       = TMProto::TYPE_INT64;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 15;
        $f->name       = 'totalDatanodes';
        $f->type       = TMProto::TYPE_INT32;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 16;
        $f->name       = 'liveNodes';
        $f->type       = TMProto::TYPE_INT32;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        $f = new TMProtoField();
        $f->number     = 17;
        $f->name       = 'deadNodes';
        $f->type       = TMProto::TYPE_INT32;
        $f->rule       = TMProto::RULE_REQUIRED;
        $descriptor->addField($f);

        return $descriptor;
    }

    public function hasIp()
    {
        return $this->has(1);
    }
    
    public function clearIp()
    {
        return $this->clear(1);
    }
    
    public function getIp()
    {
        return $this->get(1);
    }
    
    public function setIp($value)
    {
        return $this->set(1, $value);
    }
    
    public function hasPort()
    {
        return $this->has(2);
    }
    
    public function clearPort()
    {
        return $this->clear(2);
    }
    
    public function getPort()
    {
        return $this->get(2);
    }
    
    public function setPort($value)
    {
        return $this->set(2, $value);
    }
    
    public function hasRedFlag()
    {
        return $this->has(3);
    }
    
    public function clearRedFlag()
    {
        return $this->clear(3);
    }
    
    public function getRedFlag()
    {
        return $this->get(3);
    }
    
    public function setRedFlag($value)
    {
        return $this->set(3, $value);
    }
    
    public function hasForbiddenFlag()
    {
        return $this->has(4);
    }
    
    public function clearForbiddenFlag()
    {
        return $this->clear(4);
    }
    
    public function getForbiddenFlag()
    {
        return $this->get(4);
    }
    
    public function setForbiddenFlag($value)
    {
        return $this->set(4, $value);
    }
    
    public function hasLastHeartBeatTime()
    {
        return $this->has(5);
    }
    
    public function clearLastHeartBeatTime()
    {
        return $this->clear(5);
    }
    
    public function getLastHeartBeatTime()
    {
        return $this->get(5);
    }
    
    public function setLastHeartBeatTime($value)
    {
        return $this->set(5, $value);
    }
    
    public function hasSafeMode()
    {
        return $this->has(6);
    }
    
    public function clearSafeMode()
    {
        return $this->clear(6);
    }
    
    public function getSafeMode()
    {
        return $this->get(6);
    }
    
    public function setSafeMode($value)
    {
        return $this->set(6, $value);
    }
    
    public function hasConfiguredSize()
    {
        return $this->has(7);
    }
    
    public function clearConfiguredSize()
    {
        return $this->clear(7);
    }
    
    public function getConfiguredSize()
    {
        return $this->get(7);
    }
    
    public function setConfiguredSize($value)
    {
        return $this->set(7, $value);
    }
    
    public function hasPresentSize()
    {
        return $this->has(8);
    }
    
    public function clearPresentSize()
    {
        return $this->clear(8);
    }
    
    public function getPresentSize()
    {
        return $this->get(8);
    }
    
    public function setPresentSize($value)
    {
        return $this->set(8, $value);
    }
    
    public function hasDfsRemainingSize()
    {
        return $this->has(9);
    }
    
    public function clearDfsRemainingSize()
    {
        return $this->clear(9);
    }
    
    public function getDfsRemainingSize()
    {
        return $this->get(9);
    }
    
    public function setDfsRemainingSize($value)
    {
        return $this->set(9, $value);
    }
    
    public function hasDfsUsedSize()
    {
        return $this->has(10);
    }
    
    public function clearDfsUsedSize()
    {
        return $this->clear(10);
    }
    
    public function getDfsUsedSize()
    {
        return $this->get(10);
    }
    
    public function setDfsUsedSize($value)
    {
        return $this->set(10, $value);
    }
    
    public function hasDfsUsedPercent()
    {
        return $this->has(11);
    }
    
    public function clearDfsUsedPercent()
    {
        return $this->clear(11);
    }
    
    public function getDfsUsedPercent()
    {
        return $this->get(11);
    }
    
    public function setDfsUsedPercent($value)
    {
        return $this->set(11, $value);
    }
    
    public function hasMaxDfsUsedPercent()
    {
        return $this->has(12);
    }
    
    public function clearMaxDfsUsedPercent()
    {
        return $this->clear(12);
    }
    
    public function getMaxDfsUsedPercent()
    {
        return $this->get(12);
    }
    
    public function setMaxDfsUsedPercent($value)
    {
        return $this->set(12, $value);
    }
    
    public function hasUnderReplicatedBlocks()
    {
        return $this->has(13);
    }
    
    public function clearUnderReplicatedBlocks()
    {
        return $this->clear(13);
    }
    
    public function getUnderReplicatedBlocks()
    {
        return $this->get(13);
    }
    
    public function setUnderReplicatedBlocks($value)
    {
        return $this->set(13, $value);
    }
    
    public function hasMissingBlocks()
    {
        return $this->has(14);
    }
    
    public function clearMissingBlocks()
    {
        return $this->clear(14);
    }
    
    public function getMissingBlocks()
    {
        return $this->get(14);
    }
    
    public function setMissingBlocks($value)
    {
        return $this->set(14, $value);
    }
    
    public function hasTotalDatanodes()
    {
        return $this->has(15);
    }
    
    public function clearTotalDatanodes()
    {
        return $this->clear(15);
    }
    
    public function getTotalDatanodes()
    {
        return $this->get(15);
    }
    
    public function setTotalDatanodes($value)
    {
        return $this->set(15, $value);
    }
    
    public function hasLiveNodes()
    {
        return $this->has(16);
    }
    
    public function clearLiveNodes()
    {
        return $this->clear(16);
    }
    
    public function getLiveNodes()
    {
        return $this->get(16);
    }
    
    public function setLiveNodes($value)
    {
        return $this->set(16, $value);
    }
    
    public function hasDeadNodes()
    {
        return $this->has(17);
    }
    
    public function clearDeadNodes()
    {
        return $this->clear(17);
    }
    
    public function getDeadNodes()
    {
        return $this->get(17);
    }
    
    public function setDeadNodes($value)
    {
        return $this->set(17, $value);
    }
    
}
