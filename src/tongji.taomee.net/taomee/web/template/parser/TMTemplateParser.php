<?php
class TP_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    public function __construct($s, $m = array())
    {
        if ($s instanceof TP_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof TP_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    public function __toString()
    {
        return $this->_string;
    }

    public function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    public function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    public function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof TP_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);

                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof TP_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    public function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};


#line 3 "TMTemplateParser.y"
class TMTemplateParser#line 80 "TMTemplateParser.php"
{
#line 5 "TMTemplateParser.y"

    public $lex;
    public $compiler;
    public $template;
    public $tpl;

    public $isXml;
    public $aspTags;
    public $currentBuffer;
    public $rootBuffer;

    public $retValue = 0;

    public static $prefixNumber = 0;
    public $strip = false;

    function __construct($lex, $compiler)
    {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->template = $this->compiler->template;
        $this->tpl = $this->compiler->tpl;

        $this->compiler->hasVariableString = false;
        $this->compiler->prefixCode = array();
        $this->blockNestingLevel = 0;
        $this->isXml = false;
        $this->currentBuffer = $this->rootBuffer = new TMTemplateBuffer($this);
    }

    public static function escapeStartTag($tagText)
    {
        $tag = preg_replace('/\A<\?(.*)\z/', '<<?php ?>?\1', $tagText, -1 , $count); // Escape tag
        return $tag;
    }

    public static function escapeEndTag($tagText)
    {
        return '?<?php ?>>';
    }

    public function compileVariable($variable)
    {
        if (strpos($variable,'(') == 0) {
            // not a variable variable
            $var = trim($variable, '\'');
            $this->compiler->tagNoCache = $this->compiler->tagNoCache | $this->tpl->getVariable($var, null, true, false)->noCache;
            $this->tpl->properties['variables'][$var] = $this->compiler->tagNoCache | $this->compiler->noCache;
        }
        return '$_tpl->tplVars[' . $variable . ']->value';
    }
#line 135 "TMTemplateParser.php"

    const TP_VERT                           =  1;
    const TP_COLON                          =  2;
    const TP_RDEL                           =  3;
    const TP_COMMENT                        =  4;
    const TP_PHPSTARTTAG                    =  5;
    const TP_PHPENDTAG                      =  6;
    const TP_ASPSTARTTAG                    =  7;
    const TP_ASPENDTAG                      =  8;
    const TP_FAKEPHPSTARTTAG                =  9;
    const TP_XMLTAG                         = 10;
    const TP_TEXT                           = 11;
    const TP_STRIPON                        = 12;
    const TP_STRIPOFF                       = 13;
    const TP_BLOCKSOURCE                    = 14;
    const TP_LITERALSTART                   = 15;
    const TP_LITERALEND                     = 16;
    const TP_LITERAL                        = 17;
    const TP_LDEL                           = 18;
    const TP_ID                             = 19;
    const TP_PTR                            = 20;
    const TP_LDELIF                         = 21;
    const TP_LDELFOR                        = 22;
    const TP_SEMICOLON                      = 23;
    const TP_DOLLAR                         = 24;
    const TP_EQUAL                          = 25;
    const TP_INCDEC                         = 26;
    const TP_TO                             = 27;
    const TP_STEP                           = 28;
    const TP_LDELFOREACH                    = 29;
    const TP_SPACE                          = 30;
    const TP_AS                             = 31;
    const TP_APTR                           = 32;
    const TP_TEMPLATEBLOCKCHILDPARENT       = 33;
    const TP_LDELSLASH                      = 34;
    const TP_ATTR                           = 35;
    const TP_INTEGER                        = 36;
    const TP_COMMA                          = 37;
    const TP_OPENP                          = 38;
    const TP_CLOSEP                         = 39;
    const TP_MATH                           = 40;
    const TP_UNIMATH                        = 41;
    const TP_ANDSYM                         = 42;
    const TP_INSTANCEOF                     = 43;
    const TP_QMARK                          = 44;
    const TP_NOT                            = 45;
    const TP_TYPECAST                       = 46;
    const TP_HEX                            = 47;
    const TP_DOT                            = 48;
    const TP_SINGLEQUOTESTRING              = 49;
    const TP_DOUBLECOLON                    = 50;
    const TP_AT                             = 51;
    const TP_OPENB                          = 52;
    const TP_CLOSEB                         = 53;
    const TP_EQUALS                         = 54;
    const TP_NOTEQUALS                      = 55;
    const TP_GREATERTHAN                    = 56;
    const TP_LESSTHAN                       = 57;
    const TP_GREATEREQUAL                   = 58;
    const TP_LESSEQUAL                      = 59;
    const TP_IDENTITY                       = 60;
    const TP_NONEIDENTITY                   = 61;
    const TP_MOD                            = 62;
    const TP_LAND                           = 63;
    const TP_LOR                            = 64;
    const TP_LXOR                           = 65;
    const TP_QUOTE                          = 66;
    const TP_BACKTICK                       = 67;
    const TP_DOLLARID                       = 68;
    const YY_NO_ACTION = 454;
    const YY_ACCEPT_ACTION = 453;
    const YY_ERROR_ACTION = 452;

    const YY_SZ_ACTTAB = 1586;
static public $yy_action = array(
 /*     0 */     8,   84,  133,    3,   55,  132,  103,   19,  205,  208,
 /*    10 */   345,  109,  208,   16,   22,  251,  166,  113,  184,   15,
 /*    20 */    20,  163,   23,   40,   13,  204,  207,   38,   36,  219,
 /*    30 */   183,  284,  181,  112,    1,    8,  150,  345,    3,   55,
 /*    40 */   252,  103,  345,   14,  280,    2,  109,   95,   49,   92,
 /*    50 */    33,  166,  162,  184,   34,   20,    2,  105,   40,   19,
 /*    60 */   205,  281,   38,   36,  219,  183,  284,   15,  105,    1,
 /*    70 */   255,   15,   13,  177,   19,  205,   13,   42,   37,   39,
 /*    80 */     6,   21,  193,   49,   82,  262,  453,   48,  191,  168,
 /*    90 */   231,  246,  274,  275,  276,  273,  272,  268,  269,  270,
 /*   100 */   271,  277,  278,   27,  265,  198,   32,   15,   15,   19,
 /*   110 */   205,    9,   13,   13,    3,   55,  117,  118,   42,   37,
 /*   120 */    39,   15,  109,  208,  208,  162,   13,  166,   16,   22,
 /*   130 */    19,  205,  246,  274,  275,  276,  273,  272,  268,  269,
 /*   140 */   270,  271,  277,  278,  232,  168,  231,   29,  124,  135,
 /*   150 */   260,    8,  150,   98,    3,   55,  320,  103,  250,  249,
 /*   160 */    28,  263,  109,  173,   27,  119,  200,  166,  110,  184,
 /*   170 */    18,   20,  208,  178,   40,   13,   16,   22,   38,   36,
 /*   180 */   219,  183,  284,   15,   93,    1,    8,  144,   13,    3,
 /*   190 */    55,    2,  103,   19,  205,  347,   17,  109,  102,   49,
 /*   200 */   115,  128,  166,  105,  159,  161,   20,  208,  208,   40,
 /*   210 */   186,   16,   22,   38,   36,  219,  183,  284,   15,  174,
 /*   220 */     1,  204,  347,   13,   35,   51,  175,  347,   42,   37,
 /*   230 */    39,   19,  205,  148,   49,   41,  283,   10,  140,  260,
 /*   240 */   279,  113,  246,  274,  275,  276,  273,  272,  268,  269,
 /*   250 */   270,  271,  277,  278,  234,  230,  226,  227,  228,  229,
 /*   260 */   235,  236,  242,  243,  244,  138,  344,  264,    8,  148,
 /*   270 */     7,    3,   55,   10,    8,  150,  126,    3,   55,  109,
 /*   280 */   108,  164,  152,  208,  166,  109,  261,  187,   19,  205,
 /*   290 */   166,  233,  184,  344,   20,   12,  204,   40,  344,    2,
 /*   300 */   131,   38,   36,  219,  183,  284,   41,  208,    1,    8,
 /*   310 */   150,  105,    3,   55,  347,   94,   19,  205,   88,   53,
 /*   320 */   109,   91,   49,   12,  202,  166,  316,  184,  111,    4,
 /*   330 */   187,  266,   40,  279,  279,  204,   38,   36,  219,  183,
 /*   340 */   284,  347,  179,    1,    8,  149,  347,    3,   55,  175,
 /*   350 */   103,   19,  185,   15,   41,  109,  130,   49,   13,   31,
 /*   360 */   166,  120,  184,  208,   20,  174,   41,   40,  208,   50,
 /*   370 */    41,   38,   36,  219,  183,  284,  204,  139,    1,    8,
 /*   380 */   150,  172,    3,   55,  279,  103,   27,  187,  199,  247,
 /*   390 */   109,  107,   49,   30,  221,  166,   87,  184,  116,   24,
 /*   400 */   215,  114,   40,   16,   22,  208,   38,   36,  219,  183,
 /*   410 */   284,  279,  221,    6,    8,  155,  279,    3,   55,  134,
 /*   420 */   103,  121,  238,  204,  237,  109,  208,   49,   97,  113,
 /*   430 */   166,  286,  184,  136,   24,  257,  182,   40,  112,  216,
 /*   440 */   218,   38,   36,  219,  183,  284,  137,  260,   90,   96,
 /*   450 */    42,   37,   39,  100,  188,  245,  285,  203,  254,   95,
 /*   460 */    19,  169,   49,  279,  246,  274,  275,  276,  273,  272,
 /*   470 */   268,  269,  270,  271,  277,  278,  267,  123,   42,   37,
 /*   480 */    39,  129,  104,  204,  208,  106,   11,  282,    5,  196,
 /*   490 */    85,  253,  246,  274,  275,  276,  273,  272,  268,  269,
 /*   500 */   270,  271,  277,  278,  189,  279,   52,  225,  210,  211,
 /*   510 */   212,  224,  170,   42,   37,   39,  221,  138,  240,  239,
 /*   520 */    23,  279,  206,  141,   99,  195,   41,  246,  274,  275,
 /*   530 */   276,  273,  272,  268,  269,  270,  271,  277,  278,  279,
 /*   540 */   167,   42,   37,   39,  122,  209,  283,  201,  197,  180,
 /*   550 */   113,  287,  125,  204,   83,  246,  274,  275,  276,  273,
 /*   560 */   272,  268,  269,  270,  271,  277,  278,  194,   42,   37,
 /*   570 */    39,   26,   54,   25,  127,  241,  273,  273,  273,  273,
 /*   580 */   273,  273,  246,  274,  275,  276,  273,  272,  268,  269,
 /*   590 */   270,  271,  277,  278,  273,  273,  273,  273,  273,  273,
 /*   600 */   273,  273,  273,  273,  273,  273,  273,  273,  273,   42,
 /*   610 */    37,   39,  273,  143,  273,  273,  273,  273,  273,  273,
 /*   620 */   273,  273,  273,  246,  274,  275,  276,  273,  272,  268,
 /*   630 */   269,  270,  271,  277,  278,  273,  273,  273,  273,  273,
 /*   640 */   182,  273,  273,  273,  171,  273,   47,  101,  273,  273,
 /*   650 */    42,   37,   39,   89,  213,  217,  273,  273,  188,  245,
 /*   660 */   285,  273,  254,  273,  246,  274,  275,  276,  273,  272,
 /*   670 */   268,  269,  270,  271,  277,  278,  273,  273,  273,  273,
 /*   680 */   273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
 /*   690 */   165,   42,   37,   39,  142,  273,  273,  273,  273,  273,
 /*   700 */   273,  273,  273,  273,  273,  246,  274,  275,  276,  273,
 /*   710 */   272,  268,  269,  270,  271,  277,  278,  273,  273,  273,
 /*   720 */   273,  182,  273,  273,  273,  171,  273,   65,  172,  273,
 /*   730 */   273,   42,   37,   39,   89,  213,  217,  273,  273,  188,
 /*   740 */   245,  285,  273,  254,  273,  246,  274,  275,  276,  273,
 /*   750 */   272,  268,  269,  270,  271,  277,  278,   42,   37,   39,
 /*   760 */   273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
 /*   770 */   273,  246,  274,  275,  276,  273,  272,  268,  269,  270,
 /*   780 */   271,  277,  278,  176,  256,  273,  273,  273,  273,  273,
 /*   790 */   273,  273,   42,   37,   39,  273,  273,  273,  273,  273,
 /*   800 */   273,  273,  273,  273,  273,  273,  246,  274,  275,  276,
 /*   810 */   273,  272,  268,  269,  270,  271,  277,  278,   42,   37,
 /*   820 */    39,  273,  273,  273,  273,  273,  273,  273,  273,  273,
 /*   830 */   273,  273,  246,  274,  275,  276,  273,  272,  268,  269,
 /*   840 */   270,  271,  277,  278,  273,  182,  273,  273,  273,  160,
 /*   850 */   273,   79,  273,  273,  273,  273,  273,  273,   96,  213,
 /*   860 */   217,  273,  273,  188,  245,  285,  182,  254,  273,  273,
 /*   870 */   171,  273,   69,  273,  273,  154,  259,  273,  273,   96,
 /*   880 */   213,  217,  273,  182,  188,  245,  285,  171,  254,   69,
 /*   890 */   273,  273,  273,  273,  273,  158,   96,  213,  217,  273,
 /*   900 */   273,  188,  245,  285,  273,  254,  273,  182,  273,  273,
 /*   910 */   273,  160,  156,   79,  273,  273,  273,  273,  273,  273,
 /*   920 */    96,  213,  217,  273,  273,  188,  245,  285,  273,  254,
 /*   930 */   273,  273,  273,  182,  273,  273,  273,  171,  258,   69,
 /*   940 */   273,  273,  273,  273,  273,  273,   96,  213,  217,  273,
 /*   950 */   182,  188,  245,  285,  171,  254,   68,  273,  273,  273,
 /*   960 */   273,  273,  157,   96,  213,  217,  273,  273,  188,  245,
 /*   970 */   285,  182,  254,  273,  273,  171,  273,   46,  273,  273,
 /*   980 */   273,  273,  273,  273,   96,  213,  217,  273,  273,  188,
 /*   990 */   245,  285,  273,  254,  182,  273,  273,  273,  171,  273,
 /*  1000 */    80,  273,  273,  273,  273,  273,  273,   96,  213,  217,
 /*  1010 */   273,  182,  188,  245,  285,  171,  254,   43,  273,  273,
 /*  1020 */   273,  273,  273,  273,   96,  213,  217,  273,  182,  188,
 /*  1030 */   245,  285,  171,  254,   56,  273,  273,  273,  273,  273,
 /*  1040 */   273,   96,  213,  217,  273,  182,  188,  245,  285,  171,
 /*  1050 */   254,   64,  273,  273,  273,  273,  273,  273,   96,  213,
 /*  1060 */   217,  273,  273,  153,  245,  285,  273,  254,  182,  273,
 /*  1070 */   273,  273,  171,  273,   75,  273,  273,  273,  273,  273,
 /*  1080 */   273,   96,  213,  217,  273,  182,  188,  245,  285,  147,
 /*  1090 */   254,   78,  273,  273,  273,  273,  273,  273,   96,  213,
 /*  1100 */   217,  273,  182,  188,  245,  285,  171,  254,   71,  273,
 /*  1110 */   273,  273,  273,  273,  273,   96,  213,  217,  273,  182,
 /*  1120 */   188,  245,  285,  171,  254,   74,  273,  273,  273,  273,
 /*  1130 */   273,  273,   96,  213,  217,  273,  273,  188,  245,  285,
 /*  1140 */   273,  254,  182,  273,  273,  273,  171,  273,   59,  273,
 /*  1150 */   273,  273,  273,  273,  273,   96,  213,  217,  273,  182,
 /*  1160 */   188,  245,  285,  145,  254,   61,  273,  273,  273,  273,
 /*  1170 */   273,  273,   96,  213,  217,  273,  182,  188,  245,  285,
 /*  1180 */   171,  254,   60,  273,  273,  273,  273,  273,  273,   96,
 /*  1190 */   213,  217,  273,  182,  188,  245,  285,  171,  254,   77,
 /*  1200 */   273,  273,  273,  273,  273,  273,   96,  213,  217,  273,
 /*  1210 */   273,  188,  245,  285,  273,  254,  182,  273,  273,  273,
 /*  1220 */   171,  273,   65,  273,  273,  273,  273,  273,  273,   96,
 /*  1230 */   213,  217,  273,  182,  188,  245,  285,  171,  254,   72,
 /*  1240 */   273,  273,  273,  273,  273,  273,   96,  213,  217,  273,
 /*  1250 */   182,  188,  245,  285,  171,  254,   76,  273,  273,  273,
 /*  1260 */   273,  273,  273,   96,  213,  217,  273,  182,  188,  245,
 /*  1270 */   285,  171,  254,   63,  273,  273,  273,  273,  273,  273,
 /*  1280 */    96,  213,  217,  273,  273,  188,  245,  285,  273,  254,
 /*  1290 */   182,  273,  273,  273,   86,  273,   45,  273,  273,  273,
 /*  1300 */   273,  273,  273,   96,  213,  217,  273,  182,  188,  245,
 /*  1310 */   285,  171,  254,   57,  273,  273,  273,  273,  273,  273,
 /*  1320 */    96,  213,  217,  273,  182,  188,  245,  285,  171,  254,
 /*  1330 */    62,  273,  273,  273,  273,  273,  273,   96,  213,  217,
 /*  1340 */   273,  182,  188,  245,  285,   86,  254,   44,  273,  273,
 /*  1350 */   273,  273,  273,  273,   96,  213,  217,  273,  273,  151,
 /*  1360 */   245,  285,  273,  254,  182,  273,  273,  273,  171,  273,
 /*  1370 */    66,  273,  273,  273,  273,  273,  273,   96,  213,  217,
 /*  1380 */   273,  182,  188,  245,  285,  146,  254,   81,  273,  273,
 /*  1390 */   273,  273,  273,  273,   96,  213,  217,  273,  182,  188,
 /*  1400 */   245,  285,  171,  254,   58,  273,  273,  273,  273,  273,
 /*  1410 */   273,   96,  213,  217,  273,  182,  188,  245,  285,  171,
 /*  1420 */   254,   67,  273,  273,  273,  273,  273,  273,   96,  213,
 /*  1430 */   217,  273,  273,  188,  245,  285,  273,  254,  182,  273,
 /*  1440 */   273,  273,  171,  273,   73,  273,  273,  273,  273,  273,
 /*  1450 */   273,   96,  213,  217,  273,  182,  188,  245,  285,  171,
 /*  1460 */   254,   70,  273,  273,  273,  273,  273,  273,   96,  213,
 /*  1470 */   217,  265,  273,  188,  245,  285,  273,  254,    9,  273,
 /*  1480 */   273,    3,   55,  273,  273,  273,  182,  273,  273,  109,
 /*  1490 */   222,  273,  273,  273,  166,  273,  273,  273,  273,   96,
 /*  1500 */   273,  273,  273,  182,  188,  245,  285,  220,  254,  273,
 /*  1510 */   273,  182,  273,  273,  273,  214,   96,  273,  273,  273,
 /*  1520 */   273,  188,  245,  285,   96,  254,  248,   28,  263,  188,
 /*  1530 */   245,  285,  182,  254,  273,  273,  223,  273,  273,  273,
 /*  1540 */   273,  273,  182,  273,  273,   96,  192,  273,  273,  273,
 /*  1550 */   188,  245,  285,  273,  254,   96,  273,  273,  273,  273,
 /*  1560 */   188,  245,  285,  182,  254,  273,  273,  190,  273,  273,
 /*  1570 */   273,  273,  273,  273,  273,  273,   96,  273,  273,  273,
 /*  1580 */   273,  188,  245,  285,  273,  254,
    );
    static public $yy_lookahead = array(
 /*     0 */    18,   19,   78,   21,   22,   78,   24,   18,   19,   85,
 /*    10 */     3,   29,   85,   89,   90,   33,   34,   20,   36,   30,
 /*    20 */    38,   32,   25,   41,   35,   98,   94,   45,   46,   47,
 /*    30 */    48,   49,   25,  101,   52,   18,   19,   30,   21,   22,
 /*    40 */     3,   24,   35,   18,   19,   38,   29,   50,   66,   24,
 /*    50 */    32,   34,   73,   36,   27,   38,   38,   50,   41,   18,
 /*    60 */    19,   36,   45,   46,   47,   48,   49,   30,   50,   52,
 /*    70 */    53,   30,   35,   32,   18,   19,   35,   40,   41,   42,
 /*    80 */    38,   25,   26,   66,  105,  106,   70,   71,   72,   73,
 /*    90 */    74,   54,   55,   56,   57,   58,   59,   60,   61,   62,
 /*   100 */    63,   64,   65,   37,   11,   39,   28,   30,   30,   18,
 /*   110 */    19,   18,   35,   35,   21,   22,   78,   78,   40,   41,
 /*   120 */    42,   30,   29,   85,   85,   73,   35,   34,   89,   90,
 /*   130 */    18,   19,   54,   55,   56,   57,   58,   59,   60,   61,
 /*   140 */    62,   63,   64,   65,   72,   73,   74,   18,   19,   99,
 /*   150 */   100,   18,   19,   24,   21,   22,    3,   24,  106,   66,
 /*   160 */    67,   68,   29,   51,   37,   78,   39,   34,   24,   36,
 /*   170 */    30,   38,   85,   20,   41,   35,   89,   90,   45,   46,
 /*   180 */    47,   48,   49,   30,   24,   52,   18,   19,   35,   21,
 /*   190 */    22,   38,   24,   18,   19,    3,   25,   29,   38,   66,
 /*   200 */    78,   78,   34,   50,   36,   19,   38,   85,   85,   41,
 /*   210 */    24,   89,   90,   45,   46,   47,   48,   49,   30,   48,
 /*   220 */    52,   98,   30,   35,   44,   83,   51,   35,   40,   41,
 /*   230 */    42,   18,   19,   48,   66,   43,   97,   52,   99,  100,
 /*   240 */    98,   20,   54,   55,   56,   57,   58,   59,   60,   61,
 /*   250 */    62,   63,   64,   65,    4,    5,    6,    7,    8,    9,
 /*   260 */    10,   11,   12,   13,   14,   15,    3,    3,   18,   48,
 /*   270 */    37,   21,   22,   52,   18,   19,   78,   21,   22,   29,
 /*   280 */    24,   80,   81,   85,   34,   29,   53,   86,   18,   19,
 /*   290 */    34,    3,   36,   30,   38,   25,   98,   41,   35,   38,
 /*   300 */    78,   45,   46,   47,   48,   49,   43,   85,   52,   18,
 /*   310 */    19,   50,   21,   22,    3,   24,   18,   19,   83,   83,
 /*   320 */    29,   84,   66,   25,   80,   34,    3,   36,   24,   38,
 /*   330 */    86,   19,   41,   98,   98,   98,   45,   46,   47,   48,
 /*   340 */    49,   30,   31,   52,   18,   19,   35,   21,   22,   51,
 /*   350 */    24,   18,   19,   30,   43,   29,   78,   66,   35,   32,
 /*   360 */    34,   78,   36,   85,   38,   48,   43,   41,   85,   83,
 /*   370 */    43,   45,   46,   47,   48,   49,   98,   23,   52,   18,
 /*   380 */    19,   80,   21,   22,   98,   24,   37,   86,   39,    3,
 /*   390 */    29,   37,   66,   18,   26,   34,   83,   36,   78,   38,
 /*   400 */    36,   83,   41,   89,   90,   85,   45,   46,   47,   48,
 /*   410 */    49,   98,   26,   38,   18,   19,   98,   21,   22,   78,
 /*   420 */    24,   96,   74,   98,   76,   29,   85,   66,   24,   20,
 /*   430 */    34,   94,   36,   23,   38,   67,   73,   41,  101,   36,
 /*   440 */    77,   45,   46,   47,   48,   49,   99,  100,   83,   86,
 /*   450 */    40,   41,   42,   24,   91,   92,   93,    3,   95,   50,
 /*   460 */    18,   19,   66,   98,   54,   55,   56,   57,   58,   59,
 /*   470 */    60,   61,   62,   63,   64,   65,    3,   78,   40,   41,
 /*   480 */    42,   96,   24,   98,   85,   19,    2,   19,   38,   19,
 /*   490 */    83,   53,   54,   55,   56,   57,   58,   59,   60,   61,
 /*   500 */    62,   63,   64,   65,    3,   98,   83,    5,    6,    7,
 /*   510 */     8,    9,   20,   40,   41,   42,   26,   15,   16,   17,
 /*   520 */    25,   98,   19,   19,   83,   39,   43,   54,   55,   56,
 /*   530 */    57,   58,   59,   60,   61,   62,   63,   64,   65,   98,
 /*   540 */    19,   40,   41,   42,   96,   85,   97,   30,  101,   82,
 /*   550 */    20,  100,   96,   98,   75,   54,   55,   56,   57,   58,
 /*   560 */    59,   60,   61,   62,   63,   64,   65,   39,   40,   41,
 /*   570 */    42,    2,   96,   82,   96,   16,  107,  107,  107,  107,
 /*   580 */   107,  107,   54,   55,   56,   57,   58,   59,   60,   61,
 /*   590 */    62,   63,   64,   65,  107,  107,  107,  107,  107,  107,
 /*   600 */   107,  107,  107,  107,  107,  107,  107,  107,  107,   40,
 /*   610 */    41,   42,  107,    3,  107,  107,  107,  107,  107,  107,
 /*   620 */   107,  107,  107,   54,   55,   56,   57,   58,   59,   60,
 /*   630 */    61,   62,   63,   64,   65,  107,  107,  107,  107,  107,
 /*   640 */    73,  107,  107,  107,   77,  107,   79,   80,  107,  107,
 /*   650 */    40,   41,   42,   86,   87,   88,  107,  107,   91,   92,
 /*   660 */    93,  107,   95,  107,   54,   55,   56,   57,   58,   59,
 /*   670 */    60,   61,   62,   63,   64,   65,  107,  107,  107,  107,
 /*   680 */   107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
 /*   690 */    39,   40,   41,   42,    3,  107,  107,  107,  107,  107,
 /*   700 */   107,  107,  107,  107,  107,   54,   55,   56,   57,   58,
 /*   710 */    59,   60,   61,   62,   63,   64,   65,  107,  107,  107,
 /*   720 */   107,   73,  107,  107,  107,   77,  107,   79,   80,  107,
 /*   730 */   107,   40,   41,   42,   86,   87,   88,  107,  107,   91,
 /*   740 */    92,   93,  107,   95,  107,   54,   55,   56,   57,   58,
 /*   750 */    59,   60,   61,   62,   63,   64,   65,   40,   41,   42,
 /*   760 */   107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
 /*   770 */   107,   54,   55,   56,   57,   58,   59,   60,   61,   62,
 /*   780 */    63,   64,   65,   31,   67,  107,  107,  107,  107,  107,
 /*   790 */   107,  107,   40,   41,   42,  107,  107,  107,  107,  107,
 /*   800 */   107,  107,  107,  107,  107,  107,   54,   55,   56,   57,
 /*   810 */    58,   59,   60,   61,   62,   63,   64,   65,   40,   41,
 /*   820 */    42,  107,  107,  107,  107,  107,  107,  107,  107,  107,
 /*   830 */   107,  107,   54,   55,   56,   57,   58,   59,   60,   61,
 /*   840 */    62,   63,   64,   65,  107,   73,  107,  107,  107,   77,
 /*   850 */   107,   79,  107,  107,  107,  107,  107,  107,   86,   87,
 /*   860 */    88,  107,  107,   91,   92,   93,   73,   95,  107,  107,
 /*   870 */    77,  107,   79,  107,  107,  103,  104,  107,  107,   86,
 /*   880 */    87,   88,  107,   73,   91,   92,   93,   77,   95,   79,
 /*   890 */   107,  107,  107,  107,  107,  102,   86,   87,   88,  107,
 /*   900 */   107,   91,   92,   93,  107,   95,  107,   73,  107,  107,
 /*   910 */   107,   77,  102,   79,  107,  107,  107,  107,  107,  107,
 /*   920 */    86,   87,   88,  107,  107,   91,   92,   93,  107,   95,
 /*   930 */   107,  107,  107,   73,  107,  107,  107,   77,  104,   79,
 /*   940 */   107,  107,  107,  107,  107,  107,   86,   87,   88,  107,
 /*   950 */    73,   91,   92,   93,   77,   95,   79,  107,  107,  107,
 /*   960 */   107,  107,  102,   86,   87,   88,  107,  107,   91,   92,
 /*   970 */    93,   73,   95,  107,  107,   77,  107,   79,  107,  107,
 /*   980 */   107,  107,  107,  107,   86,   87,   88,  107,  107,   91,
 /*   990 */    92,   93,  107,   95,   73,  107,  107,  107,   77,  107,
 /*  1000 */    79,  107,  107,  107,  107,  107,  107,   86,   87,   88,
 /*  1010 */   107,   73,   91,   92,   93,   77,   95,   79,  107,  107,
 /*  1020 */   107,  107,  107,  107,   86,   87,   88,  107,   73,   91,
 /*  1030 */    92,   93,   77,   95,   79,  107,  107,  107,  107,  107,
 /*  1040 */   107,   86,   87,   88,  107,   73,   91,   92,   93,   77,
 /*  1050 */    95,   79,  107,  107,  107,  107,  107,  107,   86,   87,
 /*  1060 */    88,  107,  107,   91,   92,   93,  107,   95,   73,  107,
 /*  1070 */   107,  107,   77,  107,   79,  107,  107,  107,  107,  107,
 /*  1080 */   107,   86,   87,   88,  107,   73,   91,   92,   93,   77,
 /*  1090 */    95,   79,  107,  107,  107,  107,  107,  107,   86,   87,
 /*  1100 */    88,  107,   73,   91,   92,   93,   77,   95,   79,  107,
 /*  1110 */   107,  107,  107,  107,  107,   86,   87,   88,  107,   73,
 /*  1120 */    91,   92,   93,   77,   95,   79,  107,  107,  107,  107,
 /*  1130 */   107,  107,   86,   87,   88,  107,  107,   91,   92,   93,
 /*  1140 */   107,   95,   73,  107,  107,  107,   77,  107,   79,  107,
 /*  1150 */   107,  107,  107,  107,  107,   86,   87,   88,  107,   73,
 /*  1160 */    91,   92,   93,   77,   95,   79,  107,  107,  107,  107,
 /*  1170 */   107,  107,   86,   87,   88,  107,   73,   91,   92,   93,
 /*  1180 */    77,   95,   79,  107,  107,  107,  107,  107,  107,   86,
 /*  1190 */    87,   88,  107,   73,   91,   92,   93,   77,   95,   79,
 /*  1200 */   107,  107,  107,  107,  107,  107,   86,   87,   88,  107,
 /*  1210 */   107,   91,   92,   93,  107,   95,   73,  107,  107,  107,
 /*  1220 */    77,  107,   79,  107,  107,  107,  107,  107,  107,   86,
 /*  1230 */    87,   88,  107,   73,   91,   92,   93,   77,   95,   79,
 /*  1240 */   107,  107,  107,  107,  107,  107,   86,   87,   88,  107,
 /*  1250 */    73,   91,   92,   93,   77,   95,   79,  107,  107,  107,
 /*  1260 */   107,  107,  107,   86,   87,   88,  107,   73,   91,   92,
 /*  1270 */    93,   77,   95,   79,  107,  107,  107,  107,  107,  107,
 /*  1280 */    86,   87,   88,  107,  107,   91,   92,   93,  107,   95,
 /*  1290 */    73,  107,  107,  107,   77,  107,   79,  107,  107,  107,
 /*  1300 */   107,  107,  107,   86,   87,   88,  107,   73,   91,   92,
 /*  1310 */    93,   77,   95,   79,  107,  107,  107,  107,  107,  107,
 /*  1320 */    86,   87,   88,  107,   73,   91,   92,   93,   77,   95,
 /*  1330 */    79,  107,  107,  107,  107,  107,  107,   86,   87,   88,
 /*  1340 */   107,   73,   91,   92,   93,   77,   95,   79,  107,  107,
 /*  1350 */   107,  107,  107,  107,   86,   87,   88,  107,  107,   91,
 /*  1360 */    92,   93,  107,   95,   73,  107,  107,  107,   77,  107,
 /*  1370 */    79,  107,  107,  107,  107,  107,  107,   86,   87,   88,
 /*  1380 */   107,   73,   91,   92,   93,   77,   95,   79,  107,  107,
 /*  1390 */   107,  107,  107,  107,   86,   87,   88,  107,   73,   91,
 /*  1400 */    92,   93,   77,   95,   79,  107,  107,  107,  107,  107,
 /*  1410 */   107,   86,   87,   88,  107,   73,   91,   92,   93,   77,
 /*  1420 */    95,   79,  107,  107,  107,  107,  107,  107,   86,   87,
 /*  1430 */    88,  107,  107,   91,   92,   93,  107,   95,   73,  107,
 /*  1440 */   107,  107,   77,  107,   79,  107,  107,  107,  107,  107,
 /*  1450 */   107,   86,   87,   88,  107,   73,   91,   92,   93,   77,
 /*  1460 */    95,   79,  107,  107,  107,  107,  107,  107,   86,   87,
 /*  1470 */    88,   11,  107,   91,   92,   93,  107,   95,   18,  107,
 /*  1480 */   107,   21,   22,  107,  107,  107,   73,  107,  107,   29,
 /*  1490 */    77,  107,  107,  107,   34,  107,  107,  107,  107,   86,
 /*  1500 */   107,  107,  107,   73,   91,   92,   93,   77,   95,  107,
 /*  1510 */   107,   73,  107,  107,  107,   77,   86,  107,  107,  107,
 /*  1520 */   107,   91,   92,   93,   86,   95,   66,   67,   68,   91,
 /*  1530 */    92,   93,   73,   95,  107,  107,   77,  107,  107,  107,
 /*  1540 */   107,  107,   73,  107,  107,   86,   77,  107,  107,  107,
 /*  1550 */    91,   92,   93,  107,   95,   86,  107,  107,  107,  107,
 /*  1560 */    91,   92,   93,   73,   95,  107,  107,   77,  107,  107,
 /*  1570 */   107,  107,  107,  107,  107,  107,   86,  107,  107,  107,
 /*  1580 */   107,   91,   92,   93,  107,   95,
);
    const YY_SHIFT_USE_DFLT = -19;
    const YY_SHIFT_MAX = 188;
    static public $yy_shift_ofst = array(
 /*     0 */   250,  326,  133,  291,  291,  133,  133,  326,  -18,  -18,
 /*    10 */    17,  133,  133,  133,  133,  168,  133,  133,  168,  133,
 /*    20 */   133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
 /*    30 */   133,  133,  133,  133,  133,  256,  361,  361,  361,  361,
 /*    40 */   361,  396,  361,   78,   37,  188,  188,  188,  250, 1460,
 /*    50 */    41,  -11,   91,   91,  221,  160,  691,  610,  438,  473,
 /*    60 */   501,  752,  528,  569,  717,  651,  410,  778,  778,  778,
 /*    70 */   778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
 /*    80 */   778,  778,   93,  502,  153,   56,  323,  298,  175,   -3,
 /*    90 */   270,   77,  213,  213,  213,  186,  409,  213,  442,  213,
 /*   100 */   213,   77,  160,  213,  213,  186,   77,  160,  333,  140,
 /*   110 */   213,  213,  530,  129,  112,   77,   77,   77,   77,   77,
 /*   120 */    77,  185,  185,   77,  375,  185,   77,  185,   77,  185,
 /*   130 */    77,   77,   77,   77,   77,  530,  517,  530,  559,  517,
 /*   140 */   530,  450,  -19,  -19,    7,  311,  192,  263,   25,   18,
 /*   150 */   261,  386,  354,  368,  233,  261,  349,  127,   66,  171,
 /*   160 */   327,   42,  264,  144,   27,  180,  521,  492,  288,  450,
 /*   170 */   503,  483,  486,  468,  364,  312,  304,  404,  466,  458,
 /*   180 */   429,  470,  454,  403,  317,  484,  504,  495,  490,
);
    const YY_REDUCE_USE_DFLT = -77;
    const YY_REDUCE_MAX = 143;
    static public $yy_reduce_ofst = array(
 /*     0 */    16,  772,  793,  567,  648,  810,  860,  834, 1217, 1268,
 /*    10 */  1325,  995, 1160, 1012, 1069, 1308, 1046, 1029, 1086, 1103,
 /*    20 */  1143, 1120, 1365, 1342, 1251, 1291, 1382, 1177,  972, 1234,
 /*    30 */   955,  877,  898,  921,  938, 1194, 1430, 1438, 1459,  363,
 /*    40 */  1413, 1490, 1469,   87,  122,  122,   39,  -76,   72,  -21,
 /*    50 */   -73,  123,  278,  198,  139,  201,  314,  314,  314,  314,
 /*    60 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*    70 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*    80 */   314,  314,   52,  348,  320,  237,  283,  325,  325,  347,
 /*    90 */   325,  341,  318,  365,  313,  337,  347,  423,  441,  385,
 /*   100 */   407,  399,  301,  235,  142,  -68,   38,  244,  235,  222,
 /*   110 */   236,  286,   50,  447,  455,  460,  460,  460,  460,  460,
 /*   120 */   460,  449,  449,  460,  456,  449,  460,  449,  460,  449,
 /*   130 */   460,  460,  460,  460,  460,  451,  467,  451,  479,  491,
 /*   140 */   451,  476,  478,  448,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 21, 22, 29, 34, ),
        /* 1 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 2 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 3 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 4 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 5 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 6 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 7 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 8 */ array(18, 19, 21, 22, 24, 29, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 9 */ array(18, 19, 21, 22, 24, 29, 33, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 10 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 53, 66, ),
        /* 11 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 12 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 13 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 14 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 15 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 16 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 17 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 18 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 19 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 20 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 21 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 22 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 23 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 24 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 25 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 26 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 27 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 28 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 29 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 30 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 31 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 32 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 33 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 34 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 35 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 52, 66, ),
        /* 36 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 66, ),
        /* 37 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 66, ),
        /* 38 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 66, ),
        /* 39 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 66, ),
        /* 40 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 66, ),
        /* 41 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 66, ),
        /* 42 */ array(18, 19, 21, 22, 24, 29, 34, 36, 38, 41, 45, 46, 47, 48, 49, 66, ),
        /* 43 */ array(28, 30, 35, 40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 44 */ array(3, 30, 35, 40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 45 */ array(30, 35, 40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 46 */ array(30, 35, 40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 47 */ array(30, 35, 40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 48 */ array(4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 21, 22, 29, 34, ),
        /* 49 */ array(11, 18, 21, 22, 29, 34, 66, 67, 68, ),
        /* 50 */ array(18, 19, 30, 32, 35, ),
        /* 51 */ array(18, 19, 30, 32, 35, ),
        /* 52 */ array(18, 19, 30, 35, ),
        /* 53 */ array(18, 19, 30, 35, ),
        /* 54 */ array(20, 48, 52, ),
        /* 55 */ array(24, 38, ),
        /* 56 */ array(3, 40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 57 */ array(3, 40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 58 */ array(40, 41, 42, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 59 */ array(3, 40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 60 */ array(3, 40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 61 */ array(31, 40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 62 */ array(39, 40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 63 */ array(2, 40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 64 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, ),
        /* 65 */ array(39, 40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 66 */ array(23, 40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 67 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 68 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 69 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 70 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 71 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 72 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 73 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 74 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 75 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 76 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 77 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 78 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 79 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 80 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 81 */ array(40, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, ),
        /* 82 */ array(11, 18, 21, 22, 29, 34, 66, 67, 68, ),
        /* 83 */ array(5, 6, 7, 8, 9, 15, 16, 17, ),
        /* 84 */ array(3, 20, 30, 35, 38, 50, ),
        /* 85 */ array(18, 19, 25, 26, ),
        /* 86 */ array(3, 30, 35, 43, ),
        /* 87 */ array(18, 19, 25, 51, ),
        /* 88 */ array(18, 19, 51, ),
        /* 89 */ array(20, 25, 50, ),
        /* 90 */ array(18, 19, 25, ),
        /* 91 */ array(30, 35, ),
        /* 92 */ array(18, 19, ),
        /* 93 */ array(18, 19, ),
        /* 94 */ array(18, 19, ),
        /* 95 */ array(19, 24, ),
        /* 96 */ array(20, 50, ),
        /* 97 */ array(18, 19, ),
        /* 98 */ array(18, 19, ),
        /* 99 */ array(18, 19, ),
        /* 100 */ array(18, 19, ),
        /* 101 */ array(30, 35, ),
        /* 102 */ array(24, 38, ),
        /* 103 */ array(18, 19, ),
        /* 104 */ array(18, 19, ),
        /* 105 */ array(19, 24, ),
        /* 106 */ array(30, 35, ),
        /* 107 */ array(24, 38, ),
        /* 108 */ array(18, 19, ),
        /* 109 */ array(30, 35, ),
        /* 110 */ array(18, 19, ),
        /* 111 */ array(18, 19, ),
        /* 112 */ array(20, ),
        /* 113 */ array(18, 19, 24, ),
        /* 114 */ array(18, 19, 51, ),
        /* 115 */ array(30, 35, ),
        /* 116 */ array(30, 35, ),
        /* 117 */ array(30, 35, ),
        /* 118 */ array(30, 35, ),
        /* 119 */ array(30, 35, ),
        /* 120 */ array(30, 35, ),
        /* 121 */ array(48, 52, ),
        /* 122 */ array(48, 52, ),
        /* 123 */ array(30, 35, ),
        /* 124 */ array(18, 38, ),
        /* 125 */ array(48, 52, ),
        /* 126 */ array(30, 35, ),
        /* 127 */ array(48, 52, ),
        /* 128 */ array(30, 35, ),
        /* 129 */ array(48, 52, ),
        /* 130 */ array(30, 35, ),
        /* 131 */ array(30, 35, ),
        /* 132 */ array(30, 35, ),
        /* 133 */ array(30, 35, ),
        /* 134 */ array(30, 35, ),
        /* 135 */ array(20, ),
        /* 136 */ array(30, ),
        /* 137 */ array(20, ),
        /* 138 */ array(16, ),
        /* 139 */ array(30, ),
        /* 140 */ array(20, ),
        /* 141 */ array(38, ),
        /* 142 */ array(),
        /* 143 */ array(),
        /* 144 */ array(3, 25, 30, 35, 38, 50, ),
        /* 145 */ array(3, 30, 31, 35, 43, ),
        /* 146 */ array(3, 30, 35, 43, ),
        /* 147 */ array(3, 30, 35, 43, ),
        /* 148 */ array(18, 19, 24, 36, ),
        /* 149 */ array(32, 38, 50, ),
        /* 150 */ array(38, 50, ),
        /* 151 */ array(3, 26, ),
        /* 152 */ array(23, 37, ),
        /* 153 */ array(26, 67, ),
        /* 154 */ array(37, 53, ),
        /* 155 */ array(38, 50, ),
        /* 156 */ array(37, 39, ),
        /* 157 */ array(37, 39, ),
        /* 158 */ array(37, 39, ),
        /* 159 */ array(25, 48, ),
        /* 160 */ array(32, 43, ),
        /* 161 */ array(38, ),
        /* 162 */ array(3, ),
        /* 163 */ array(24, ),
        /* 164 */ array(27, ),
        /* 165 */ array(44, ),
        /* 166 */ array(19, ),
        /* 167 */ array(20, ),
        /* 168 */ array(3, ),
        /* 169 */ array(38, ),
        /* 170 */ array(19, ),
        /* 171 */ array(43, ),
        /* 172 */ array(39, ),
        /* 173 */ array(19, ),
        /* 174 */ array(36, ),
        /* 175 */ array(19, ),
        /* 176 */ array(24, ),
        /* 177 */ array(24, ),
        /* 178 */ array(19, ),
        /* 179 */ array(24, ),
        /* 180 */ array(24, ),
        /* 181 */ array(19, ),
        /* 182 */ array(3, ),
        /* 183 */ array(36, ),
        /* 184 */ array(48, ),
        /* 185 */ array(2, ),
        /* 186 */ array(19, ),
        /* 187 */ array(25, ),
        /* 188 */ array(26, ),
        /* 189 */ array(),
        /* 190 */ array(),
        /* 191 */ array(),
        /* 192 */ array(),
        /* 193 */ array(),
        /* 194 */ array(),
        /* 195 */ array(),
        /* 196 */ array(),
        /* 197 */ array(),
        /* 198 */ array(),
        /* 199 */ array(),
        /* 200 */ array(),
        /* 201 */ array(),
        /* 202 */ array(),
        /* 203 */ array(),
        /* 204 */ array(),
        /* 205 */ array(),
        /* 206 */ array(),
        /* 207 */ array(),
        /* 208 */ array(),
        /* 209 */ array(),
        /* 210 */ array(),
        /* 211 */ array(),
        /* 212 */ array(),
        /* 213 */ array(),
        /* 214 */ array(),
        /* 215 */ array(),
        /* 216 */ array(),
        /* 217 */ array(),
        /* 218 */ array(),
        /* 219 */ array(),
        /* 220 */ array(),
        /* 221 */ array(),
        /* 222 */ array(),
        /* 223 */ array(),
        /* 224 */ array(),
        /* 225 */ array(),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
);
    static public $yy_default = array(
 /*     0 */   291,  435,  414,  452,  452,  414,  414,  452,  452,  452,
 /*    10 */   452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
 /*    20 */   452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
 /*    30 */   452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
 /*    40 */   452,  452,  452,  341,  452,  341,  341,  322,  288,  452,
 /*    50 */   341,  341,  341,  341,  418,  452,  452,  452,  452,  452,
 /*    60 */   452,  346,  452,  452,  452,  452,  452,  352,  436,  413,
 /*    70 */   365,  348,  351,  361,  360,  364,  412,  327,  343,  438,
 /*    80 */   437,  346,  452,  452,  376,  452,  354,  389,  389,  384,
 /*    90 */   389,  341,  452,  452,  452,  452,  384,  452,  452,  389,
 /*   100 */   452,  324,  452,  452,  452,  452,  341,  452,  452,  341,
 /*   110 */   452,  452,  415,  452,  390,  318,  319,  321,  330,  329,
 /*   120 */   317,  387,  406,  325,  389,  404,  333,  407,  332,  405,
 /*   130 */   335,  331,  334,  323,  326,  416,  451,  401,  308,  451,
 /*   140 */   419,  389,  389,  389,  376,  354,  354,  354,  452,  376,
 /*   150 */   376,  366,  452,  366,  452,  362,  452,  452,  452,  372,
 /*   160 */   354,  417,  452,  452,  349,  378,  452,  337,  452,  399,
 /*   170 */   452,  354,  452,  452,  374,  452,  452,  452,  452,  452,
 /*   180 */   452,  452,  452,  452,  372,  399,  452,  452,  366,  400,
 /*   190 */   363,  289,  356,  328,  378,  353,  342,  408,  409,  411,
 /*   200 */   410,  450,  350,  383,  398,  399,  338,  381,  340,  339,
 /*   210 */   313,  314,  315,  355,  357,  373,  375,  359,  358,  371,
 /*   220 */   369,  370,  367,  368,  312,  311,  296,  297,  298,  299,
 /*   230 */   295,  294,  290,  292,  293,  300,  301,  307,  309,  310,
 /*   240 */   306,  305,  302,  303,  304,  377,  420,  446,  439,  440,
 /*   250 */   441,  336,  447,  395,  386,  396,  444,  443,  434,  433,
 /*   260 */   402,  432,  442,  445,  448,  449,  385,  394,  426,  427,
 /*   270 */   428,  429,  425,  424,  421,  422,  423,  430,  431,  397,
 /*   280 */   392,  393,  391,  388,  379,  380,  382,  403,
);
    const YYNOCODE = 108;
    const YYSTACKDEPTH = 500;
    const YYNSTATE = 288;
    const YYNRULE = 164;
    const YYERRORSYMBOL = 69;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    public static $yyFallback = array(
    );
    public static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    public static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '<br>';
    }

    public static $yyTraceFILE;
    public static $yyTracePrompt;
    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array(
  '$',             'VERT',          'COLON',         'RDEL',        
  'COMMENT',       'PHPSTARTTAG',   'PHPENDTAG',     'ASPSTARTTAG', 
  'ASPENDTAG',     'FAKEPHPSTARTTAG',  'XMLTAG',        'TEXT',        
  'STRIPON',       'STRIPOFF',      'BLOCKSOURCE',   'LITERALSTART',
  'LITERALEND',    'LITERAL',       'LDEL',          'ID',          
  'PTR',           'LDELIF',        'LDELFOR',       'SEMICOLON',   
  'DOLLAR',        'EQUAL',         'INCDEC',        'TO',          
  'STEP',          'LDELFOREACH',   'SPACE',         'AS',          
  'APTR',          'TEMPLATEBLOCKCHILDPARENT',  'LDELSLASH',     'ATTR',        
  'INTEGER',       'COMMA',         'OPENP',         'CLOSEP',      
  'MATH',          'UNIMATH',       'ANDSYM',        'INSTANCEOF',  
  'QMARK',         'NOT',           'TYPECAST',      'HEX',         
  'DOT',           'SINGLEQUOTESTRING',  'DOUBLECOLON',   'AT',          
  'OPENB',         'CLOSEB',        'EQUALS',        'NOTEQUALS',   
  'GREATERTHAN',   'LESSTHAN',      'GREATEREQUAL',  'LESSEQUAL',   
  'IDENTITY',      'NONEIDENTITY',  'MOD',           'LAND',        
  'LOR',           'LXOR',          'QUOTE',         'BACKTICK',    
  'DOLLARID',      'error',         'start',         'template',    
  'template_element',  'template_tag',  'literal',       'literal_elements',
  'literal_element',  'value',         'attributes',    'expr',        
  'statement',     'statements',    'optspace',      'varvar',      
  'foraction',     'attribute',     'varindexed',    'ternary',     
  'array',         'ifcond',        'lop',           'variable',    
  'function',      'doublequoted_with_quotes',  'static_class_access',  'object',      
  'arrayindex',    'indexdef',      'varvarele',     'objectchain', 
  'objectelement',  'method',        'params',        'arrayelements',
  'arrayelement',  'doublequoted',  'doublequotedcontent',
    );

    public static $yyRuleName = array(
 /*   0 */ "start ::= template",
 /*   1 */ "template ::= template_element",
 /*   2 */ "template ::= template template_element",
 /*   3 */ "template ::=",
 /*   4 */ "template_element ::= template_tag RDEL",
 /*   5 */ "template_element ::= COMMENT",
 /*   6 */ "template_element ::= literal",
 /*   7 */ "template_element ::= PHPSTARTTAG",
 /*   8 */ "template_element ::= PHPENDTAG",
 /*   9 */ "template_element ::= ASPSTARTTAG",
 /*  10 */ "template_element ::= ASPENDTAG",
 /*  11 */ "template_element ::= FAKEPHPSTARTTAG",
 /*  12 */ "template_element ::= XMLTAG",
 /*  13 */ "template_element ::= TEXT",
 /*  14 */ "template_element ::= STRIPON",
 /*  15 */ "template_element ::= STRIPOFF",
 /*  16 */ "template_element ::= BLOCKSOURCE",
 /*  17 */ "literal ::= LITERALSTART LITERALEND",
 /*  18 */ "literal ::= LITERALSTART literal_elements LITERALEND",
 /*  19 */ "literal_elements ::= literal_elements literal_element",
 /*  20 */ "literal_elements ::=",
 /*  21 */ "literal_element ::= literal",
 /*  22 */ "literal_element ::= LITERAL",
 /*  23 */ "literal_element ::= PHPSTARTTAG",
 /*  24 */ "literal_element ::= FAKEPHPSTARTTAG",
 /*  25 */ "literal_element ::= PHPENDTAG",
 /*  26 */ "literal_element ::= ASPSTARTTAG",
 /*  27 */ "literal_element ::= ASPENDTAG",
 /*  28 */ "template_tag ::= LDEL value",
 /*  29 */ "template_tag ::= LDEL value attributes",
 /*  30 */ "template_tag ::= LDEL expr attributes",
 /*  31 */ "template_tag ::= LDEL ID attributes",
 /*  32 */ "template_tag ::= LDEL ID",
 /*  33 */ "template_tag ::= LDEL ID PTR ID attributes",
 /*  34 */ "template_tag ::= LDELIF expr",
 /*  35 */ "template_tag ::= LDELIF expr attributes",
 /*  36 */ "template_tag ::= LDELIF statement",
 /*  37 */ "template_tag ::= LDELIF statement attributes",
 /*  38 */ "template_tag ::= LDELFOR statements SEMICOLON optspace expr SEMICOLON optspace DOLLAR varvar foraction attributes",
 /*  39 */ "foraction ::= EQUAL expr",
 /*  40 */ "foraction ::= INCDEC",
 /*  41 */ "template_tag ::= LDELFOR statement TO expr attributes",
 /*  42 */ "template_tag ::= LDELFOR statement TO expr STEP expr attributes",
 /*  43 */ "template_tag ::= LDELFOREACH attributes",
 /*  44 */ "template_tag ::= LDELFOREACH SPACE value AS DOLLAR varvar attributes",
 /*  45 */ "template_tag ::= LDELFOREACH SPACE value AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  46 */ "template_tag ::= LDELFOREACH SPACE expr AS DOLLAR varvar attributes",
 /*  47 */ "template_tag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  48 */ "template_tag ::= LDEL TEMPLATEBLOCKCHILDPARENT",
 /*  49 */ "template_tag ::= LDELSLASH ID",
 /*  50 */ "template_tag ::= LDELSLASH ID PTR ID",
 /*  51 */ "attributes ::= attributes attribute",
 /*  52 */ "attributes ::= attribute",
 /*  53 */ "attributes ::=",
 /*  54 */ "attribute ::= SPACE ID EQUAL ID",
 /*  55 */ "attribute ::= ATTR expr",
 /*  56 */ "attribute ::= ATTR value",
 /*  57 */ "attribute ::= SPACE ID",
 /*  58 */ "attribute ::= SPACE expr",
 /*  59 */ "attribute ::= SPACE value",
 /*  60 */ "attribute ::= SPACE INTEGER EQUAL expr",
 /*  61 */ "statements ::= statement",
 /*  62 */ "statements ::= statements COMMA statement",
 /*  63 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  64 */ "statement ::= varindexed EQUAL expr",
 /*  65 */ "statement ::= OPENP statement CLOSEP",
 /*  66 */ "expr ::= value",
 /*  67 */ "expr ::= ternary",
 /*  68 */ "expr ::= expr MATH value",
 /*  69 */ "expr ::= expr UNIMATH value",
 /*  70 */ "expr ::= expr ANDSYM value",
 /*  71 */ "expr ::= array",
 /*  72 */ "expr ::= expr ifcond expr",
 /*  73 */ "expr ::= expr lop expr",
 /*  74 */ "expr ::= value INSTANCEOF ID",
 /*  75 */ "expr ::= value INSTANCEOF value",
 /*  76 */ "ternary ::= OPENP expr CLOSEP QMARK DOLLAR ID COLON expr",
 /*  77 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  78 */ "value ::= variable",
 /*  79 */ "value ::= UNIMATH value",
 /*  80 */ "value ::= NOT value",
 /*  81 */ "value ::= TYPECAST value",
 /*  82 */ "value ::= variable INCDEC",
 /*  83 */ "value ::= HEX",
 /*  84 */ "value ::= INTEGER",
 /*  85 */ "value ::= INTEGER DOT INTEGER",
 /*  86 */ "value ::= INTEGER DOT",
 /*  87 */ "value ::= DOT INTEGER",
 /*  88 */ "value ::= ID",
 /*  89 */ "value ::= function",
 /*  90 */ "value ::= OPENP expr CLOSEP",
 /*  91 */ "value ::= SINGLEQUOTESTRING",
 /*  92 */ "value ::= doublequoted_with_quotes",
 /*  93 */ "value ::= ID DOUBLECOLON static_class_access",
 /*  94 */ "value ::= varindexed DOUBLECOLON static_class_access",
 /*  95 */ "value ::= template_tag RDEL",
 /*  96 */ "variable ::= varindexed",
 /*  97 */ "variable ::= DOLLAR varvar AT ID",
 /*  98 */ "variable ::= object",
 /*  99 */ "varindexed ::= DOLLAR varvar arrayindex",
 /* 100 */ "arrayindex ::= arrayindex indexdef",
 /* 101 */ "arrayindex ::=",
 /* 102 */ "indexdef ::= DOT DOLLAR varvar",
 /* 103 */ "indexdef ::= DOT DOLLAR varvar AT ID",
 /* 104 */ "indexdef ::= DOT ID",
 /* 105 */ "indexdef ::= DOT INTEGER",
 /* 106 */ "indexdef ::= DOT LDEL expr RDEL",
 /* 107 */ "indexdef ::= OPENB expr CLOSEB",
 /* 108 */ "indexdef ::= OPENB CLOSEB",
 /* 109 */ "varvar ::= varvarele",
 /* 110 */ "varvar ::= varvar varvarele",
 /* 111 */ "varvarele ::= ID",
 /* 112 */ "varvarele ::= LDEL expr RDEL",
 /* 113 */ "object ::= varindexed objectchain",
 /* 114 */ "objectchain ::= objectelement",
 /* 115 */ "objectchain ::= objectchain objectelement",
 /* 116 */ "objectelement ::= PTR ID arrayindex",
 /* 117 */ "objectelement ::= PTR DOLLAR varvar arrayindex",
 /* 118 */ "objectelement ::= PTR LDEL expr RDEL arrayindex",
 /* 119 */ "objectelement ::= PTR ID LDEL expr RDEL arrayindex",
 /* 120 */ "objectelement ::= PTR method",
 /* 121 */ "function ::= ID OPENP params CLOSEP",
 /* 122 */ "method ::= ID OPENP params CLOSEP",
 /* 123 */ "method ::= DOLLAR ID OPENP params CLOSEP",
 /* 124 */ "params ::= params COMMA expr",
 /* 125 */ "params ::= expr",
 /* 126 */ "params ::=",
 /* 127 */ "static_class_access ::= method",
 /* 128 */ "static_class_access ::= method objectchain",
 /* 129 */ "static_class_access ::= ID",
 /* 130 */ "static_class_access ::= DOLLAR ID arrayindex",
 /* 131 */ "static_class_access ::= DOLLAR ID arrayindex objectchain",
 /* 132 */ "ifcond ::= EQUALS",
 /* 133 */ "ifcond ::= NOTEQUALS",
 /* 134 */ "ifcond ::= GREATERTHAN",
 /* 135 */ "ifcond ::= LESSTHAN",
 /* 136 */ "ifcond ::= GREATEREQUAL",
 /* 137 */ "ifcond ::= LESSEQUAL",
 /* 138 */ "ifcond ::= IDENTITY",
 /* 139 */ "ifcond ::= NONEIDENTITY",
 /* 140 */ "ifcond ::= MOD",
 /* 141 */ "lop ::= LAND",
 /* 142 */ "lop ::= LOR",
 /* 143 */ "lop ::= LXOR",
 /* 144 */ "array ::= OPENB arrayelements CLOSEB",
 /* 145 */ "arrayelements ::= arrayelement",
 /* 146 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 147 */ "arrayelements ::=",
 /* 148 */ "arrayelement ::= value APTR expr",
 /* 149 */ "arrayelement ::= ID APTR expr",
 /* 150 */ "arrayelement ::= expr",
 /* 151 */ "doublequoted_with_quotes ::= QUOTE QUOTE",
 /* 152 */ "doublequoted_with_quotes ::= QUOTE doublequoted QUOTE",
 /* 153 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 154 */ "doublequoted ::= doublequotedcontent",
 /* 155 */ "doublequotedcontent ::= BACKTICK variable BACKTICK",
 /* 156 */ "doublequotedcontent ::= BACKTICK expr BACKTICK",
 /* 157 */ "doublequotedcontent ::= DOLLARID",
 /* 158 */ "doublequotedcontent ::= LDEL variable RDEL",
 /* 159 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 160 */ "doublequotedcontent ::= template_tag RDEL",
 /* 161 */ "doublequotedcontent ::= TEXT",
 /* 162 */ "optspace ::= SPACE",
 /* 163 */ "optspace ::=",
    );

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    public function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;

                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
    $this->yyidx = $yyidx;
    $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;

                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

   public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        $this->yyTokenName[$iLookAhead] . " => " .
                        $this->yyTokenName[$iFallback] . "\n");
                }

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
#line 72 "TMTemplateParser.y"

    $this->compiler->triggerTemplateError("Stack overflow in template parser");
#line 1390 "TMTemplateParser.php"

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    public static $yyRuleInfo = array(
  array( 'lhs' => 70, 'rhs' => 1 ),
  array( 'lhs' => 71, 'rhs' => 1 ),
  array( 'lhs' => 71, 'rhs' => 2 ),
  array( 'lhs' => 71, 'rhs' => 0 ),
  array( 'lhs' => 72, 'rhs' => 2 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 75, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 0 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 3 ),
  array( 'lhs' => 73, 'rhs' => 3 ),
  array( 'lhs' => 73, 'rhs' => 3 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 5 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 3 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 3 ),
  array( 'lhs' => 73, 'rhs' => 11 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 5 ),
  array( 'lhs' => 73, 'rhs' => 7 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 7 ),
  array( 'lhs' => 73, 'rhs' => 10 ),
  array( 'lhs' => 73, 'rhs' => 7 ),
  array( 'lhs' => 73, 'rhs' => 10 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 4 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 0 ),
  array( 'lhs' => 85, 'rhs' => 4 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 4 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 3 ),
  array( 'lhs' => 80, 'rhs' => 4 ),
  array( 'lhs' => 80, 'rhs' => 3 ),
  array( 'lhs' => 80, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 87, 'rhs' => 8 ),
  array( 'lhs' => 87, 'rhs' => 7 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 4 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 96, 'rhs' => 2 ),
  array( 'lhs' => 96, 'rhs' => 0 ),
  array( 'lhs' => 97, 'rhs' => 3 ),
  array( 'lhs' => 97, 'rhs' => 5 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 97, 'rhs' => 4 ),
  array( 'lhs' => 97, 'rhs' => 3 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 3 ),
  array( 'lhs' => 95, 'rhs' => 2 ),
  array( 'lhs' => 99, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 2 ),
  array( 'lhs' => 100, 'rhs' => 3 ),
  array( 'lhs' => 100, 'rhs' => 4 ),
  array( 'lhs' => 100, 'rhs' => 5 ),
  array( 'lhs' => 100, 'rhs' => 6 ),
  array( 'lhs' => 100, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 4 ),
  array( 'lhs' => 101, 'rhs' => 4 ),
  array( 'lhs' => 101, 'rhs' => 5 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 0 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 3 ),
  array( 'lhs' => 94, 'rhs' => 4 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 90, 'rhs' => 1 ),
  array( 'lhs' => 90, 'rhs' => 1 ),
  array( 'lhs' => 90, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 1 ),
  array( 'lhs' => 103, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 0 ),
  array( 'lhs' => 104, 'rhs' => 3 ),
  array( 'lhs' => 104, 'rhs' => 3 ),
  array( 'lhs' => 104, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 0 ),
    );

    public static $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 1,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        13 => 13,
        14 => 14,
        15 => 15,
        16 => 16,
        17 => 17,
        20 => 17,
        163 => 17,
        18 => 18,
        65 => 18,
        19 => 19,
        79 => 19,
        81 => 19,
        82 => 19,
        100 => 19,
        115 => 19,
        128 => 19,
        21 => 21,
        22 => 21,
        40 => 21,
        58 => 21,
        59 => 21,
        66 => 21,
        67 => 21,
        71 => 21,
        78 => 21,
        83 => 21,
        84 => 21,
        89 => 21,
        91 => 21,
        92 => 21,
        98 => 21,
        109 => 21,
        114 => 21,
        127 => 21,
        129 => 21,
        145 => 21,
        150 => 21,
        162 => 21,
        23 => 23,
        24 => 23,
        25 => 25,
        26 => 26,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 29,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        36 => 34,
        35 => 35,
        37 => 35,
        38 => 38,
        39 => 39,
        41 => 41,
        42 => 42,
        43 => 43,
        44 => 44,
        46 => 44,
        45 => 45,
        47 => 47,
        48 => 48,
        49 => 49,
        50 => 50,
        51 => 51,
        52 => 52,
        61 => 52,
        125 => 52,
        53 => 53,
        126 => 53,
        54 => 54,
        55 => 55,
        56 => 55,
        57 => 57,
        60 => 60,
        62 => 62,
        63 => 63,
        64 => 63,
        68 => 68,
        69 => 68,
        70 => 68,
        72 => 72,
        73 => 72,
        74 => 72,
        75 => 75,
        76 => 76,
        77 => 77,
        80 => 80,
        85 => 85,
        86 => 86,
        87 => 87,
        88 => 88,
        90 => 90,
        93 => 93,
        94 => 94,
        95 => 95,
        96 => 96,
        97 => 97,
        99 => 99,
        101 => 101,
        147 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 106,
        108 => 108,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        130 => 130,
        131 => 131,
        132 => 132,
        133 => 133,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        146 => 146,
        148 => 148,
        149 => 149,
        151 => 151,
        152 => 152,
        153 => 153,
        154 => 154,
        155 => 155,
        156 => 155,
        158 => 155,
        157 => 157,
        159 => 159,
        160 => 160,
        161 => 161,
    );
#line 79 "TMTemplateParser.y"
    function yy_r0(){
    $this->_retvalue = $this->rootBuffer->toPHP();
    }
#line 1747 "TMTemplateParser.php"
#line 84 "TMTemplateParser.y"
    function yy_r1(){
    if ($this->yystack[$this->yyidx + 0]->minor != null) {
        $this->currentBuffer->appendSubTree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1754 "TMTemplateParser.php"
#line 103 "TMTemplateParser.y"
    function yy_r4(){
    if ($this->compiler->hasCode) {
        $tmp = '';
        foreach ($this->compiler->prefixCode as $code) {
            $tmp .= $code;
        }
        $this->compiler->prefixCode = array();
        $this->_retvalue = new TMTemplateTag($this, $this->compiler->processNoCacheCode($tmp.$this->yystack[$this->yyidx + -1]->minor, true));
    } else {
        $this->_retvalue = null;
    }
    $this->compiler->hasVariableString = false;
    $this->blockNestingLevel = count($this->compiler->tagStack);
    }
#line 1770 "TMTemplateParser.php"
#line 119 "TMTemplateParser.y"
    function yy_r5(){
    $this->_retvalue = null;
    }
#line 1775 "TMTemplateParser.php"
#line 124 "TMTemplateParser.y"
    function yy_r6(){
    $this->_retvalue = new TMTemplateText($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1780 "TMTemplateParser.php"
#line 129 "TMTemplateParser.y"
    function yy_r7(){
    $this->_retvalue = new TMTemplateText($this, self::escapeStartTag($this->yystack[$this->yyidx + 0]->minor));
    }
#line 1785 "TMTemplateParser.php"
#line 134 "TMTemplateParser.y"
    function yy_r8(){
    if ($this->isXml) {
        $this->compiler->tagNoCache = true;
        $this->isXml = false;
        $tmp = $this->tpl->hasNoCacheCode;
        $this->_retvalue = new TMTemplateText($this, $this->compiler->processNoCacheCode("<?php echo '?>';?>\n", $this->compiler, true));
        $this->tpl->hasNoCacheCode = $tmp;
    } else {
        $this->_retvalue = new TMTemplateText($this, '?<?php ?>>');
    }
    }
#line 1798 "TMTemplateParser.php"
#line 147 "TMTemplateParser.y"
    function yy_r9(){
    $this->_retvalue = new TMTemplateText($this, '<<?php ?>%');
    }
#line 1803 "TMTemplateParser.php"
#line 152 "TMTemplateParser.y"
    function yy_r10(){
    $this->_retvalue = new TMTemplateText($this, '%<?php ?>>');
    }
#line 1808 "TMTemplateParser.php"
#line 156 "TMTemplateParser.y"
    function yy_r11(){
    if ($this->strip) {
        $this->_retvalue = new TMTemplateText($this, preg_replace('![\t ]*[\r\n]+[\t ]*!', '', self::escapeStartTag($this->yystack[$this->yyidx + 0]->minor)));
    } else {
        $this->_retvalue = new TMTemplateText($this, self::escapeStartTag($this->yystack[$this->yyidx + 0]->minor));
    }
    }
#line 1817 "TMTemplateParser.php"
#line 165 "TMTemplateParser.y"
    function yy_r12(){
    $this->compiler->tagNoCache = true;
    $this->isXml = true;
    $tmp = $this->tpl->hasNoCacheCode;
    $this->_retvalue = new TMTemplateText($this, $this->compiler->processNoCacheCode("<?php echo '<?xml';?>", $this->compiler, true));
    $this->tpl->hasNoCacheCode = $tmp;
    }
#line 1826 "TMTemplateParser.php"
#line 174 "TMTemplateParser.y"
    function yy_r13(){
    if ($this->strip) {
        $this->_retvalue = new TMTemplateText($this, preg_replace('![\t ]*[\r\n]+[\t ]*!', '', $this->yystack[$this->yyidx + 0]->minor));
    } else {
        $this->_retvalue = new TMTemplateText($this, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1835 "TMTemplateParser.php"
#line 183 "TMTemplateParser.y"
    function yy_r14(){
    $this->strip = true;
    }
#line 1840 "TMTemplateParser.php"
#line 188 "TMTemplateParser.y"
    function yy_r15(){
    $this->strip = false;
    }
#line 1845 "TMTemplateParser.php"
#line 193 "TMTemplateParser.y"
    function yy_r16(){
    if ($this->strip) {
        TMTemplateCompileBlock::blockSource($this->compiler, preg_replace('![\t ]*[\r\n]+[\t ]*!', '', $this->yystack[$this->yyidx + 0]->minor));
    } else {
        TMTemplateCompileBlock::blockSource($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1854 "TMTemplateParser.php"
#line 202 "TMTemplateParser.y"
    function yy_r17(){
    $this->_retvalue = '';
    }
#line 1859 "TMTemplateParser.php"
#line 206 "TMTemplateParser.y"
    function yy_r18(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 1864 "TMTemplateParser.php"
#line 210 "TMTemplateParser.y"
    function yy_r19(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1869 "TMTemplateParser.php"
#line 218 "TMTemplateParser.y"
    function yy_r21(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1874 "TMTemplateParser.php"
#line 226 "TMTemplateParser.y"
    function yy_r23(){
    $this->_retvalue = self::escapeStartTag($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1879 "TMTemplateParser.php"
#line 234 "TMTemplateParser.y"
    function yy_r25(){
    $this->_retvalue = self::escapeEndTag($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1884 "TMTemplateParser.php"
#line 238 "TMTemplateParser.y"
    function yy_r26(){
    $this->_retvalue = '<<?php ?>%';
    }
#line 1889 "TMTemplateParser.php"
#line 242 "TMTemplateParser.y"
    function yy_r27(){
    $this->_retvalue = '%<?php ?>>';
    }
#line 1894 "TMTemplateParser.php"
#line 249 "TMTemplateParser.y"
    function yy_r28(){
    $this->_retvalue = $this->compiler->compileTag('PrintExpression', array(), array('value'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 1899 "TMTemplateParser.php"
#line 253 "TMTemplateParser.y"
    function yy_r29(){
    $this->_retvalue = $this->compiler->compileTag('PrintExpression', $this->yystack[$this->yyidx + 0]->minor, array('value' => $this->yystack[$this->yyidx + -1]->minor));
    }
#line 1904 "TMTemplateParser.php"
#line 263 "TMTemplateParser.y"
    function yy_r31(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1909 "TMTemplateParser.php"
#line 267 "TMTemplateParser.y"
    function yy_r32(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor, array());
    }
#line 1914 "TMTemplateParser.php"
#line 272 "TMTemplateParser.y"
    function yy_r33(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor, array('object_method' => $this->yystack[$this->yyidx + -1]->minor));
    }
#line 1919 "TMTemplateParser.php"
#line 277 "TMTemplateParser.y"
    function yy_r34(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor, $this->lex->ldelLength));
    $this->_retvalue = $this->compiler->compileTag(($tag == 'else if') ? 'elseif' : $tag, array(), array('if condition' => $this->yystack[$this->yyidx + 0]->minor));
    }
#line 1925 "TMTemplateParser.php"
#line 282 "TMTemplateParser.y"
    function yy_r35(){
    $tag = trim(substr($this->yystack[$this->yyidx + -2]->minor, $this->lex->ldelLength));
    $this->_retvalue = $this->compiler->compileTag(($tag == 'else if') ? 'elseif' : $tag, $this->yystack[$this->yyidx + 0]->minor, array('if condition' => $this->yystack[$this->yyidx + -1]->minor));
    }
#line 1931 "TMTemplateParser.php"
#line 298 "TMTemplateParser.y"
    function yy_r38(){
    $this->_retvalue = $this->compiler->compileTag('for',
        array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('start' => $this->yystack[$this->yyidx + -9]->minor), array('ifexp' => $this->yystack[$this->yyidx + -6]->minor), array('var' => $this->yystack[$this->yyidx + -2]->minor), array('step' => $this->yystack[$this->yyidx + -1]->minor))), 1);
    }
#line 1937 "TMTemplateParser.php"
#line 303 "TMTemplateParser.y"
    function yy_r39(){
    $this->_retvalue = '=' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1942 "TMTemplateParser.php"
#line 311 "TMTemplateParser.y"
    function yy_r41(){
    $this->_retvalue = $this->compiler->compileTag('for', array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('start' => $this->yystack[$this->yyidx + -3]->minor), array('to' => $this->yystack[$this->yyidx + -1]->minor))), 0);
    }
#line 1947 "TMTemplateParser.php"
#line 315 "TMTemplateParser.y"
    function yy_r42(){
    $this->_retvalue = $this->compiler->compileTag('for', array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('start' => $this->yystack[$this->yyidx + -5]->minor), array('to' => $this->yystack[$this->yyidx + -3]->minor), array('step' => $this->yystack[$this->yyidx + -1]->minor))), 0);
    }
#line 1952 "TMTemplateParser.php"
#line 320 "TMTemplateParser.y"
    function yy_r43(){
    $this->_retvalue = $this->compiler->compileTag('foreach', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1957 "TMTemplateParser.php"
#line 325 "TMTemplateParser.y"
    function yy_r44(){
    $this->_retvalue = $this->compiler->compileTag('foreach', array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('from' => $this->yystack[$this->yyidx + -4]->minor), array('item' => $this->yystack[$this->yyidx + -1]->minor))));
    }
#line 1962 "TMTemplateParser.php"
#line 329 "TMTemplateParser.y"
    function yy_r45(){
    $this->_retvalue = $this->compiler->compileTag('foreach', array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('from' => $this->yystack[$this->yyidx + -7]->minor), array('item' => $this->yystack[$this->yyidx + -1]->minor), array('key' => $this->yystack[$this->yyidx + -4]->minor))));
    }
#line 1967 "TMTemplateParser.php"
#line 337 "TMTemplateParser.y"
    function yy_r47(){
    $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('from'=>$this->yystack[$this->yyidx + -7]->minor),array('item'=>$this->yystack[$this->yyidx + -1]->minor),array('key'=>$this->yystack[$this->yyidx + -4]->minor))));
    }
#line 1972 "TMTemplateParser.php"
#line 342 "TMTemplateParser.y"
    function yy_r48(){
    if ($this->yystack[$this->yyidx + 0]->minor[strrpos($this->yystack[$this->yyidx + 0]->minor, '.') + 1] == 'c') {
        // {$template.block.child}
        $this->_retvalue = TMTemplateCompileBlock::compileChildBlock($this->compiler);
    } else {
        // {$template.block.parent}
        $this->_retvalue = TMTemplateCompileBlock::compileParentBlock($this->compiler);
    }
    }
#line 1983 "TMTemplateParser.php"
#line 353 "TMTemplateParser.y"
    function yy_r49(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor . 'close', array());
    }
#line 1988 "TMTemplateParser.php"
#line 358 "TMTemplateParser.y"
    function yy_r50(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor . 'close', array(), array('object_method' => $this->yystack[$this->yyidx + 0]->minor));
    }
#line 1993 "TMTemplateParser.php"
#line 365 "TMTemplateParser.y"
    function yy_r51(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1999 "TMTemplateParser.php"
#line 371 "TMTemplateParser.y"
    function yy_r52(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2004 "TMTemplateParser.php"
#line 376 "TMTemplateParser.y"
    function yy_r53(){
    $this->_retvalue = array();
    }
#line 2009 "TMTemplateParser.php"
#line 381 "TMTemplateParser.y"
    function yy_r54(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor => 'true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor => 'false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor => 'null');
    } else {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor => "'" . $this->yystack[$this->yyidx + 0]->minor . "'");
    }
    }
#line 2022 "TMTemplateParser.php"
#line 393 "TMTemplateParser.y"
    function yy_r55(){
    $this->_retvalue = array(trim($this->yystack[$this->yyidx + -1]->minor, " =\n\r\t") => $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2027 "TMTemplateParser.php"
#line 401 "TMTemplateParser.y"
    function yy_r57(){
    $this->_retvalue = "'" . $this->yystack[$this->yyidx + 0]->minor . "'";
    }
#line 2032 "TMTemplateParser.php"
#line 413 "TMTemplateParser.y"
    function yy_r60(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor => $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2037 "TMTemplateParser.php"
#line 422 "TMTemplateParser.y"
    function yy_r62(){
    $this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    }
#line 2043 "TMTemplateParser.php"
#line 427 "TMTemplateParser.y"
    function yy_r63(){
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value' => $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2048 "TMTemplateParser.php"
#line 452 "TMTemplateParser.y"
    function yy_r68(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2053 "TMTemplateParser.php"
#line 473 "TMTemplateParser.y"
    function yy_r72(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2058 "TMTemplateParser.php"
#line 485 "TMTemplateParser.y"
    function yy_r75(){
    self::$prefixNumber++;
    $this->compiler->prefixCode[] = '<?php $_tmp' . self::$prefixNumber . '=' . $this->yystack[$this->yyidx + 0]->minor . ';?>';
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + -1]->minor . '$_tmp' . self::$prefixNumber;
    }
#line 2065 "TMTemplateParser.php"
#line 492 "TMTemplateParser.y"
    function yy_r76(){
    $this->_retvalue = $this->yystack[$this->yyidx + -6]->minor . ' ? ' . $this->compileVariable("'" . $this->yystack[$this->yyidx + -2]->minor . "'") . ' : ' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2070 "TMTemplateParser.php"
#line 496 "TMTemplateParser.y"
    function yy_r77(){
    $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor . ' ? ' . $this->yystack[$this->yyidx + -2]->minor . ' : ' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2075 "TMTemplateParser.php"
#line 511 "TMTemplateParser.y"
    function yy_r80(){
    $this->_retvalue = '!' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2080 "TMTemplateParser.php"
#line 532 "TMTemplateParser.y"
    function yy_r85(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . '.' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2085 "TMTemplateParser.php"
#line 536 "TMTemplateParser.y"
    function yy_r86(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . '.';
    }
#line 2090 "TMTemplateParser.php"
#line 540 "TMTemplateParser.y"
    function yy_r87(){
    $this->_retvalue = '.' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2095 "TMTemplateParser.php"
#line 545 "TMTemplateParser.y"
    function yy_r88(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = 'true';
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = 'false';
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = 'null';
    } else {
        $this->_retvalue = "'" . $this->yystack[$this->yyidx + 0]->minor . "'";
    }
    }
#line 2108 "TMTemplateParser.php"
#line 563 "TMTemplateParser.y"
    function yy_r90(){
    $this->_retvalue = "(" . $this->yystack[$this->yyidx + -1]->minor . ")";
    }
#line 2113 "TMTemplateParser.php"
#line 578 "TMTemplateParser.y"
    function yy_r93(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . '::' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2118 "TMTemplateParser.php"
#line 582 "TMTemplateParser.y"
    function yy_r94(){
    if ($this->yystack[$this->yyidx + -2]->minor['var'] == '\'template\'') {
        $this->_retvalue = $this->compiler->compileTag('SpecialVariable', array(), $this->yystack[$this->yyidx + -2]->minor['template_internal_index']) . '::' . $this->yystack[$this->yyidx + 0]->minor;
    } else {
        $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor['var']) . $this->yystack[$this->yyidx + -2]->minor['template_internal_index'] . '::' . $this->yystack[$this->yyidx + 0]->minor;
    }
    }
#line 2127 "TMTemplateParser.php"
#line 591 "TMTemplateParser.y"
    function yy_r95(){
    self::$prefixNumber++;
    $this->compiler->prefixCode[] = '<?php ob_start();?>' . $this->yystack[$this->yyidx + -1]->minor . '<?php $_tmp' . self::$prefixNumber . '=ob_get_clean();?>';
    $this->_retvalue = '$_tmp' . self::$prefixNumber;
    }
#line 2134 "TMTemplateParser.php"
#line 599 "TMTemplateParser.y"
    function yy_r96(){
    if ($this->yystack[$this->yyidx + 0]->minor['var'] == '\'template\'') {
        $templateVar = $this->compiler->compileTag('SpecialVariable', array(), $this->yystack[$this->yyidx + 0]->minor['template_internal_index']);
        $this->_retvalue = $templateVar;
    } else {
        // used for array reset, next, prev, end, current
        $this->lastVariable = $this->yystack[$this->yyidx + 0]->minor['var'];
        $this->lastIndex = $this->yystack[$this->yyidx + 0]->minor['template_internal_index'];
        $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor['var']) . $this->yystack[$this->yyidx + 0]->minor['template_internal_index'];
    }
    }
#line 2147 "TMTemplateParser.php"
#line 612 "TMTemplateParser.y"
    function yy_r97(){
    $this->_retvalue = '$_tpl->tplVars[' . $this->yystack[$this->yyidx + -2]->minor . ']->' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2152 "TMTemplateParser.php"
#line 621 "TMTemplateParser.y"
    function yy_r99(){
    $this->_retvalue = array('var'=>$this->yystack[$this->yyidx + -1]->minor, 'template_internal_index' => $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2157 "TMTemplateParser.php"
#line 633 "TMTemplateParser.y"
    function yy_r101(){
    return;
    }
#line 2162 "TMTemplateParser.php"
#line 638 "TMTemplateParser.y"
    function yy_r102(){
    $this->_retvalue = '[' . $this->compileVariable($this->yystack[$this->yyidx + 0]->minor) . ']';
    }
#line 2167 "TMTemplateParser.php"
#line 642 "TMTemplateParser.y"
    function yy_r103(){
    $this->_retvalue = '[' . $this->compileVariable($this->yystack[$this->yyidx + -2]->minor) . '->' . $this->yystack[$this->yyidx + 0]->minor . ']';
    }
#line 2172 "TMTemplateParser.php"
#line 646 "TMTemplateParser.y"
    function yy_r104(){
    $this->_retvalue = "['" . $this->yystack[$this->yyidx + 0]->minor . "']";
    }
#line 2177 "TMTemplateParser.php"
#line 650 "TMTemplateParser.y"
    function yy_r105(){
    $this->_retvalue = "[" . $this->yystack[$this->yyidx + 0]->minor . "]";
    }
#line 2182 "TMTemplateParser.php"
#line 654 "TMTemplateParser.y"
    function yy_r106(){
    $this->_retvalue = "[" . $this->yystack[$this->yyidx + -1]->minor . "]";
    }
#line 2187 "TMTemplateParser.php"
#line 664 "TMTemplateParser.y"
    function yy_r108(){
    $this->_retvalue = '[]';
    }
#line 2192 "TMTemplateParser.php"
#line 676 "TMTemplateParser.y"
    function yy_r110(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . '.' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2197 "TMTemplateParser.php"
#line 681 "TMTemplateParser.y"
    function yy_r111(){
    $this->_retvalue = '\'' . $this->yystack[$this->yyidx + 0]->minor . '\'';
    }
#line 2202 "TMTemplateParser.php"
#line 686 "TMTemplateParser.y"
    function yy_r112(){
    $this->_retvalue = '(' . $this->yystack[$this->yyidx + -1]->minor . ')';
    }
#line 2207 "TMTemplateParser.php"
#line 691 "TMTemplateParser.y"
    function yy_r113(){
    if ($this->yystack[$this->yyidx + -1]->minor['var'] == '\'template\'') {
        $this->_retvalue =  $this->compiler->compileTag('SpecialVariable', array(), $this->yystack[$this->yyidx + -1]->minor['template_internal_index']) . $this->yystack[$this->yyidx + 0]->minor;
    } else {
        $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -1]->minor['var']) . $this->yystack[$this->yyidx + -1]->minor['template_internal_index'] . $this->yystack[$this->yyidx + 0]->minor;
    }
    }
#line 2216 "TMTemplateParser.php"
#line 710 "TMTemplateParser.y"
    function yy_r116(){
    $this->_retvalue = '->' . $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2221 "TMTemplateParser.php"
#line 714 "TMTemplateParser.y"
    function yy_r117(){
    $this->_retvalue = '->{' . $this->compileVariable($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor . '}';
    }
#line 2226 "TMTemplateParser.php"
#line 718 "TMTemplateParser.y"
    function yy_r118(){
    $this->_retvalue = '->{' . $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + 0]->minor . '}';
    }
#line 2231 "TMTemplateParser.php"
#line 722 "TMTemplateParser.y"
    function yy_r119(){
    $this->_retvalue = '->{\'' . $this->yystack[$this->yyidx + -4]->minor . '\'.' . $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + 0]->minor . '}';
    }
#line 2236 "TMTemplateParser.php"
#line 727 "TMTemplateParser.y"
    function yy_r120(){
    $this->_retvalue = '->' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2241 "TMTemplateParser.php"
#line 732 "TMTemplateParser.y"
    function yy_r121(){
    if (strcasecmp($this->yystack[$this->yyidx + -3]->minor,'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor,'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor,'array') === 0 || is_callable($this->yystack[$this->yyidx + -3]->minor)) {
        $funcName = strtolower($this->yystack[$this->yyidx + -3]->minor);
        if ($funcName == 'isset') {
            if (count($this->yystack[$this->yyidx + -1]->minor) == 0) {
                $this->compiler->triggerTemplateError('Illegal number of paramer in "isset()"');
            }
            $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(" . str_replace("')->value", "', null, true, false)->value", implode(',', $this->yystack[$this->yyidx + -1]->minor)) . ")";
        } elseif (in_array($funcName, array('empty', 'reset', 'current', 'end', 'prev', 'next'))) {
            if (count($this->yystack[$this->yyidx + -1]->minor) != 1) {
                $this->compiler->triggerTemplateError('Illegal number of paramer in "empty()"');
            }
            if ($funcName == 'empty') {
                $this->_retvalue = $funcName . '(' . str_replace("')->value", "', null, true, false)->value", $this->yystack[$this->yyidx + -1]->minor[0]) . ')';
            } else {
                $this->_retvalue = $funcName . '(' . $this->yystack[$this->yyidx + -1]->minor[0] . ')';
            }
        } else {
            $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". implode(',', $this->yystack[$this->yyidx + -1]->minor) . ")";
        }
    } else {
        $this->compiler->triggerTemplateError("Unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
    }
    }
#line 2267 "TMTemplateParser.php"
#line 758 "TMTemplateParser.y"
    function yy_r122(){
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(" . implode(',', $this->yystack[$this->yyidx + -1]->minor) . ")";
    }
#line 2272 "TMTemplateParser.php"
#line 762 "TMTemplateParser.y"
    function yy_r123(){
    self::$prefixNumber++;
    $this->compiler->prefixCode[] = '<?php $_tmp' . self::$prefixNumber . '=' . $this->compileVariable("'" . $this->yystack[$this->yyidx + -3]->minor . "'") . ';?>';
    $this->_retvalue = '$_tmp' . self::$prefixNumber . '(' . implode(',', $this->yystack[$this->yyidx + -1]->minor) . ')';
    }
#line 2279 "TMTemplateParser.php"
#line 771 "TMTemplateParser.y"
    function yy_r124(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor, array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2284 "TMTemplateParser.php"
#line 801 "TMTemplateParser.y"
    function yy_r130(){
    $this->_retvalue = '$' . $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2289 "TMTemplateParser.php"
#line 806 "TMTemplateParser.y"
    function yy_r131(){
    $this->_retvalue = '$' . $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2294 "TMTemplateParser.php"
#line 811 "TMTemplateParser.y"
    function yy_r132(){
    $this->_retvalue = '==';
    }
#line 2299 "TMTemplateParser.php"
#line 815 "TMTemplateParser.y"
    function yy_r133(){
    $this->_retvalue = '!=';
    }
#line 2304 "TMTemplateParser.php"
#line 819 "TMTemplateParser.y"
    function yy_r134(){
    $this->_retvalue = '>';
    }
#line 2309 "TMTemplateParser.php"
#line 823 "TMTemplateParser.y"
    function yy_r135(){
    $this->_retvalue = '<';
    }
#line 2314 "TMTemplateParser.php"
#line 827 "TMTemplateParser.y"
    function yy_r136(){
    $this->_retvalue = '>=';
    }
#line 2319 "TMTemplateParser.php"
#line 831 "TMTemplateParser.y"
    function yy_r137(){
    $this->_retvalue = '<=';
    }
#line 2324 "TMTemplateParser.php"
#line 835 "TMTemplateParser.y"
    function yy_r138(){
    $this->_retvalue = '===';
    }
#line 2329 "TMTemplateParser.php"
#line 839 "TMTemplateParser.y"
    function yy_r139(){
    $this->_retvalue = '!==';
    }
#line 2334 "TMTemplateParser.php"
#line 843 "TMTemplateParser.y"
    function yy_r140(){
    $this->_retvalue = '%';
    }
#line 2339 "TMTemplateParser.php"
#line 847 "TMTemplateParser.y"
    function yy_r141(){
    $this->_retvalue = '&&';
    }
#line 2344 "TMTemplateParser.php"
#line 851 "TMTemplateParser.y"
    function yy_r142(){
    $this->_retvalue = '||';
    }
#line 2349 "TMTemplateParser.php"
#line 855 "TMTemplateParser.y"
    function yy_r143(){
    $this->_retvalue = ' XOR ';
    }
#line 2354 "TMTemplateParser.php"
#line 861 "TMTemplateParser.y"
    function yy_r144(){
    $this->_retvalue = 'array(' . $this->yystack[$this->yyidx + -1]->minor . ')';
    }
#line 2359 "TMTemplateParser.php"
#line 869 "TMTemplateParser.y"
    function yy_r146(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . ',' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2364 "TMTemplateParser.php"
#line 877 "TMTemplateParser.y"
    function yy_r148(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . '=>' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2369 "TMTemplateParser.php"
#line 881 "TMTemplateParser.y"
    function yy_r149(){
    $this->_retvalue = '\'' . $this->yystack[$this->yyidx + -2]->minor . '\'=>' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2374 "TMTemplateParser.php"
#line 892 "TMTemplateParser.y"
    function yy_r151(){
    $this->_retvalue = "''";
    }
#line 2379 "TMTemplateParser.php"
#line 896 "TMTemplateParser.y"
    function yy_r152(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->toPHP();
    }
#line 2384 "TMTemplateParser.php"
#line 900 "TMTemplateParser.y"
    function yy_r153(){
    $this->yystack[$this->yyidx + -1]->minor->appendSubTree($this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2390 "TMTemplateParser.php"
#line 905 "TMTemplateParser.y"
    function yy_r154(){
    $this->_retvalue = new TMTemplateDoubleQuoted($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2395 "TMTemplateParser.php"
#line 909 "TMTemplateParser.y"
    function yy_r155(){
    $this->_retvalue = new TMTemplateCode($this, '(string)' . $this->yystack[$this->yyidx + -1]->minor);
    }
#line 2400 "TMTemplateParser.php"
#line 917 "TMTemplateParser.y"
    function yy_r157(){
    $this->_retvalue = new TMTemplateCode($this, '(string)$_tpl->tplVars[\'' . substr($this->yystack[$this->yyidx + 0]->minor, 1) . '\']->value');
    }
#line 2405 "TMTemplateParser.php"
#line 925 "TMTemplateParser.y"
    function yy_r159(){
    $this->_retvalue = new TMTemplateCode($this, '(string)(' . $this->yystack[$this->yyidx + -1]->minor . ')');
    }
#line 2410 "TMTemplateParser.php"
#line 929 "TMTemplateParser.y"
    function yy_r160(){
    $this->_retvalue = new TMTemplateTag($this, $this->yystack[$this->yyidx + -1]->minor);
    }
#line 2415 "TMTemplateParser.php"
#line 933 "TMTemplateParser.y"
    function yy_r161(){
    $this->_retvalue = new TMTemplateDoubleQuotedContent($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2420 "TMTemplateParser.php"

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        } while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
#line 66 "TMTemplateParser.y"

    $this->yymajor = $yymajor;
    $this->compiler->triggerTemplateError();
#line 2481 "TMTemplateParser.php"
    }

    public function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        } while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
#line 61 "TMTemplateParser.y"

    $this->retValue = $this->_retvalue;
#line 2495 "TMTemplateParser.php"
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);

        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sInput %s\n",
                self::$yyTracePrompt, $this->yyTokenName[$yymajor]);
        }

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(self::$yyTraceFILE, "%sSyntax Error!\n",
                        self::$yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        if (self::$yyTraceFILE) {
                            fprintf(self::$yyTraceFILE, "%sDiscard input token %s\n",
                                self::$yyTracePrompt, $this->yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
