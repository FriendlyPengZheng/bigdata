<?php
class TMProtoCompiler
{
    public function compile($messages)
    {
        $s = array();
        $s[] = '<?php';
        $s[] = '/**';
        $s[] = ' * DO NOT EDIT! Generated by TMProtoCompiler!';
        $s[] = ' * Date: ' . date('Y-m-d H:i:s');
        $s[] = ' */';
        foreach ($messages as $message) {
            $s[] = '';
            $s[] = $this->compileMessage($message);
        }
        return implode(PHP_EOL, $s);
    }

    public function compileMessage($message)
    {
        $s = array();
        if (isset($message['package'])) {
            $s[] = 'namespace ' . str_replace('.', '\\', $message['package']) . ';';
            $s[] = '';
            $s[] = 'use TMProto;';
            $s[] = 'use TMProtoDescriptor;';
            $s[] = 'use TMProtoField;';
            $s[] = 'use TMProtoMessage;';
            $s[] = '';
        }
        $s[] = 'class ' . $message['name'] . ' extends TMProtoMessage';
        $s[] = '{';

        foreach ($message['fields'] as $field) {
            $s[] = $this->generatePublicField($field, '    ');
            $s[] = '';
        }

        $s[] = '    public static function descriptor()';
        $s[] = '    {';
        $s[] = '        $descriptor = new TMProtoDescriptor(__CLASS__);';
        $s[] = '';
        foreach ($message['fields'] as $field) {
            $s[] = $this->compileField($field, '        ');
            $s[] = '        $descriptor->addField($f);';
            $s[] = '';
        }
        $s[] = '        return $descriptor;';
        $s[] = '    }';
        $s[] = '';

        foreach ($message['fields'] as $field) {
            $s[] = $this->generateAccessors($field, '    ');
        }

        $s[] = '}';

        return implode(PHP_EOL, $s) . PHP_EOL;
    }

    public function generatePublicField($field, $indent)
    {
        $s = array();
        if ($field['rule'] === 'repeated') {
            $s[] = 'public $' . $field['name'] . ' = array();';
        } else {
            $default = 'null';
            if (isset($field['default'])) {
                switch ($field['type']) {
                    case 'string':
                        if ($field['default'] === '\'\'') {
                            $default = '\'\'';
                        } else {
                            $default = '\'' . addcslashes($field['default'], '\'\\') . '\'';
                        }
                        break;

                    default: // Numbers
                        $default = $field['default'];
                        break;
                }
            }
            $s[] = 'public $' . $field['name'] . ' = ' . $default . ';';
        }

        return $indent . implode(PHP_EOL . $indent, $s);
    }

    public function compileField($field, $indent)
    {
        $refl = new ReflectionClass('TMProto');
        $constants = $refl->getConstants();

        $s = array();
        $s[] = '$f = new TMProtoField();';
        $s[] = '$f->number     = ' . $field['number'] . ';';
        $s[] = '$f->name       = \''. $field['name'] . '\';';

        $type = 'TYPE_' . strtoupper($field['type']);
        if (isset($constants[$type])) {
            $s[] = '$f->type       = TMProto::' . $type . ';';
        } else {
            $s[] = '$f->type       = TMProto::TYPE_MESSAGE;';
            $s[] = '$f->reference  = \'' . $field['type'] . '\';';
        }
        if ($type = 'TYPE_STRING' && isset($field['lengthType'])) {
            $s[] = '$f->lengthType = TMProto::TYPE_' . strtoupper($field['lengthType']) . ';';
        } elseif ($type = 'TYPE_STRING' && isset($field['length'])) {
            $s[] = '$f->length     = ' . $field['length'] . ';';
        }

        $s[] = '$f->rule       = TMProto::RULE_' . strtoupper($field['rule']) . ';';
        if ($field['rule'] === 'repeated' && isset($field['repeatType'])) {
            $s[] = '$f->repeatType = TMProto::TYPE_' . strtoupper($field['repeatType']) . ';';
        }

        if (isset($field['default'])) {
            switch ($field['type']) {
                case 'string':
                    $s[] = '$f->default    = \'' . addcslashes($field['default'], '\'\\') . '\';';
                    break;

                default: // Numbers
                    $s[] = '$f->default    = ' . $field['default'] . ';';
                    break;
            }
        }

        return $indent . implode(PHP_EOL . $indent, $s);
    }

    public function generateAccessors($field, $indent)
    {
        $tag = $field['number'];
        $name = $field['name'];
        $camel = ucfirst($name);

        // hasXXX
        $s[] = 'public function has' . $camel . '()';
        $s[] = '{';
        $s[] = '    return $this->has(' . $tag . ');';
        $s[] = '}';
        $s[] = '';

        // clearXXX
        $s[] = 'public function clear' . $camel . '()';
        $s[] = '{';
        $s[] = '    return $this->clear(' . $tag . ');';
        $s[] = '}';
        $s[] = '';

        if ($field['rule'] === 'repeated') {
            // getXXX
            $s[] = 'public function get' . $camel . '($idx = null)';
            $s[] = '{';
            $s[] = '    return $this->get(' . $tag . ', $idx);';
            $s[] = '}';
            $s[] = '';

            // setXXX
            $s[] = 'public function set' . $camel . '($value, $idx = null)';
            $s[] = '{';
            $s[] = '    return $this->set(' . $tag . ', $value, $idx);';
            $s[] = '}';
            $s[] = '';

            // getXXXList
            $s[] = 'public function get' . $camel . 'List()';
            $s[] = '{';
            $s[] = '    return $this->get(' . $tag . ');';
            $s[] = '}';
            $s[] = '';

            // addXXX
            $s[] = 'public function add' . $camel . '($value)';
            $s[] = '{';
            $s[] = '    return $this->add(' . $tag . ', $value);';
            $s[] = '}';
            $s[] = '';
        } else {
            // getXXX
            $s[] = 'public function get' . $camel . '()';
            $s[] = '{';
            $s[] = '    return $this->get(' . $tag . ');';
            $s[] = '}';
            $s[] = '';

            // setXXX
            $s[] = 'public function set' . $camel . '($value)';
            $s[] = '{';
            $s[] = '    return $this->set(' . $tag . ', $value);';
            $s[] = '}';
            $s[] = '';
        }

        return $indent . implode(PHP_EOL . $indent, $s);
    }
}
